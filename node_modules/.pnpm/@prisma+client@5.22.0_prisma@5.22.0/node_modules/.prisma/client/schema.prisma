generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Project {
  id           String       @id @default(uuid())
  name         String
  description  String?
  status       String       @default("active") // "active", "archived", "future"
  startDate    DateTime?
  lastActivity DateTime?
  createdAt    DateTime     @default(now())
  experiments  Experiment[]
  tasks        Task[]
}

model Experiment {
  id                 String              @id @default(uuid())
  project            Project             @relation(fields: [projectId], references: [id])
  projectId          String
  name               String
  description        String?
  createdAt          DateTime            @default(now())
  notes              Note[]
  tables             Table[]
  protocolExecutions ProtocolExecution[]
  tasks              Task[]
  recipeExecutions   RecipeExecution[]
}

model Note {
  id           String      @id @default(uuid())
  experiment   Experiment? @relation(fields: [experimentId], references: [id])
  experimentId String?
  title        String
  content      String
  date         DateTime?
  type         String
  createdAt    DateTime    @default(now())
  links        Link[]      @relation("NoteLinks")
}

model DailyNote {
  id        String   @id @default(uuid())
  date      DateTime @unique
  content   String
  createdAt DateTime @default(now())
}

model PDF {
  id         String      @id @default(uuid())
  filePath   String
  title      String
  uploadedAt DateTime    @default(now())
  highlights Highlight[]
}

model Highlight {
  id        String   @id @default(uuid())
  pdf       PDF      @relation(fields: [pdfId], references: [id])
  pdfId     String
  page      Int
  text      String
  coords    String?
  createdAt DateTime @default(now())
  links     Link[]   @relation("HighlightLinks")
}

model LiteratureNote {
  id             String          @id @default(uuid())
  title          String
  authors        String?
  year           String?
  journal        String?
  doi            String?
  abstract       String?
  tags           String?
  citation       String?
  synonyms       String? // comma-separated
  userNote       String? // markdown or rich text
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  relatedEntries DatabaseEntry[] @relation("EntryLitNotes")
}

model DatabaseEntry {
  id              String           @id @default(uuid())
  type            String // Changed from enum to String
  name            String
  description     String?
  properties      String? // Changed from Json to String (we'll store JSON as text)
  // Scientific metadata fields
  molecularWeight Float?
  concentration   String?
  storage         String?
  supplier        String?
  catalogNumber   String?
  purity          String?
  sequence        String?
  organism        String?
  function        String?
  protocol        String?
  equipment       String? // Store as comma-separated string
  duration        String?
  temperature     String?
  pH              String?
  createdAt       DateTime         @default(now())
  metadata        String?
  relatedResearch String?
  relatedLitNotes LiteratureNote[] @relation("EntryLitNotes")
  links           Link[]           @relation("DatabaseEntryLinks")
}

model Table {
  id           String      @id @default(uuid())
  name         String
  description  String?
  experiment   Experiment? @relation(fields: [experimentId], references: [id])
  experimentId String?
  columns      String // JSON string of column definitions
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  rows         TableRow[]
  links        Link[]      @relation("TableLinks")
}

model TableRow {
  id        String   @id @default(uuid())
  table     Table    @relation(fields: [tableId], references: [id])
  tableId   String
  data      String // JSON string of row data
  rowNumber Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Protocol {
  id               String              @id @default(uuid())
  name             String
  description      String?
  category         String // e.g., "Cell Culture", "PCR", "Western Blot", "Microscopy"
  version          String              @default("1.0")
  steps            String // JSON string of protocol steps
  equipment        String? // JSON string of required equipment
  reagents         String? // JSON string of required reagents
  safetyNotes      String? // Safety considerations
  expectedDuration String? // e.g., "2 hours", "overnight"
  difficulty       String? // "Easy", "Medium", "Hard"
  successRate      Float? // Percentage of successful executions
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  executions       ProtocolExecution[]
  links            Link[]              @relation("ProtocolLinks")
}

model ProtocolExecution {
  id             String      @id @default(uuid())
  protocol       Protocol    @relation(fields: [protocolId], references: [id])
  protocolId     String
  experiment     Experiment? @relation(fields: [experimentId], references: [id])
  experimentId   String?
  status         String // "planned", "in_progress", "completed", "failed", "abandoned"
  startDate      DateTime?
  endDate        DateTime?
  notes          String? // Execution-specific notes
  modifications  String? // JSON string of modifications made to the protocol
  results        String? // JSON string of results/observations
  issues         String? // JSON string of issues encountered
  nextSteps      String? // What to do next
  executedBy     String? // Who executed the protocol
  completedSteps String? // JSON array of completed step IDs or numbers
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  links          Link[]      @relation("ProtocolExecutionLinks")
}

model Link {
  id                String             @id @default(uuid())
  sourceType        String
  sourceId          String
  targetType        String
  targetId          String
  createdAt         DateTime           @default(now())
  // Relations for backlinks
  note              Note?              @relation("NoteLinks", fields: [sourceId], references: [id])
  highlight         Highlight?         @relation("HighlightLinks", fields: [sourceId], references: [id])
  databaseEntry     DatabaseEntry?     @relation("DatabaseEntryLinks", fields: [sourceId], references: [id])
  table             Table?             @relation("TableLinks", fields: [sourceId], references: [id])
  protocol          Protocol?          @relation("ProtocolLinks", fields: [sourceId], references: [id])
  protocolExecution ProtocolExecution? @relation("ProtocolExecutionLinks", fields: [sourceId], references: [id])
}

model Recipe {
  id               String             @id @default(cuid())
  name             String
  description      String?
  category         String // e.g., "Media", "Buffer", "Solution", "Reagent"
  type             String // e.g., "Cell Culture Media", "PBS", "Lysis Buffer"
  ingredients      RecipeIngredient[]
  steps            String? // JSON string of recipe steps
  instructions     String?
  notes            String?
  pH               Float?
  osmolarity       String?
  storage          String? // e.g., "4°C", "-20°C", "RT"
  shelfLife        String?
  source           String? // e.g., "Lab protocol", "Paper reference", "Commercial"
  version          String             @default("1.0")
  isPublic         Boolean            @default(false)
  createdBy        String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  recipeExecutions RecipeExecution[]

  @@map("recipes")
}

model RecipeIngredient {
  id            String  @id @default(cuid())
  recipeId      String
  recipe        Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  name          String
  amount        Float
  unit          String // e.g., "g", "mL", "μL", "mM"
  concentration String? // e.g., "10%", "1M"
  supplier      String?
  catalogNumber String?
  notes         String?

  @@map("recipe_ingredients")
}

model CalendarEvent {
  id          String    @id @default(uuid())
  type        String
  title       String
  description String?
  start       DateTime
  end         DateTime?
  allDay      Boolean?  @default(false)
  relatedId   String?
  createdAt   DateTime  @default(now())
  metadata    String? // JSON string for extra data
}

model Task {
  id            String      @id @default(uuid())
  title         String
  description   String?
  status        String // todo, in_progress, done, overdue
  priority      String // high, medium, low
  deadline      DateTime?
  createdAt     DateTime    @default(now())
  completedAt   DateTime?
  autoGenerated Boolean     @default(false)
  project       Project     @relation(fields: [projectId], references: [id])
  projectId     String
  experiment    Experiment? @relation(fields: [experimentId], references: [id])
  experimentId  String?
}

model RecipeExecution {
  id             String      @id @default(uuid())
  recipe         Recipe      @relation(fields: [recipeId], references: [id])
  recipeId       String
  experiment     Experiment? @relation(fields: [experimentId], references: [id])
  experimentId   String?
  status         String // "planned", "in_progress", "completed", "failed", "abandoned"
  startDate      DateTime?
  endDate        DateTime?
  notes          String?
  completedSteps String? // JSON array of completed step IDs or numbers
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}
