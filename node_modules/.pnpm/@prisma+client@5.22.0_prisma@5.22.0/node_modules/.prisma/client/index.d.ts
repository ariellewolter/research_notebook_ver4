
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Project
 * 
 */
export type Project = $Result.DefaultSelection<Prisma.$ProjectPayload>
/**
 * Model Experiment
 * 
 */
export type Experiment = $Result.DefaultSelection<Prisma.$ExperimentPayload>
/**
 * Model Note
 * 
 */
export type Note = $Result.DefaultSelection<Prisma.$NotePayload>
/**
 * Model DailyNote
 * 
 */
export type DailyNote = $Result.DefaultSelection<Prisma.$DailyNotePayload>
/**
 * Model PDF
 * 
 */
export type PDF = $Result.DefaultSelection<Prisma.$PDFPayload>
/**
 * Model Highlight
 * 
 */
export type Highlight = $Result.DefaultSelection<Prisma.$HighlightPayload>
/**
 * Model LiteratureNote
 * 
 */
export type LiteratureNote = $Result.DefaultSelection<Prisma.$LiteratureNotePayload>
/**
 * Model DatabaseEntry
 * 
 */
export type DatabaseEntry = $Result.DefaultSelection<Prisma.$DatabaseEntryPayload>
/**
 * Model Table
 * 
 */
export type Table = $Result.DefaultSelection<Prisma.$TablePayload>
/**
 * Model TableRow
 * 
 */
export type TableRow = $Result.DefaultSelection<Prisma.$TableRowPayload>
/**
 * Model Protocol
 * 
 */
export type Protocol = $Result.DefaultSelection<Prisma.$ProtocolPayload>
/**
 * Model ProtocolExecution
 * 
 */
export type ProtocolExecution = $Result.DefaultSelection<Prisma.$ProtocolExecutionPayload>
/**
 * Model Link
 * 
 */
export type Link = $Result.DefaultSelection<Prisma.$LinkPayload>
/**
 * Model Recipe
 * 
 */
export type Recipe = $Result.DefaultSelection<Prisma.$RecipePayload>
/**
 * Model RecipeIngredient
 * 
 */
export type RecipeIngredient = $Result.DefaultSelection<Prisma.$RecipeIngredientPayload>
/**
 * Model CalendarEvent
 * 
 */
export type CalendarEvent = $Result.DefaultSelection<Prisma.$CalendarEventPayload>
/**
 * Model Task
 * 
 */
export type Task = $Result.DefaultSelection<Prisma.$TaskPayload>
/**
 * Model RecipeExecution
 * 
 */
export type RecipeExecution = $Result.DefaultSelection<Prisma.$RecipeExecutionPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Projects
 * const projects = await prisma.project.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Projects
   * const projects = await prisma.project.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<ExtArgs>;

  /**
   * `prisma.experiment`: Exposes CRUD operations for the **Experiment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Experiments
    * const experiments = await prisma.experiment.findMany()
    * ```
    */
  get experiment(): Prisma.ExperimentDelegate<ExtArgs>;

  /**
   * `prisma.note`: Exposes CRUD operations for the **Note** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notes
    * const notes = await prisma.note.findMany()
    * ```
    */
  get note(): Prisma.NoteDelegate<ExtArgs>;

  /**
   * `prisma.dailyNote`: Exposes CRUD operations for the **DailyNote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DailyNotes
    * const dailyNotes = await prisma.dailyNote.findMany()
    * ```
    */
  get dailyNote(): Prisma.DailyNoteDelegate<ExtArgs>;

  /**
   * `prisma.pDF`: Exposes CRUD operations for the **PDF** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PDFS
    * const pDFS = await prisma.pDF.findMany()
    * ```
    */
  get pDF(): Prisma.PDFDelegate<ExtArgs>;

  /**
   * `prisma.highlight`: Exposes CRUD operations for the **Highlight** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Highlights
    * const highlights = await prisma.highlight.findMany()
    * ```
    */
  get highlight(): Prisma.HighlightDelegate<ExtArgs>;

  /**
   * `prisma.literatureNote`: Exposes CRUD operations for the **LiteratureNote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LiteratureNotes
    * const literatureNotes = await prisma.literatureNote.findMany()
    * ```
    */
  get literatureNote(): Prisma.LiteratureNoteDelegate<ExtArgs>;

  /**
   * `prisma.databaseEntry`: Exposes CRUD operations for the **DatabaseEntry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DatabaseEntries
    * const databaseEntries = await prisma.databaseEntry.findMany()
    * ```
    */
  get databaseEntry(): Prisma.DatabaseEntryDelegate<ExtArgs>;

  /**
   * `prisma.table`: Exposes CRUD operations for the **Table** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tables
    * const tables = await prisma.table.findMany()
    * ```
    */
  get table(): Prisma.TableDelegate<ExtArgs>;

  /**
   * `prisma.tableRow`: Exposes CRUD operations for the **TableRow** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TableRows
    * const tableRows = await prisma.tableRow.findMany()
    * ```
    */
  get tableRow(): Prisma.TableRowDelegate<ExtArgs>;

  /**
   * `prisma.protocol`: Exposes CRUD operations for the **Protocol** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Protocols
    * const protocols = await prisma.protocol.findMany()
    * ```
    */
  get protocol(): Prisma.ProtocolDelegate<ExtArgs>;

  /**
   * `prisma.protocolExecution`: Exposes CRUD operations for the **ProtocolExecution** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProtocolExecutions
    * const protocolExecutions = await prisma.protocolExecution.findMany()
    * ```
    */
  get protocolExecution(): Prisma.ProtocolExecutionDelegate<ExtArgs>;

  /**
   * `prisma.link`: Exposes CRUD operations for the **Link** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Links
    * const links = await prisma.link.findMany()
    * ```
    */
  get link(): Prisma.LinkDelegate<ExtArgs>;

  /**
   * `prisma.recipe`: Exposes CRUD operations for the **Recipe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recipes
    * const recipes = await prisma.recipe.findMany()
    * ```
    */
  get recipe(): Prisma.RecipeDelegate<ExtArgs>;

  /**
   * `prisma.recipeIngredient`: Exposes CRUD operations for the **RecipeIngredient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RecipeIngredients
    * const recipeIngredients = await prisma.recipeIngredient.findMany()
    * ```
    */
  get recipeIngredient(): Prisma.RecipeIngredientDelegate<ExtArgs>;

  /**
   * `prisma.calendarEvent`: Exposes CRUD operations for the **CalendarEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CalendarEvents
    * const calendarEvents = await prisma.calendarEvent.findMany()
    * ```
    */
  get calendarEvent(): Prisma.CalendarEventDelegate<ExtArgs>;

  /**
   * `prisma.task`: Exposes CRUD operations for the **Task** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.task.findMany()
    * ```
    */
  get task(): Prisma.TaskDelegate<ExtArgs>;

  /**
   * `prisma.recipeExecution`: Exposes CRUD operations for the **RecipeExecution** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RecipeExecutions
    * const recipeExecutions = await prisma.recipeExecution.findMany()
    * ```
    */
  get recipeExecution(): Prisma.RecipeExecutionDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Project: 'Project',
    Experiment: 'Experiment',
    Note: 'Note',
    DailyNote: 'DailyNote',
    PDF: 'PDF',
    Highlight: 'Highlight',
    LiteratureNote: 'LiteratureNote',
    DatabaseEntry: 'DatabaseEntry',
    Table: 'Table',
    TableRow: 'TableRow',
    Protocol: 'Protocol',
    ProtocolExecution: 'ProtocolExecution',
    Link: 'Link',
    Recipe: 'Recipe',
    RecipeIngredient: 'RecipeIngredient',
    CalendarEvent: 'CalendarEvent',
    Task: 'Task',
    RecipeExecution: 'RecipeExecution'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "project" | "experiment" | "note" | "dailyNote" | "pDF" | "highlight" | "literatureNote" | "databaseEntry" | "table" | "tableRow" | "protocol" | "protocolExecution" | "link" | "recipe" | "recipeIngredient" | "calendarEvent" | "task" | "recipeExecution"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Project: {
        payload: Prisma.$ProjectPayload<ExtArgs>
        fields: Prisma.ProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      Experiment: {
        payload: Prisma.$ExperimentPayload<ExtArgs>
        fields: Prisma.ExperimentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExperimentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExperimentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentPayload>
          }
          findFirst: {
            args: Prisma.ExperimentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExperimentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentPayload>
          }
          findMany: {
            args: Prisma.ExperimentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentPayload>[]
          }
          create: {
            args: Prisma.ExperimentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentPayload>
          }
          createMany: {
            args: Prisma.ExperimentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExperimentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentPayload>[]
          }
          delete: {
            args: Prisma.ExperimentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentPayload>
          }
          update: {
            args: Prisma.ExperimentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentPayload>
          }
          deleteMany: {
            args: Prisma.ExperimentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExperimentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ExperimentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExperimentPayload>
          }
          aggregate: {
            args: Prisma.ExperimentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExperiment>
          }
          groupBy: {
            args: Prisma.ExperimentGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExperimentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExperimentCountArgs<ExtArgs>
            result: $Utils.Optional<ExperimentCountAggregateOutputType> | number
          }
        }
      }
      Note: {
        payload: Prisma.$NotePayload<ExtArgs>
        fields: Prisma.NoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          findFirst: {
            args: Prisma.NoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          findMany: {
            args: Prisma.NoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>[]
          }
          create: {
            args: Prisma.NoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          createMany: {
            args: Prisma.NoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>[]
          }
          delete: {
            args: Prisma.NoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          update: {
            args: Prisma.NoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          deleteMany: {
            args: Prisma.NoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          aggregate: {
            args: Prisma.NoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNote>
          }
          groupBy: {
            args: Prisma.NoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<NoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.NoteCountArgs<ExtArgs>
            result: $Utils.Optional<NoteCountAggregateOutputType> | number
          }
        }
      }
      DailyNote: {
        payload: Prisma.$DailyNotePayload<ExtArgs>
        fields: Prisma.DailyNoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DailyNoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyNotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DailyNoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyNotePayload>
          }
          findFirst: {
            args: Prisma.DailyNoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyNotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DailyNoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyNotePayload>
          }
          findMany: {
            args: Prisma.DailyNoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyNotePayload>[]
          }
          create: {
            args: Prisma.DailyNoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyNotePayload>
          }
          createMany: {
            args: Prisma.DailyNoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DailyNoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyNotePayload>[]
          }
          delete: {
            args: Prisma.DailyNoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyNotePayload>
          }
          update: {
            args: Prisma.DailyNoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyNotePayload>
          }
          deleteMany: {
            args: Prisma.DailyNoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DailyNoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DailyNoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyNotePayload>
          }
          aggregate: {
            args: Prisma.DailyNoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDailyNote>
          }
          groupBy: {
            args: Prisma.DailyNoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<DailyNoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.DailyNoteCountArgs<ExtArgs>
            result: $Utils.Optional<DailyNoteCountAggregateOutputType> | number
          }
        }
      }
      PDF: {
        payload: Prisma.$PDFPayload<ExtArgs>
        fields: Prisma.PDFFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PDFFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PDFPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PDFFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PDFPayload>
          }
          findFirst: {
            args: Prisma.PDFFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PDFPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PDFFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PDFPayload>
          }
          findMany: {
            args: Prisma.PDFFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PDFPayload>[]
          }
          create: {
            args: Prisma.PDFCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PDFPayload>
          }
          createMany: {
            args: Prisma.PDFCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PDFCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PDFPayload>[]
          }
          delete: {
            args: Prisma.PDFDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PDFPayload>
          }
          update: {
            args: Prisma.PDFUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PDFPayload>
          }
          deleteMany: {
            args: Prisma.PDFDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PDFUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PDFUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PDFPayload>
          }
          aggregate: {
            args: Prisma.PDFAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePDF>
          }
          groupBy: {
            args: Prisma.PDFGroupByArgs<ExtArgs>
            result: $Utils.Optional<PDFGroupByOutputType>[]
          }
          count: {
            args: Prisma.PDFCountArgs<ExtArgs>
            result: $Utils.Optional<PDFCountAggregateOutputType> | number
          }
        }
      }
      Highlight: {
        payload: Prisma.$HighlightPayload<ExtArgs>
        fields: Prisma.HighlightFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HighlightFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HighlightPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HighlightFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HighlightPayload>
          }
          findFirst: {
            args: Prisma.HighlightFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HighlightPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HighlightFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HighlightPayload>
          }
          findMany: {
            args: Prisma.HighlightFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HighlightPayload>[]
          }
          create: {
            args: Prisma.HighlightCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HighlightPayload>
          }
          createMany: {
            args: Prisma.HighlightCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HighlightCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HighlightPayload>[]
          }
          delete: {
            args: Prisma.HighlightDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HighlightPayload>
          }
          update: {
            args: Prisma.HighlightUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HighlightPayload>
          }
          deleteMany: {
            args: Prisma.HighlightDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HighlightUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.HighlightUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HighlightPayload>
          }
          aggregate: {
            args: Prisma.HighlightAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHighlight>
          }
          groupBy: {
            args: Prisma.HighlightGroupByArgs<ExtArgs>
            result: $Utils.Optional<HighlightGroupByOutputType>[]
          }
          count: {
            args: Prisma.HighlightCountArgs<ExtArgs>
            result: $Utils.Optional<HighlightCountAggregateOutputType> | number
          }
        }
      }
      LiteratureNote: {
        payload: Prisma.$LiteratureNotePayload<ExtArgs>
        fields: Prisma.LiteratureNoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LiteratureNoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LiteratureNotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LiteratureNoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LiteratureNotePayload>
          }
          findFirst: {
            args: Prisma.LiteratureNoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LiteratureNotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LiteratureNoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LiteratureNotePayload>
          }
          findMany: {
            args: Prisma.LiteratureNoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LiteratureNotePayload>[]
          }
          create: {
            args: Prisma.LiteratureNoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LiteratureNotePayload>
          }
          createMany: {
            args: Prisma.LiteratureNoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LiteratureNoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LiteratureNotePayload>[]
          }
          delete: {
            args: Prisma.LiteratureNoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LiteratureNotePayload>
          }
          update: {
            args: Prisma.LiteratureNoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LiteratureNotePayload>
          }
          deleteMany: {
            args: Prisma.LiteratureNoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LiteratureNoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LiteratureNoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LiteratureNotePayload>
          }
          aggregate: {
            args: Prisma.LiteratureNoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLiteratureNote>
          }
          groupBy: {
            args: Prisma.LiteratureNoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<LiteratureNoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.LiteratureNoteCountArgs<ExtArgs>
            result: $Utils.Optional<LiteratureNoteCountAggregateOutputType> | number
          }
        }
      }
      DatabaseEntry: {
        payload: Prisma.$DatabaseEntryPayload<ExtArgs>
        fields: Prisma.DatabaseEntryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DatabaseEntryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatabaseEntryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DatabaseEntryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatabaseEntryPayload>
          }
          findFirst: {
            args: Prisma.DatabaseEntryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatabaseEntryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DatabaseEntryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatabaseEntryPayload>
          }
          findMany: {
            args: Prisma.DatabaseEntryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatabaseEntryPayload>[]
          }
          create: {
            args: Prisma.DatabaseEntryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatabaseEntryPayload>
          }
          createMany: {
            args: Prisma.DatabaseEntryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DatabaseEntryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatabaseEntryPayload>[]
          }
          delete: {
            args: Prisma.DatabaseEntryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatabaseEntryPayload>
          }
          update: {
            args: Prisma.DatabaseEntryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatabaseEntryPayload>
          }
          deleteMany: {
            args: Prisma.DatabaseEntryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DatabaseEntryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DatabaseEntryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatabaseEntryPayload>
          }
          aggregate: {
            args: Prisma.DatabaseEntryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDatabaseEntry>
          }
          groupBy: {
            args: Prisma.DatabaseEntryGroupByArgs<ExtArgs>
            result: $Utils.Optional<DatabaseEntryGroupByOutputType>[]
          }
          count: {
            args: Prisma.DatabaseEntryCountArgs<ExtArgs>
            result: $Utils.Optional<DatabaseEntryCountAggregateOutputType> | number
          }
        }
      }
      Table: {
        payload: Prisma.$TablePayload<ExtArgs>
        fields: Prisma.TableFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TableFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TablePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TableFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TablePayload>
          }
          findFirst: {
            args: Prisma.TableFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TablePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TableFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TablePayload>
          }
          findMany: {
            args: Prisma.TableFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TablePayload>[]
          }
          create: {
            args: Prisma.TableCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TablePayload>
          }
          createMany: {
            args: Prisma.TableCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TableCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TablePayload>[]
          }
          delete: {
            args: Prisma.TableDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TablePayload>
          }
          update: {
            args: Prisma.TableUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TablePayload>
          }
          deleteMany: {
            args: Prisma.TableDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TableUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TableUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TablePayload>
          }
          aggregate: {
            args: Prisma.TableAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTable>
          }
          groupBy: {
            args: Prisma.TableGroupByArgs<ExtArgs>
            result: $Utils.Optional<TableGroupByOutputType>[]
          }
          count: {
            args: Prisma.TableCountArgs<ExtArgs>
            result: $Utils.Optional<TableCountAggregateOutputType> | number
          }
        }
      }
      TableRow: {
        payload: Prisma.$TableRowPayload<ExtArgs>
        fields: Prisma.TableRowFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TableRowFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TableRowPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TableRowFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TableRowPayload>
          }
          findFirst: {
            args: Prisma.TableRowFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TableRowPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TableRowFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TableRowPayload>
          }
          findMany: {
            args: Prisma.TableRowFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TableRowPayload>[]
          }
          create: {
            args: Prisma.TableRowCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TableRowPayload>
          }
          createMany: {
            args: Prisma.TableRowCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TableRowCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TableRowPayload>[]
          }
          delete: {
            args: Prisma.TableRowDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TableRowPayload>
          }
          update: {
            args: Prisma.TableRowUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TableRowPayload>
          }
          deleteMany: {
            args: Prisma.TableRowDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TableRowUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TableRowUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TableRowPayload>
          }
          aggregate: {
            args: Prisma.TableRowAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTableRow>
          }
          groupBy: {
            args: Prisma.TableRowGroupByArgs<ExtArgs>
            result: $Utils.Optional<TableRowGroupByOutputType>[]
          }
          count: {
            args: Prisma.TableRowCountArgs<ExtArgs>
            result: $Utils.Optional<TableRowCountAggregateOutputType> | number
          }
        }
      }
      Protocol: {
        payload: Prisma.$ProtocolPayload<ExtArgs>
        fields: Prisma.ProtocolFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProtocolFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProtocolPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProtocolFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProtocolPayload>
          }
          findFirst: {
            args: Prisma.ProtocolFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProtocolPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProtocolFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProtocolPayload>
          }
          findMany: {
            args: Prisma.ProtocolFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProtocolPayload>[]
          }
          create: {
            args: Prisma.ProtocolCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProtocolPayload>
          }
          createMany: {
            args: Prisma.ProtocolCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProtocolCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProtocolPayload>[]
          }
          delete: {
            args: Prisma.ProtocolDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProtocolPayload>
          }
          update: {
            args: Prisma.ProtocolUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProtocolPayload>
          }
          deleteMany: {
            args: Prisma.ProtocolDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProtocolUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProtocolUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProtocolPayload>
          }
          aggregate: {
            args: Prisma.ProtocolAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProtocol>
          }
          groupBy: {
            args: Prisma.ProtocolGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProtocolGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProtocolCountArgs<ExtArgs>
            result: $Utils.Optional<ProtocolCountAggregateOutputType> | number
          }
        }
      }
      ProtocolExecution: {
        payload: Prisma.$ProtocolExecutionPayload<ExtArgs>
        fields: Prisma.ProtocolExecutionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProtocolExecutionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProtocolExecutionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProtocolExecutionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProtocolExecutionPayload>
          }
          findFirst: {
            args: Prisma.ProtocolExecutionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProtocolExecutionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProtocolExecutionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProtocolExecutionPayload>
          }
          findMany: {
            args: Prisma.ProtocolExecutionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProtocolExecutionPayload>[]
          }
          create: {
            args: Prisma.ProtocolExecutionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProtocolExecutionPayload>
          }
          createMany: {
            args: Prisma.ProtocolExecutionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProtocolExecutionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProtocolExecutionPayload>[]
          }
          delete: {
            args: Prisma.ProtocolExecutionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProtocolExecutionPayload>
          }
          update: {
            args: Prisma.ProtocolExecutionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProtocolExecutionPayload>
          }
          deleteMany: {
            args: Prisma.ProtocolExecutionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProtocolExecutionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProtocolExecutionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProtocolExecutionPayload>
          }
          aggregate: {
            args: Prisma.ProtocolExecutionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProtocolExecution>
          }
          groupBy: {
            args: Prisma.ProtocolExecutionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProtocolExecutionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProtocolExecutionCountArgs<ExtArgs>
            result: $Utils.Optional<ProtocolExecutionCountAggregateOutputType> | number
          }
        }
      }
      Link: {
        payload: Prisma.$LinkPayload<ExtArgs>
        fields: Prisma.LinkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LinkFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LinkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LinkFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LinkPayload>
          }
          findFirst: {
            args: Prisma.LinkFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LinkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LinkFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LinkPayload>
          }
          findMany: {
            args: Prisma.LinkFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LinkPayload>[]
          }
          create: {
            args: Prisma.LinkCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LinkPayload>
          }
          createMany: {
            args: Prisma.LinkCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LinkCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LinkPayload>[]
          }
          delete: {
            args: Prisma.LinkDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LinkPayload>
          }
          update: {
            args: Prisma.LinkUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LinkPayload>
          }
          deleteMany: {
            args: Prisma.LinkDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LinkUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LinkUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LinkPayload>
          }
          aggregate: {
            args: Prisma.LinkAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLink>
          }
          groupBy: {
            args: Prisma.LinkGroupByArgs<ExtArgs>
            result: $Utils.Optional<LinkGroupByOutputType>[]
          }
          count: {
            args: Prisma.LinkCountArgs<ExtArgs>
            result: $Utils.Optional<LinkCountAggregateOutputType> | number
          }
        }
      }
      Recipe: {
        payload: Prisma.$RecipePayload<ExtArgs>
        fields: Prisma.RecipeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecipeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecipeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          findFirst: {
            args: Prisma.RecipeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecipeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          findMany: {
            args: Prisma.RecipeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>[]
          }
          create: {
            args: Prisma.RecipeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          createMany: {
            args: Prisma.RecipeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RecipeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>[]
          }
          delete: {
            args: Prisma.RecipeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          update: {
            args: Prisma.RecipeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          deleteMany: {
            args: Prisma.RecipeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RecipeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RecipeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          aggregate: {
            args: Prisma.RecipeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecipe>
          }
          groupBy: {
            args: Prisma.RecipeGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecipeGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecipeCountArgs<ExtArgs>
            result: $Utils.Optional<RecipeCountAggregateOutputType> | number
          }
        }
      }
      RecipeIngredient: {
        payload: Prisma.$RecipeIngredientPayload<ExtArgs>
        fields: Prisma.RecipeIngredientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecipeIngredientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecipeIngredientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload>
          }
          findFirst: {
            args: Prisma.RecipeIngredientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecipeIngredientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload>
          }
          findMany: {
            args: Prisma.RecipeIngredientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload>[]
          }
          create: {
            args: Prisma.RecipeIngredientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload>
          }
          createMany: {
            args: Prisma.RecipeIngredientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RecipeIngredientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload>[]
          }
          delete: {
            args: Prisma.RecipeIngredientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload>
          }
          update: {
            args: Prisma.RecipeIngredientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload>
          }
          deleteMany: {
            args: Prisma.RecipeIngredientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RecipeIngredientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RecipeIngredientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload>
          }
          aggregate: {
            args: Prisma.RecipeIngredientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecipeIngredient>
          }
          groupBy: {
            args: Prisma.RecipeIngredientGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecipeIngredientGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecipeIngredientCountArgs<ExtArgs>
            result: $Utils.Optional<RecipeIngredientCountAggregateOutputType> | number
          }
        }
      }
      CalendarEvent: {
        payload: Prisma.$CalendarEventPayload<ExtArgs>
        fields: Prisma.CalendarEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CalendarEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CalendarEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarEventPayload>
          }
          findFirst: {
            args: Prisma.CalendarEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CalendarEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarEventPayload>
          }
          findMany: {
            args: Prisma.CalendarEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarEventPayload>[]
          }
          create: {
            args: Prisma.CalendarEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarEventPayload>
          }
          createMany: {
            args: Prisma.CalendarEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CalendarEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarEventPayload>[]
          }
          delete: {
            args: Prisma.CalendarEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarEventPayload>
          }
          update: {
            args: Prisma.CalendarEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarEventPayload>
          }
          deleteMany: {
            args: Prisma.CalendarEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CalendarEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CalendarEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarEventPayload>
          }
          aggregate: {
            args: Prisma.CalendarEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCalendarEvent>
          }
          groupBy: {
            args: Prisma.CalendarEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<CalendarEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.CalendarEventCountArgs<ExtArgs>
            result: $Utils.Optional<CalendarEventCountAggregateOutputType> | number
          }
        }
      }
      Task: {
        payload: Prisma.$TaskPayload<ExtArgs>
        fields: Prisma.TaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findFirst: {
            args: Prisma.TaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findMany: {
            args: Prisma.TaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          create: {
            args: Prisma.TaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          createMany: {
            args: Prisma.TaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TaskCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          delete: {
            args: Prisma.TaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          update: {
            args: Prisma.TaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          deleteMany: {
            args: Prisma.TaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          aggregate: {
            args: Prisma.TaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTask>
          }
          groupBy: {
            args: Prisma.TaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskCountArgs<ExtArgs>
            result: $Utils.Optional<TaskCountAggregateOutputType> | number
          }
        }
      }
      RecipeExecution: {
        payload: Prisma.$RecipeExecutionPayload<ExtArgs>
        fields: Prisma.RecipeExecutionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecipeExecutionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeExecutionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecipeExecutionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeExecutionPayload>
          }
          findFirst: {
            args: Prisma.RecipeExecutionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeExecutionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecipeExecutionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeExecutionPayload>
          }
          findMany: {
            args: Prisma.RecipeExecutionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeExecutionPayload>[]
          }
          create: {
            args: Prisma.RecipeExecutionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeExecutionPayload>
          }
          createMany: {
            args: Prisma.RecipeExecutionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RecipeExecutionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeExecutionPayload>[]
          }
          delete: {
            args: Prisma.RecipeExecutionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeExecutionPayload>
          }
          update: {
            args: Prisma.RecipeExecutionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeExecutionPayload>
          }
          deleteMany: {
            args: Prisma.RecipeExecutionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RecipeExecutionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RecipeExecutionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipeExecutionPayload>
          }
          aggregate: {
            args: Prisma.RecipeExecutionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecipeExecution>
          }
          groupBy: {
            args: Prisma.RecipeExecutionGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecipeExecutionGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecipeExecutionCountArgs<ExtArgs>
            result: $Utils.Optional<RecipeExecutionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProjectCountOutputType
   */

  export type ProjectCountOutputType = {
    experiments: number
    tasks: number
  }

  export type ProjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    experiments?: boolean | ProjectCountOutputTypeCountExperimentsArgs
    tasks?: boolean | ProjectCountOutputTypeCountTasksArgs
  }

  // Custom InputTypes
  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountExperimentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExperimentWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }


  /**
   * Count Type ExperimentCountOutputType
   */

  export type ExperimentCountOutputType = {
    notes: number
    tables: number
    protocolExecutions: number
    tasks: number
    recipeExecutions: number
  }

  export type ExperimentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notes?: boolean | ExperimentCountOutputTypeCountNotesArgs
    tables?: boolean | ExperimentCountOutputTypeCountTablesArgs
    protocolExecutions?: boolean | ExperimentCountOutputTypeCountProtocolExecutionsArgs
    tasks?: boolean | ExperimentCountOutputTypeCountTasksArgs
    recipeExecutions?: boolean | ExperimentCountOutputTypeCountRecipeExecutionsArgs
  }

  // Custom InputTypes
  /**
   * ExperimentCountOutputType without action
   */
  export type ExperimentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperimentCountOutputType
     */
    select?: ExperimentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ExperimentCountOutputType without action
   */
  export type ExperimentCountOutputTypeCountNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
  }

  /**
   * ExperimentCountOutputType without action
   */
  export type ExperimentCountOutputTypeCountTablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TableWhereInput
  }

  /**
   * ExperimentCountOutputType without action
   */
  export type ExperimentCountOutputTypeCountProtocolExecutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProtocolExecutionWhereInput
  }

  /**
   * ExperimentCountOutputType without action
   */
  export type ExperimentCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }

  /**
   * ExperimentCountOutputType without action
   */
  export type ExperimentCountOutputTypeCountRecipeExecutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeExecutionWhereInput
  }


  /**
   * Count Type NoteCountOutputType
   */

  export type NoteCountOutputType = {
    links: number
  }

  export type NoteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    links?: boolean | NoteCountOutputTypeCountLinksArgs
  }

  // Custom InputTypes
  /**
   * NoteCountOutputType without action
   */
  export type NoteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoteCountOutputType
     */
    select?: NoteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * NoteCountOutputType without action
   */
  export type NoteCountOutputTypeCountLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LinkWhereInput
  }


  /**
   * Count Type PDFCountOutputType
   */

  export type PDFCountOutputType = {
    highlights: number
  }

  export type PDFCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    highlights?: boolean | PDFCountOutputTypeCountHighlightsArgs
  }

  // Custom InputTypes
  /**
   * PDFCountOutputType without action
   */
  export type PDFCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PDFCountOutputType
     */
    select?: PDFCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PDFCountOutputType without action
   */
  export type PDFCountOutputTypeCountHighlightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HighlightWhereInput
  }


  /**
   * Count Type HighlightCountOutputType
   */

  export type HighlightCountOutputType = {
    links: number
  }

  export type HighlightCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    links?: boolean | HighlightCountOutputTypeCountLinksArgs
  }

  // Custom InputTypes
  /**
   * HighlightCountOutputType without action
   */
  export type HighlightCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HighlightCountOutputType
     */
    select?: HighlightCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HighlightCountOutputType without action
   */
  export type HighlightCountOutputTypeCountLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LinkWhereInput
  }


  /**
   * Count Type LiteratureNoteCountOutputType
   */

  export type LiteratureNoteCountOutputType = {
    relatedEntries: number
  }

  export type LiteratureNoteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    relatedEntries?: boolean | LiteratureNoteCountOutputTypeCountRelatedEntriesArgs
  }

  // Custom InputTypes
  /**
   * LiteratureNoteCountOutputType without action
   */
  export type LiteratureNoteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LiteratureNoteCountOutputType
     */
    select?: LiteratureNoteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LiteratureNoteCountOutputType without action
   */
  export type LiteratureNoteCountOutputTypeCountRelatedEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DatabaseEntryWhereInput
  }


  /**
   * Count Type DatabaseEntryCountOutputType
   */

  export type DatabaseEntryCountOutputType = {
    relatedLitNotes: number
    links: number
  }

  export type DatabaseEntryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    relatedLitNotes?: boolean | DatabaseEntryCountOutputTypeCountRelatedLitNotesArgs
    links?: boolean | DatabaseEntryCountOutputTypeCountLinksArgs
  }

  // Custom InputTypes
  /**
   * DatabaseEntryCountOutputType without action
   */
  export type DatabaseEntryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatabaseEntryCountOutputType
     */
    select?: DatabaseEntryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DatabaseEntryCountOutputType without action
   */
  export type DatabaseEntryCountOutputTypeCountRelatedLitNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LiteratureNoteWhereInput
  }

  /**
   * DatabaseEntryCountOutputType without action
   */
  export type DatabaseEntryCountOutputTypeCountLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LinkWhereInput
  }


  /**
   * Count Type TableCountOutputType
   */

  export type TableCountOutputType = {
    rows: number
    links: number
  }

  export type TableCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rows?: boolean | TableCountOutputTypeCountRowsArgs
    links?: boolean | TableCountOutputTypeCountLinksArgs
  }

  // Custom InputTypes
  /**
   * TableCountOutputType without action
   */
  export type TableCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableCountOutputType
     */
    select?: TableCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TableCountOutputType without action
   */
  export type TableCountOutputTypeCountRowsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TableRowWhereInput
  }

  /**
   * TableCountOutputType without action
   */
  export type TableCountOutputTypeCountLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LinkWhereInput
  }


  /**
   * Count Type ProtocolCountOutputType
   */

  export type ProtocolCountOutputType = {
    executions: number
    links: number
  }

  export type ProtocolCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    executions?: boolean | ProtocolCountOutputTypeCountExecutionsArgs
    links?: boolean | ProtocolCountOutputTypeCountLinksArgs
  }

  // Custom InputTypes
  /**
   * ProtocolCountOutputType without action
   */
  export type ProtocolCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProtocolCountOutputType
     */
    select?: ProtocolCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProtocolCountOutputType without action
   */
  export type ProtocolCountOutputTypeCountExecutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProtocolExecutionWhereInput
  }

  /**
   * ProtocolCountOutputType without action
   */
  export type ProtocolCountOutputTypeCountLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LinkWhereInput
  }


  /**
   * Count Type ProtocolExecutionCountOutputType
   */

  export type ProtocolExecutionCountOutputType = {
    links: number
  }

  export type ProtocolExecutionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    links?: boolean | ProtocolExecutionCountOutputTypeCountLinksArgs
  }

  // Custom InputTypes
  /**
   * ProtocolExecutionCountOutputType without action
   */
  export type ProtocolExecutionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProtocolExecutionCountOutputType
     */
    select?: ProtocolExecutionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProtocolExecutionCountOutputType without action
   */
  export type ProtocolExecutionCountOutputTypeCountLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LinkWhereInput
  }


  /**
   * Count Type RecipeCountOutputType
   */

  export type RecipeCountOutputType = {
    ingredients: number
    recipeExecutions: number
  }

  export type RecipeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ingredients?: boolean | RecipeCountOutputTypeCountIngredientsArgs
    recipeExecutions?: boolean | RecipeCountOutputTypeCountRecipeExecutionsArgs
  }

  // Custom InputTypes
  /**
   * RecipeCountOutputType without action
   */
  export type RecipeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeCountOutputType
     */
    select?: RecipeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RecipeCountOutputType without action
   */
  export type RecipeCountOutputTypeCountIngredientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeIngredientWhereInput
  }

  /**
   * RecipeCountOutputType without action
   */
  export type RecipeCountOutputTypeCountRecipeExecutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeExecutionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    status: string | null
    startDate: Date | null
    lastActivity: Date | null
    createdAt: Date | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    status: string | null
    startDate: Date | null
    lastActivity: Date | null
    createdAt: Date | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    name: number
    description: number
    status: number
    startDate: number
    lastActivity: number
    createdAt: number
    _all: number
  }


  export type ProjectMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    startDate?: true
    lastActivity?: true
    createdAt?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    startDate?: true
    lastActivity?: true
    createdAt?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    startDate?: true
    lastActivity?: true
    createdAt?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithAggregationInput | ProjectOrderByWithAggregationInput[]
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }

  export type ProjectGroupByOutputType = {
    id: string
    name: string
    description: string | null
    status: string
    startDate: Date | null
    lastActivity: Date | null
    createdAt: Date
    _count: ProjectCountAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    startDate?: boolean
    lastActivity?: boolean
    createdAt?: boolean
    experiments?: boolean | Project$experimentsArgs<ExtArgs>
    tasks?: boolean | Project$tasksArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    startDate?: boolean
    lastActivity?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    startDate?: boolean
    lastActivity?: boolean
    createdAt?: boolean
  }

  export type ProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    experiments?: boolean | Project$experimentsArgs<ExtArgs>
    tasks?: boolean | Project$tasksArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project"
    objects: {
      experiments: Prisma.$ExperimentPayload<ExtArgs>[]
      tasks: Prisma.$TaskPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      status: string
      startDate: Date | null
      lastActivity: Date | null
      createdAt: Date
    }, ExtArgs["result"]["project"]>
    composites: {}
  }

  type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = $Result.GetResult<Prisma.$ProjectPayload, S>

  type ProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectFindUniqueArgs>(args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Project that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectFindFirstArgs>(args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectFindManyArgs>(args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
     */
    create<T extends ProjectCreateArgs>(args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Projects.
     * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectCreateManyArgs>(args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Projects and returns the data saved in the database.
     * @param {ProjectCreateManyAndReturnArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Projects and only return the `id`
     * const projectWithIdOnly = await prisma.project.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
     */
    delete<T extends ProjectDeleteArgs>(args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectUpdateArgs>(args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectDeleteManyArgs>(args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectUpdateManyArgs>(args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
     */
    upsert<T extends ProjectUpsertArgs>(args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project model
   */
  readonly fields: ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    experiments<T extends Project$experimentsArgs<ExtArgs> = {}>(args?: Subset<T, Project$experimentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExperimentPayload<ExtArgs>, T, "findMany"> | Null>
    tasks<T extends Project$tasksArgs<ExtArgs> = {}>(args?: Subset<T, Project$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Project model
   */ 
  interface ProjectFieldRefs {
    readonly id: FieldRef<"Project", 'String'>
    readonly name: FieldRef<"Project", 'String'>
    readonly description: FieldRef<"Project", 'String'>
    readonly status: FieldRef<"Project", 'String'>
    readonly startDate: FieldRef<"Project", 'DateTime'>
    readonly lastActivity: FieldRef<"Project", 'DateTime'>
    readonly createdAt: FieldRef<"Project", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project create
   */
  export type ProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }

  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
  }

  /**
   * Project createManyAndReturn
   */
  export type ProjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
  }

  /**
   * Project update
   */
  export type ProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
  }

  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }

  /**
   * Project delete
   */
  export type ProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
  }

  /**
   * Project.experiments
   */
  export type Project$experimentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experiment
     */
    select?: ExperimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentInclude<ExtArgs> | null
    where?: ExperimentWhereInput
    orderBy?: ExperimentOrderByWithRelationInput | ExperimentOrderByWithRelationInput[]
    cursor?: ExperimentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExperimentScalarFieldEnum | ExperimentScalarFieldEnum[]
  }

  /**
   * Project.tasks
   */
  export type Project$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Project without action
   */
  export type ProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
  }


  /**
   * Model Experiment
   */

  export type AggregateExperiment = {
    _count: ExperimentCountAggregateOutputType | null
    _min: ExperimentMinAggregateOutputType | null
    _max: ExperimentMaxAggregateOutputType | null
  }

  export type ExperimentMinAggregateOutputType = {
    id: string | null
    projectId: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
  }

  export type ExperimentMaxAggregateOutputType = {
    id: string | null
    projectId: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
  }

  export type ExperimentCountAggregateOutputType = {
    id: number
    projectId: number
    name: number
    description: number
    createdAt: number
    _all: number
  }


  export type ExperimentMinAggregateInputType = {
    id?: true
    projectId?: true
    name?: true
    description?: true
    createdAt?: true
  }

  export type ExperimentMaxAggregateInputType = {
    id?: true
    projectId?: true
    name?: true
    description?: true
    createdAt?: true
  }

  export type ExperimentCountAggregateInputType = {
    id?: true
    projectId?: true
    name?: true
    description?: true
    createdAt?: true
    _all?: true
  }

  export type ExperimentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Experiment to aggregate.
     */
    where?: ExperimentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Experiments to fetch.
     */
    orderBy?: ExperimentOrderByWithRelationInput | ExperimentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExperimentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Experiments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Experiments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Experiments
    **/
    _count?: true | ExperimentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExperimentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExperimentMaxAggregateInputType
  }

  export type GetExperimentAggregateType<T extends ExperimentAggregateArgs> = {
        [P in keyof T & keyof AggregateExperiment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExperiment[P]>
      : GetScalarType<T[P], AggregateExperiment[P]>
  }




  export type ExperimentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExperimentWhereInput
    orderBy?: ExperimentOrderByWithAggregationInput | ExperimentOrderByWithAggregationInput[]
    by: ExperimentScalarFieldEnum[] | ExperimentScalarFieldEnum
    having?: ExperimentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExperimentCountAggregateInputType | true
    _min?: ExperimentMinAggregateInputType
    _max?: ExperimentMaxAggregateInputType
  }

  export type ExperimentGroupByOutputType = {
    id: string
    projectId: string
    name: string
    description: string | null
    createdAt: Date
    _count: ExperimentCountAggregateOutputType | null
    _min: ExperimentMinAggregateOutputType | null
    _max: ExperimentMaxAggregateOutputType | null
  }

  type GetExperimentGroupByPayload<T extends ExperimentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExperimentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExperimentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExperimentGroupByOutputType[P]>
            : GetScalarType<T[P], ExperimentGroupByOutputType[P]>
        }
      >
    >


  export type ExperimentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    notes?: boolean | Experiment$notesArgs<ExtArgs>
    tables?: boolean | Experiment$tablesArgs<ExtArgs>
    protocolExecutions?: boolean | Experiment$protocolExecutionsArgs<ExtArgs>
    tasks?: boolean | Experiment$tasksArgs<ExtArgs>
    recipeExecutions?: boolean | Experiment$recipeExecutionsArgs<ExtArgs>
    _count?: boolean | ExperimentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["experiment"]>

  export type ExperimentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["experiment"]>

  export type ExperimentSelectScalar = {
    id?: boolean
    projectId?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
  }

  export type ExperimentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    notes?: boolean | Experiment$notesArgs<ExtArgs>
    tables?: boolean | Experiment$tablesArgs<ExtArgs>
    protocolExecutions?: boolean | Experiment$protocolExecutionsArgs<ExtArgs>
    tasks?: boolean | Experiment$tasksArgs<ExtArgs>
    recipeExecutions?: boolean | Experiment$recipeExecutionsArgs<ExtArgs>
    _count?: boolean | ExperimentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ExperimentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $ExperimentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Experiment"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      notes: Prisma.$NotePayload<ExtArgs>[]
      tables: Prisma.$TablePayload<ExtArgs>[]
      protocolExecutions: Prisma.$ProtocolExecutionPayload<ExtArgs>[]
      tasks: Prisma.$TaskPayload<ExtArgs>[]
      recipeExecutions: Prisma.$RecipeExecutionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      projectId: string
      name: string
      description: string | null
      createdAt: Date
    }, ExtArgs["result"]["experiment"]>
    composites: {}
  }

  type ExperimentGetPayload<S extends boolean | null | undefined | ExperimentDefaultArgs> = $Result.GetResult<Prisma.$ExperimentPayload, S>

  type ExperimentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExperimentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExperimentCountAggregateInputType | true
    }

  export interface ExperimentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Experiment'], meta: { name: 'Experiment' } }
    /**
     * Find zero or one Experiment that matches the filter.
     * @param {ExperimentFindUniqueArgs} args - Arguments to find a Experiment
     * @example
     * // Get one Experiment
     * const experiment = await prisma.experiment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExperimentFindUniqueArgs>(args: SelectSubset<T, ExperimentFindUniqueArgs<ExtArgs>>): Prisma__ExperimentClient<$Result.GetResult<Prisma.$ExperimentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Experiment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ExperimentFindUniqueOrThrowArgs} args - Arguments to find a Experiment
     * @example
     * // Get one Experiment
     * const experiment = await prisma.experiment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExperimentFindUniqueOrThrowArgs>(args: SelectSubset<T, ExperimentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExperimentClient<$Result.GetResult<Prisma.$ExperimentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Experiment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperimentFindFirstArgs} args - Arguments to find a Experiment
     * @example
     * // Get one Experiment
     * const experiment = await prisma.experiment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExperimentFindFirstArgs>(args?: SelectSubset<T, ExperimentFindFirstArgs<ExtArgs>>): Prisma__ExperimentClient<$Result.GetResult<Prisma.$ExperimentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Experiment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperimentFindFirstOrThrowArgs} args - Arguments to find a Experiment
     * @example
     * // Get one Experiment
     * const experiment = await prisma.experiment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExperimentFindFirstOrThrowArgs>(args?: SelectSubset<T, ExperimentFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExperimentClient<$Result.GetResult<Prisma.$ExperimentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Experiments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperimentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Experiments
     * const experiments = await prisma.experiment.findMany()
     * 
     * // Get first 10 Experiments
     * const experiments = await prisma.experiment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const experimentWithIdOnly = await prisma.experiment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExperimentFindManyArgs>(args?: SelectSubset<T, ExperimentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExperimentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Experiment.
     * @param {ExperimentCreateArgs} args - Arguments to create a Experiment.
     * @example
     * // Create one Experiment
     * const Experiment = await prisma.experiment.create({
     *   data: {
     *     // ... data to create a Experiment
     *   }
     * })
     * 
     */
    create<T extends ExperimentCreateArgs>(args: SelectSubset<T, ExperimentCreateArgs<ExtArgs>>): Prisma__ExperimentClient<$Result.GetResult<Prisma.$ExperimentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Experiments.
     * @param {ExperimentCreateManyArgs} args - Arguments to create many Experiments.
     * @example
     * // Create many Experiments
     * const experiment = await prisma.experiment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExperimentCreateManyArgs>(args?: SelectSubset<T, ExperimentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Experiments and returns the data saved in the database.
     * @param {ExperimentCreateManyAndReturnArgs} args - Arguments to create many Experiments.
     * @example
     * // Create many Experiments
     * const experiment = await prisma.experiment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Experiments and only return the `id`
     * const experimentWithIdOnly = await prisma.experiment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExperimentCreateManyAndReturnArgs>(args?: SelectSubset<T, ExperimentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExperimentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Experiment.
     * @param {ExperimentDeleteArgs} args - Arguments to delete one Experiment.
     * @example
     * // Delete one Experiment
     * const Experiment = await prisma.experiment.delete({
     *   where: {
     *     // ... filter to delete one Experiment
     *   }
     * })
     * 
     */
    delete<T extends ExperimentDeleteArgs>(args: SelectSubset<T, ExperimentDeleteArgs<ExtArgs>>): Prisma__ExperimentClient<$Result.GetResult<Prisma.$ExperimentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Experiment.
     * @param {ExperimentUpdateArgs} args - Arguments to update one Experiment.
     * @example
     * // Update one Experiment
     * const experiment = await prisma.experiment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExperimentUpdateArgs>(args: SelectSubset<T, ExperimentUpdateArgs<ExtArgs>>): Prisma__ExperimentClient<$Result.GetResult<Prisma.$ExperimentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Experiments.
     * @param {ExperimentDeleteManyArgs} args - Arguments to filter Experiments to delete.
     * @example
     * // Delete a few Experiments
     * const { count } = await prisma.experiment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExperimentDeleteManyArgs>(args?: SelectSubset<T, ExperimentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Experiments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperimentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Experiments
     * const experiment = await prisma.experiment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExperimentUpdateManyArgs>(args: SelectSubset<T, ExperimentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Experiment.
     * @param {ExperimentUpsertArgs} args - Arguments to update or create a Experiment.
     * @example
     * // Update or create a Experiment
     * const experiment = await prisma.experiment.upsert({
     *   create: {
     *     // ... data to create a Experiment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Experiment we want to update
     *   }
     * })
     */
    upsert<T extends ExperimentUpsertArgs>(args: SelectSubset<T, ExperimentUpsertArgs<ExtArgs>>): Prisma__ExperimentClient<$Result.GetResult<Prisma.$ExperimentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Experiments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperimentCountArgs} args - Arguments to filter Experiments to count.
     * @example
     * // Count the number of Experiments
     * const count = await prisma.experiment.count({
     *   where: {
     *     // ... the filter for the Experiments we want to count
     *   }
     * })
    **/
    count<T extends ExperimentCountArgs>(
      args?: Subset<T, ExperimentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExperimentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Experiment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperimentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExperimentAggregateArgs>(args: Subset<T, ExperimentAggregateArgs>): Prisma.PrismaPromise<GetExperimentAggregateType<T>>

    /**
     * Group by Experiment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperimentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExperimentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExperimentGroupByArgs['orderBy'] }
        : { orderBy?: ExperimentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExperimentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExperimentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Experiment model
   */
  readonly fields: ExperimentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Experiment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExperimentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    notes<T extends Experiment$notesArgs<ExtArgs> = {}>(args?: Subset<T, Experiment$notesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findMany"> | Null>
    tables<T extends Experiment$tablesArgs<ExtArgs> = {}>(args?: Subset<T, Experiment$tablesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, "findMany"> | Null>
    protocolExecutions<T extends Experiment$protocolExecutionsArgs<ExtArgs> = {}>(args?: Subset<T, Experiment$protocolExecutionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProtocolExecutionPayload<ExtArgs>, T, "findMany"> | Null>
    tasks<T extends Experiment$tasksArgs<ExtArgs> = {}>(args?: Subset<T, Experiment$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany"> | Null>
    recipeExecutions<T extends Experiment$recipeExecutionsArgs<ExtArgs> = {}>(args?: Subset<T, Experiment$recipeExecutionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeExecutionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Experiment model
   */ 
  interface ExperimentFieldRefs {
    readonly id: FieldRef<"Experiment", 'String'>
    readonly projectId: FieldRef<"Experiment", 'String'>
    readonly name: FieldRef<"Experiment", 'String'>
    readonly description: FieldRef<"Experiment", 'String'>
    readonly createdAt: FieldRef<"Experiment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Experiment findUnique
   */
  export type ExperimentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experiment
     */
    select?: ExperimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentInclude<ExtArgs> | null
    /**
     * Filter, which Experiment to fetch.
     */
    where: ExperimentWhereUniqueInput
  }

  /**
   * Experiment findUniqueOrThrow
   */
  export type ExperimentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experiment
     */
    select?: ExperimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentInclude<ExtArgs> | null
    /**
     * Filter, which Experiment to fetch.
     */
    where: ExperimentWhereUniqueInput
  }

  /**
   * Experiment findFirst
   */
  export type ExperimentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experiment
     */
    select?: ExperimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentInclude<ExtArgs> | null
    /**
     * Filter, which Experiment to fetch.
     */
    where?: ExperimentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Experiments to fetch.
     */
    orderBy?: ExperimentOrderByWithRelationInput | ExperimentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Experiments.
     */
    cursor?: ExperimentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Experiments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Experiments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Experiments.
     */
    distinct?: ExperimentScalarFieldEnum | ExperimentScalarFieldEnum[]
  }

  /**
   * Experiment findFirstOrThrow
   */
  export type ExperimentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experiment
     */
    select?: ExperimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentInclude<ExtArgs> | null
    /**
     * Filter, which Experiment to fetch.
     */
    where?: ExperimentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Experiments to fetch.
     */
    orderBy?: ExperimentOrderByWithRelationInput | ExperimentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Experiments.
     */
    cursor?: ExperimentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Experiments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Experiments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Experiments.
     */
    distinct?: ExperimentScalarFieldEnum | ExperimentScalarFieldEnum[]
  }

  /**
   * Experiment findMany
   */
  export type ExperimentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experiment
     */
    select?: ExperimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentInclude<ExtArgs> | null
    /**
     * Filter, which Experiments to fetch.
     */
    where?: ExperimentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Experiments to fetch.
     */
    orderBy?: ExperimentOrderByWithRelationInput | ExperimentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Experiments.
     */
    cursor?: ExperimentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Experiments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Experiments.
     */
    skip?: number
    distinct?: ExperimentScalarFieldEnum | ExperimentScalarFieldEnum[]
  }

  /**
   * Experiment create
   */
  export type ExperimentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experiment
     */
    select?: ExperimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentInclude<ExtArgs> | null
    /**
     * The data needed to create a Experiment.
     */
    data: XOR<ExperimentCreateInput, ExperimentUncheckedCreateInput>
  }

  /**
   * Experiment createMany
   */
  export type ExperimentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Experiments.
     */
    data: ExperimentCreateManyInput | ExperimentCreateManyInput[]
  }

  /**
   * Experiment createManyAndReturn
   */
  export type ExperimentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experiment
     */
    select?: ExperimentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Experiments.
     */
    data: ExperimentCreateManyInput | ExperimentCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Experiment update
   */
  export type ExperimentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experiment
     */
    select?: ExperimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentInclude<ExtArgs> | null
    /**
     * The data needed to update a Experiment.
     */
    data: XOR<ExperimentUpdateInput, ExperimentUncheckedUpdateInput>
    /**
     * Choose, which Experiment to update.
     */
    where: ExperimentWhereUniqueInput
  }

  /**
   * Experiment updateMany
   */
  export type ExperimentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Experiments.
     */
    data: XOR<ExperimentUpdateManyMutationInput, ExperimentUncheckedUpdateManyInput>
    /**
     * Filter which Experiments to update
     */
    where?: ExperimentWhereInput
  }

  /**
   * Experiment upsert
   */
  export type ExperimentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experiment
     */
    select?: ExperimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentInclude<ExtArgs> | null
    /**
     * The filter to search for the Experiment to update in case it exists.
     */
    where: ExperimentWhereUniqueInput
    /**
     * In case the Experiment found by the `where` argument doesn't exist, create a new Experiment with this data.
     */
    create: XOR<ExperimentCreateInput, ExperimentUncheckedCreateInput>
    /**
     * In case the Experiment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExperimentUpdateInput, ExperimentUncheckedUpdateInput>
  }

  /**
   * Experiment delete
   */
  export type ExperimentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experiment
     */
    select?: ExperimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentInclude<ExtArgs> | null
    /**
     * Filter which Experiment to delete.
     */
    where: ExperimentWhereUniqueInput
  }

  /**
   * Experiment deleteMany
   */
  export type ExperimentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Experiments to delete
     */
    where?: ExperimentWhereInput
  }

  /**
   * Experiment.notes
   */
  export type Experiment$notesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    cursor?: NoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Experiment.tables
   */
  export type Experiment$tablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableInclude<ExtArgs> | null
    where?: TableWhereInput
    orderBy?: TableOrderByWithRelationInput | TableOrderByWithRelationInput[]
    cursor?: TableWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TableScalarFieldEnum | TableScalarFieldEnum[]
  }

  /**
   * Experiment.protocolExecutions
   */
  export type Experiment$protocolExecutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProtocolExecution
     */
    select?: ProtocolExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProtocolExecutionInclude<ExtArgs> | null
    where?: ProtocolExecutionWhereInput
    orderBy?: ProtocolExecutionOrderByWithRelationInput | ProtocolExecutionOrderByWithRelationInput[]
    cursor?: ProtocolExecutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProtocolExecutionScalarFieldEnum | ProtocolExecutionScalarFieldEnum[]
  }

  /**
   * Experiment.tasks
   */
  export type Experiment$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Experiment.recipeExecutions
   */
  export type Experiment$recipeExecutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeExecution
     */
    select?: RecipeExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeExecutionInclude<ExtArgs> | null
    where?: RecipeExecutionWhereInput
    orderBy?: RecipeExecutionOrderByWithRelationInput | RecipeExecutionOrderByWithRelationInput[]
    cursor?: RecipeExecutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecipeExecutionScalarFieldEnum | RecipeExecutionScalarFieldEnum[]
  }

  /**
   * Experiment without action
   */
  export type ExperimentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experiment
     */
    select?: ExperimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentInclude<ExtArgs> | null
  }


  /**
   * Model Note
   */

  export type AggregateNote = {
    _count: NoteCountAggregateOutputType | null
    _min: NoteMinAggregateOutputType | null
    _max: NoteMaxAggregateOutputType | null
  }

  export type NoteMinAggregateOutputType = {
    id: string | null
    experimentId: string | null
    title: string | null
    content: string | null
    date: Date | null
    type: string | null
    createdAt: Date | null
  }

  export type NoteMaxAggregateOutputType = {
    id: string | null
    experimentId: string | null
    title: string | null
    content: string | null
    date: Date | null
    type: string | null
    createdAt: Date | null
  }

  export type NoteCountAggregateOutputType = {
    id: number
    experimentId: number
    title: number
    content: number
    date: number
    type: number
    createdAt: number
    _all: number
  }


  export type NoteMinAggregateInputType = {
    id?: true
    experimentId?: true
    title?: true
    content?: true
    date?: true
    type?: true
    createdAt?: true
  }

  export type NoteMaxAggregateInputType = {
    id?: true
    experimentId?: true
    title?: true
    content?: true
    date?: true
    type?: true
    createdAt?: true
  }

  export type NoteCountAggregateInputType = {
    id?: true
    experimentId?: true
    title?: true
    content?: true
    date?: true
    type?: true
    createdAt?: true
    _all?: true
  }

  export type NoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Note to aggregate.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notes
    **/
    _count?: true | NoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NoteMaxAggregateInputType
  }

  export type GetNoteAggregateType<T extends NoteAggregateArgs> = {
        [P in keyof T & keyof AggregateNote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNote[P]>
      : GetScalarType<T[P], AggregateNote[P]>
  }




  export type NoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithAggregationInput | NoteOrderByWithAggregationInput[]
    by: NoteScalarFieldEnum[] | NoteScalarFieldEnum
    having?: NoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NoteCountAggregateInputType | true
    _min?: NoteMinAggregateInputType
    _max?: NoteMaxAggregateInputType
  }

  export type NoteGroupByOutputType = {
    id: string
    experimentId: string | null
    title: string
    content: string
    date: Date | null
    type: string
    createdAt: Date
    _count: NoteCountAggregateOutputType | null
    _min: NoteMinAggregateOutputType | null
    _max: NoteMaxAggregateOutputType | null
  }

  type GetNoteGroupByPayload<T extends NoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NoteGroupByOutputType[P]>
            : GetScalarType<T[P], NoteGroupByOutputType[P]>
        }
      >
    >


  export type NoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    experimentId?: boolean
    title?: boolean
    content?: boolean
    date?: boolean
    type?: boolean
    createdAt?: boolean
    experiment?: boolean | Note$experimentArgs<ExtArgs>
    links?: boolean | Note$linksArgs<ExtArgs>
    _count?: boolean | NoteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["note"]>

  export type NoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    experimentId?: boolean
    title?: boolean
    content?: boolean
    date?: boolean
    type?: boolean
    createdAt?: boolean
    experiment?: boolean | Note$experimentArgs<ExtArgs>
  }, ExtArgs["result"]["note"]>

  export type NoteSelectScalar = {
    id?: boolean
    experimentId?: boolean
    title?: boolean
    content?: boolean
    date?: boolean
    type?: boolean
    createdAt?: boolean
  }

  export type NoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    experiment?: boolean | Note$experimentArgs<ExtArgs>
    links?: boolean | Note$linksArgs<ExtArgs>
    _count?: boolean | NoteCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type NoteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    experiment?: boolean | Note$experimentArgs<ExtArgs>
  }

  export type $NotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Note"
    objects: {
      experiment: Prisma.$ExperimentPayload<ExtArgs> | null
      links: Prisma.$LinkPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      experimentId: string | null
      title: string
      content: string
      date: Date | null
      type: string
      createdAt: Date
    }, ExtArgs["result"]["note"]>
    composites: {}
  }

  type NoteGetPayload<S extends boolean | null | undefined | NoteDefaultArgs> = $Result.GetResult<Prisma.$NotePayload, S>

  type NoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NoteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NoteCountAggregateInputType | true
    }

  export interface NoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Note'], meta: { name: 'Note' } }
    /**
     * Find zero or one Note that matches the filter.
     * @param {NoteFindUniqueArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NoteFindUniqueArgs>(args: SelectSubset<T, NoteFindUniqueArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Note that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NoteFindUniqueOrThrowArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NoteFindUniqueOrThrowArgs>(args: SelectSubset<T, NoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Note that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindFirstArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NoteFindFirstArgs>(args?: SelectSubset<T, NoteFindFirstArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Note that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindFirstOrThrowArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NoteFindFirstOrThrowArgs>(args?: SelectSubset<T, NoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notes
     * const notes = await prisma.note.findMany()
     * 
     * // Get first 10 Notes
     * const notes = await prisma.note.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const noteWithIdOnly = await prisma.note.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NoteFindManyArgs>(args?: SelectSubset<T, NoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Note.
     * @param {NoteCreateArgs} args - Arguments to create a Note.
     * @example
     * // Create one Note
     * const Note = await prisma.note.create({
     *   data: {
     *     // ... data to create a Note
     *   }
     * })
     * 
     */
    create<T extends NoteCreateArgs>(args: SelectSubset<T, NoteCreateArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notes.
     * @param {NoteCreateManyArgs} args - Arguments to create many Notes.
     * @example
     * // Create many Notes
     * const note = await prisma.note.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NoteCreateManyArgs>(args?: SelectSubset<T, NoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notes and returns the data saved in the database.
     * @param {NoteCreateManyAndReturnArgs} args - Arguments to create many Notes.
     * @example
     * // Create many Notes
     * const note = await prisma.note.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notes and only return the `id`
     * const noteWithIdOnly = await prisma.note.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NoteCreateManyAndReturnArgs>(args?: SelectSubset<T, NoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Note.
     * @param {NoteDeleteArgs} args - Arguments to delete one Note.
     * @example
     * // Delete one Note
     * const Note = await prisma.note.delete({
     *   where: {
     *     // ... filter to delete one Note
     *   }
     * })
     * 
     */
    delete<T extends NoteDeleteArgs>(args: SelectSubset<T, NoteDeleteArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Note.
     * @param {NoteUpdateArgs} args - Arguments to update one Note.
     * @example
     * // Update one Note
     * const note = await prisma.note.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NoteUpdateArgs>(args: SelectSubset<T, NoteUpdateArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notes.
     * @param {NoteDeleteManyArgs} args - Arguments to filter Notes to delete.
     * @example
     * // Delete a few Notes
     * const { count } = await prisma.note.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NoteDeleteManyArgs>(args?: SelectSubset<T, NoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notes
     * const note = await prisma.note.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NoteUpdateManyArgs>(args: SelectSubset<T, NoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Note.
     * @param {NoteUpsertArgs} args - Arguments to update or create a Note.
     * @example
     * // Update or create a Note
     * const note = await prisma.note.upsert({
     *   create: {
     *     // ... data to create a Note
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Note we want to update
     *   }
     * })
     */
    upsert<T extends NoteUpsertArgs>(args: SelectSubset<T, NoteUpsertArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteCountArgs} args - Arguments to filter Notes to count.
     * @example
     * // Count the number of Notes
     * const count = await prisma.note.count({
     *   where: {
     *     // ... the filter for the Notes we want to count
     *   }
     * })
    **/
    count<T extends NoteCountArgs>(
      args?: Subset<T, NoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Note.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NoteAggregateArgs>(args: Subset<T, NoteAggregateArgs>): Prisma.PrismaPromise<GetNoteAggregateType<T>>

    /**
     * Group by Note.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NoteGroupByArgs['orderBy'] }
        : { orderBy?: NoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Note model
   */
  readonly fields: NoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Note.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    experiment<T extends Note$experimentArgs<ExtArgs> = {}>(args?: Subset<T, Note$experimentArgs<ExtArgs>>): Prisma__ExperimentClient<$Result.GetResult<Prisma.$ExperimentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    links<T extends Note$linksArgs<ExtArgs> = {}>(args?: Subset<T, Note$linksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LinkPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Note model
   */ 
  interface NoteFieldRefs {
    readonly id: FieldRef<"Note", 'String'>
    readonly experimentId: FieldRef<"Note", 'String'>
    readonly title: FieldRef<"Note", 'String'>
    readonly content: FieldRef<"Note", 'String'>
    readonly date: FieldRef<"Note", 'DateTime'>
    readonly type: FieldRef<"Note", 'String'>
    readonly createdAt: FieldRef<"Note", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Note findUnique
   */
  export type NoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note findUniqueOrThrow
   */
  export type NoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note findFirst
   */
  export type NoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notes.
     */
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Note findFirstOrThrow
   */
  export type NoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notes.
     */
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Note findMany
   */
  export type NoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Notes to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Note create
   */
  export type NoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The data needed to create a Note.
     */
    data: XOR<NoteCreateInput, NoteUncheckedCreateInput>
  }

  /**
   * Note createMany
   */
  export type NoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notes.
     */
    data: NoteCreateManyInput | NoteCreateManyInput[]
  }

  /**
   * Note createManyAndReturn
   */
  export type NoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notes.
     */
    data: NoteCreateManyInput | NoteCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Note update
   */
  export type NoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The data needed to update a Note.
     */
    data: XOR<NoteUpdateInput, NoteUncheckedUpdateInput>
    /**
     * Choose, which Note to update.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note updateMany
   */
  export type NoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notes.
     */
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyInput>
    /**
     * Filter which Notes to update
     */
    where?: NoteWhereInput
  }

  /**
   * Note upsert
   */
  export type NoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The filter to search for the Note to update in case it exists.
     */
    where: NoteWhereUniqueInput
    /**
     * In case the Note found by the `where` argument doesn't exist, create a new Note with this data.
     */
    create: XOR<NoteCreateInput, NoteUncheckedCreateInput>
    /**
     * In case the Note was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NoteUpdateInput, NoteUncheckedUpdateInput>
  }

  /**
   * Note delete
   */
  export type NoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter which Note to delete.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note deleteMany
   */
  export type NoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notes to delete
     */
    where?: NoteWhereInput
  }

  /**
   * Note.experiment
   */
  export type Note$experimentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experiment
     */
    select?: ExperimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentInclude<ExtArgs> | null
    where?: ExperimentWhereInput
  }

  /**
   * Note.links
   */
  export type Note$linksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkInclude<ExtArgs> | null
    where?: LinkWhereInput
    orderBy?: LinkOrderByWithRelationInput | LinkOrderByWithRelationInput[]
    cursor?: LinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LinkScalarFieldEnum | LinkScalarFieldEnum[]
  }

  /**
   * Note without action
   */
  export type NoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
  }


  /**
   * Model DailyNote
   */

  export type AggregateDailyNote = {
    _count: DailyNoteCountAggregateOutputType | null
    _min: DailyNoteMinAggregateOutputType | null
    _max: DailyNoteMaxAggregateOutputType | null
  }

  export type DailyNoteMinAggregateOutputType = {
    id: string | null
    date: Date | null
    content: string | null
    createdAt: Date | null
  }

  export type DailyNoteMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    content: string | null
    createdAt: Date | null
  }

  export type DailyNoteCountAggregateOutputType = {
    id: number
    date: number
    content: number
    createdAt: number
    _all: number
  }


  export type DailyNoteMinAggregateInputType = {
    id?: true
    date?: true
    content?: true
    createdAt?: true
  }

  export type DailyNoteMaxAggregateInputType = {
    id?: true
    date?: true
    content?: true
    createdAt?: true
  }

  export type DailyNoteCountAggregateInputType = {
    id?: true
    date?: true
    content?: true
    createdAt?: true
    _all?: true
  }

  export type DailyNoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DailyNote to aggregate.
     */
    where?: DailyNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyNotes to fetch.
     */
    orderBy?: DailyNoteOrderByWithRelationInput | DailyNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DailyNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DailyNotes
    **/
    _count?: true | DailyNoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DailyNoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DailyNoteMaxAggregateInputType
  }

  export type GetDailyNoteAggregateType<T extends DailyNoteAggregateArgs> = {
        [P in keyof T & keyof AggregateDailyNote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDailyNote[P]>
      : GetScalarType<T[P], AggregateDailyNote[P]>
  }




  export type DailyNoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DailyNoteWhereInput
    orderBy?: DailyNoteOrderByWithAggregationInput | DailyNoteOrderByWithAggregationInput[]
    by: DailyNoteScalarFieldEnum[] | DailyNoteScalarFieldEnum
    having?: DailyNoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DailyNoteCountAggregateInputType | true
    _min?: DailyNoteMinAggregateInputType
    _max?: DailyNoteMaxAggregateInputType
  }

  export type DailyNoteGroupByOutputType = {
    id: string
    date: Date
    content: string
    createdAt: Date
    _count: DailyNoteCountAggregateOutputType | null
    _min: DailyNoteMinAggregateOutputType | null
    _max: DailyNoteMaxAggregateOutputType | null
  }

  type GetDailyNoteGroupByPayload<T extends DailyNoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DailyNoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DailyNoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DailyNoteGroupByOutputType[P]>
            : GetScalarType<T[P], DailyNoteGroupByOutputType[P]>
        }
      >
    >


  export type DailyNoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    content?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["dailyNote"]>

  export type DailyNoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    content?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["dailyNote"]>

  export type DailyNoteSelectScalar = {
    id?: boolean
    date?: boolean
    content?: boolean
    createdAt?: boolean
  }


  export type $DailyNotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DailyNote"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      date: Date
      content: string
      createdAt: Date
    }, ExtArgs["result"]["dailyNote"]>
    composites: {}
  }

  type DailyNoteGetPayload<S extends boolean | null | undefined | DailyNoteDefaultArgs> = $Result.GetResult<Prisma.$DailyNotePayload, S>

  type DailyNoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DailyNoteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DailyNoteCountAggregateInputType | true
    }

  export interface DailyNoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DailyNote'], meta: { name: 'DailyNote' } }
    /**
     * Find zero or one DailyNote that matches the filter.
     * @param {DailyNoteFindUniqueArgs} args - Arguments to find a DailyNote
     * @example
     * // Get one DailyNote
     * const dailyNote = await prisma.dailyNote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DailyNoteFindUniqueArgs>(args: SelectSubset<T, DailyNoteFindUniqueArgs<ExtArgs>>): Prisma__DailyNoteClient<$Result.GetResult<Prisma.$DailyNotePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DailyNote that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DailyNoteFindUniqueOrThrowArgs} args - Arguments to find a DailyNote
     * @example
     * // Get one DailyNote
     * const dailyNote = await prisma.dailyNote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DailyNoteFindUniqueOrThrowArgs>(args: SelectSubset<T, DailyNoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DailyNoteClient<$Result.GetResult<Prisma.$DailyNotePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DailyNote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyNoteFindFirstArgs} args - Arguments to find a DailyNote
     * @example
     * // Get one DailyNote
     * const dailyNote = await prisma.dailyNote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DailyNoteFindFirstArgs>(args?: SelectSubset<T, DailyNoteFindFirstArgs<ExtArgs>>): Prisma__DailyNoteClient<$Result.GetResult<Prisma.$DailyNotePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DailyNote that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyNoteFindFirstOrThrowArgs} args - Arguments to find a DailyNote
     * @example
     * // Get one DailyNote
     * const dailyNote = await prisma.dailyNote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DailyNoteFindFirstOrThrowArgs>(args?: SelectSubset<T, DailyNoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__DailyNoteClient<$Result.GetResult<Prisma.$DailyNotePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DailyNotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyNoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DailyNotes
     * const dailyNotes = await prisma.dailyNote.findMany()
     * 
     * // Get first 10 DailyNotes
     * const dailyNotes = await prisma.dailyNote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dailyNoteWithIdOnly = await prisma.dailyNote.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DailyNoteFindManyArgs>(args?: SelectSubset<T, DailyNoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyNotePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DailyNote.
     * @param {DailyNoteCreateArgs} args - Arguments to create a DailyNote.
     * @example
     * // Create one DailyNote
     * const DailyNote = await prisma.dailyNote.create({
     *   data: {
     *     // ... data to create a DailyNote
     *   }
     * })
     * 
     */
    create<T extends DailyNoteCreateArgs>(args: SelectSubset<T, DailyNoteCreateArgs<ExtArgs>>): Prisma__DailyNoteClient<$Result.GetResult<Prisma.$DailyNotePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DailyNotes.
     * @param {DailyNoteCreateManyArgs} args - Arguments to create many DailyNotes.
     * @example
     * // Create many DailyNotes
     * const dailyNote = await prisma.dailyNote.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DailyNoteCreateManyArgs>(args?: SelectSubset<T, DailyNoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DailyNotes and returns the data saved in the database.
     * @param {DailyNoteCreateManyAndReturnArgs} args - Arguments to create many DailyNotes.
     * @example
     * // Create many DailyNotes
     * const dailyNote = await prisma.dailyNote.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DailyNotes and only return the `id`
     * const dailyNoteWithIdOnly = await prisma.dailyNote.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DailyNoteCreateManyAndReturnArgs>(args?: SelectSubset<T, DailyNoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyNotePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DailyNote.
     * @param {DailyNoteDeleteArgs} args - Arguments to delete one DailyNote.
     * @example
     * // Delete one DailyNote
     * const DailyNote = await prisma.dailyNote.delete({
     *   where: {
     *     // ... filter to delete one DailyNote
     *   }
     * })
     * 
     */
    delete<T extends DailyNoteDeleteArgs>(args: SelectSubset<T, DailyNoteDeleteArgs<ExtArgs>>): Prisma__DailyNoteClient<$Result.GetResult<Prisma.$DailyNotePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DailyNote.
     * @param {DailyNoteUpdateArgs} args - Arguments to update one DailyNote.
     * @example
     * // Update one DailyNote
     * const dailyNote = await prisma.dailyNote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DailyNoteUpdateArgs>(args: SelectSubset<T, DailyNoteUpdateArgs<ExtArgs>>): Prisma__DailyNoteClient<$Result.GetResult<Prisma.$DailyNotePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DailyNotes.
     * @param {DailyNoteDeleteManyArgs} args - Arguments to filter DailyNotes to delete.
     * @example
     * // Delete a few DailyNotes
     * const { count } = await prisma.dailyNote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DailyNoteDeleteManyArgs>(args?: SelectSubset<T, DailyNoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DailyNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyNoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DailyNotes
     * const dailyNote = await prisma.dailyNote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DailyNoteUpdateManyArgs>(args: SelectSubset<T, DailyNoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DailyNote.
     * @param {DailyNoteUpsertArgs} args - Arguments to update or create a DailyNote.
     * @example
     * // Update or create a DailyNote
     * const dailyNote = await prisma.dailyNote.upsert({
     *   create: {
     *     // ... data to create a DailyNote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DailyNote we want to update
     *   }
     * })
     */
    upsert<T extends DailyNoteUpsertArgs>(args: SelectSubset<T, DailyNoteUpsertArgs<ExtArgs>>): Prisma__DailyNoteClient<$Result.GetResult<Prisma.$DailyNotePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DailyNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyNoteCountArgs} args - Arguments to filter DailyNotes to count.
     * @example
     * // Count the number of DailyNotes
     * const count = await prisma.dailyNote.count({
     *   where: {
     *     // ... the filter for the DailyNotes we want to count
     *   }
     * })
    **/
    count<T extends DailyNoteCountArgs>(
      args?: Subset<T, DailyNoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DailyNoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DailyNote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyNoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DailyNoteAggregateArgs>(args: Subset<T, DailyNoteAggregateArgs>): Prisma.PrismaPromise<GetDailyNoteAggregateType<T>>

    /**
     * Group by DailyNote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyNoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DailyNoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DailyNoteGroupByArgs['orderBy'] }
        : { orderBy?: DailyNoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DailyNoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDailyNoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DailyNote model
   */
  readonly fields: DailyNoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DailyNote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DailyNoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DailyNote model
   */ 
  interface DailyNoteFieldRefs {
    readonly id: FieldRef<"DailyNote", 'String'>
    readonly date: FieldRef<"DailyNote", 'DateTime'>
    readonly content: FieldRef<"DailyNote", 'String'>
    readonly createdAt: FieldRef<"DailyNote", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DailyNote findUnique
   */
  export type DailyNoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyNote
     */
    select?: DailyNoteSelect<ExtArgs> | null
    /**
     * Filter, which DailyNote to fetch.
     */
    where: DailyNoteWhereUniqueInput
  }

  /**
   * DailyNote findUniqueOrThrow
   */
  export type DailyNoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyNote
     */
    select?: DailyNoteSelect<ExtArgs> | null
    /**
     * Filter, which DailyNote to fetch.
     */
    where: DailyNoteWhereUniqueInput
  }

  /**
   * DailyNote findFirst
   */
  export type DailyNoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyNote
     */
    select?: DailyNoteSelect<ExtArgs> | null
    /**
     * Filter, which DailyNote to fetch.
     */
    where?: DailyNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyNotes to fetch.
     */
    orderBy?: DailyNoteOrderByWithRelationInput | DailyNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DailyNotes.
     */
    cursor?: DailyNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DailyNotes.
     */
    distinct?: DailyNoteScalarFieldEnum | DailyNoteScalarFieldEnum[]
  }

  /**
   * DailyNote findFirstOrThrow
   */
  export type DailyNoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyNote
     */
    select?: DailyNoteSelect<ExtArgs> | null
    /**
     * Filter, which DailyNote to fetch.
     */
    where?: DailyNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyNotes to fetch.
     */
    orderBy?: DailyNoteOrderByWithRelationInput | DailyNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DailyNotes.
     */
    cursor?: DailyNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DailyNotes.
     */
    distinct?: DailyNoteScalarFieldEnum | DailyNoteScalarFieldEnum[]
  }

  /**
   * DailyNote findMany
   */
  export type DailyNoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyNote
     */
    select?: DailyNoteSelect<ExtArgs> | null
    /**
     * Filter, which DailyNotes to fetch.
     */
    where?: DailyNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyNotes to fetch.
     */
    orderBy?: DailyNoteOrderByWithRelationInput | DailyNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DailyNotes.
     */
    cursor?: DailyNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyNotes.
     */
    skip?: number
    distinct?: DailyNoteScalarFieldEnum | DailyNoteScalarFieldEnum[]
  }

  /**
   * DailyNote create
   */
  export type DailyNoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyNote
     */
    select?: DailyNoteSelect<ExtArgs> | null
    /**
     * The data needed to create a DailyNote.
     */
    data: XOR<DailyNoteCreateInput, DailyNoteUncheckedCreateInput>
  }

  /**
   * DailyNote createMany
   */
  export type DailyNoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DailyNotes.
     */
    data: DailyNoteCreateManyInput | DailyNoteCreateManyInput[]
  }

  /**
   * DailyNote createManyAndReturn
   */
  export type DailyNoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyNote
     */
    select?: DailyNoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DailyNotes.
     */
    data: DailyNoteCreateManyInput | DailyNoteCreateManyInput[]
  }

  /**
   * DailyNote update
   */
  export type DailyNoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyNote
     */
    select?: DailyNoteSelect<ExtArgs> | null
    /**
     * The data needed to update a DailyNote.
     */
    data: XOR<DailyNoteUpdateInput, DailyNoteUncheckedUpdateInput>
    /**
     * Choose, which DailyNote to update.
     */
    where: DailyNoteWhereUniqueInput
  }

  /**
   * DailyNote updateMany
   */
  export type DailyNoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DailyNotes.
     */
    data: XOR<DailyNoteUpdateManyMutationInput, DailyNoteUncheckedUpdateManyInput>
    /**
     * Filter which DailyNotes to update
     */
    where?: DailyNoteWhereInput
  }

  /**
   * DailyNote upsert
   */
  export type DailyNoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyNote
     */
    select?: DailyNoteSelect<ExtArgs> | null
    /**
     * The filter to search for the DailyNote to update in case it exists.
     */
    where: DailyNoteWhereUniqueInput
    /**
     * In case the DailyNote found by the `where` argument doesn't exist, create a new DailyNote with this data.
     */
    create: XOR<DailyNoteCreateInput, DailyNoteUncheckedCreateInput>
    /**
     * In case the DailyNote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DailyNoteUpdateInput, DailyNoteUncheckedUpdateInput>
  }

  /**
   * DailyNote delete
   */
  export type DailyNoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyNote
     */
    select?: DailyNoteSelect<ExtArgs> | null
    /**
     * Filter which DailyNote to delete.
     */
    where: DailyNoteWhereUniqueInput
  }

  /**
   * DailyNote deleteMany
   */
  export type DailyNoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DailyNotes to delete
     */
    where?: DailyNoteWhereInput
  }

  /**
   * DailyNote without action
   */
  export type DailyNoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyNote
     */
    select?: DailyNoteSelect<ExtArgs> | null
  }


  /**
   * Model PDF
   */

  export type AggregatePDF = {
    _count: PDFCountAggregateOutputType | null
    _min: PDFMinAggregateOutputType | null
    _max: PDFMaxAggregateOutputType | null
  }

  export type PDFMinAggregateOutputType = {
    id: string | null
    filePath: string | null
    title: string | null
    uploadedAt: Date | null
  }

  export type PDFMaxAggregateOutputType = {
    id: string | null
    filePath: string | null
    title: string | null
    uploadedAt: Date | null
  }

  export type PDFCountAggregateOutputType = {
    id: number
    filePath: number
    title: number
    uploadedAt: number
    _all: number
  }


  export type PDFMinAggregateInputType = {
    id?: true
    filePath?: true
    title?: true
    uploadedAt?: true
  }

  export type PDFMaxAggregateInputType = {
    id?: true
    filePath?: true
    title?: true
    uploadedAt?: true
  }

  export type PDFCountAggregateInputType = {
    id?: true
    filePath?: true
    title?: true
    uploadedAt?: true
    _all?: true
  }

  export type PDFAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PDF to aggregate.
     */
    where?: PDFWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PDFS to fetch.
     */
    orderBy?: PDFOrderByWithRelationInput | PDFOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PDFWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PDFS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PDFS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PDFS
    **/
    _count?: true | PDFCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PDFMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PDFMaxAggregateInputType
  }

  export type GetPDFAggregateType<T extends PDFAggregateArgs> = {
        [P in keyof T & keyof AggregatePDF]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePDF[P]>
      : GetScalarType<T[P], AggregatePDF[P]>
  }




  export type PDFGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PDFWhereInput
    orderBy?: PDFOrderByWithAggregationInput | PDFOrderByWithAggregationInput[]
    by: PDFScalarFieldEnum[] | PDFScalarFieldEnum
    having?: PDFScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PDFCountAggregateInputType | true
    _min?: PDFMinAggregateInputType
    _max?: PDFMaxAggregateInputType
  }

  export type PDFGroupByOutputType = {
    id: string
    filePath: string
    title: string
    uploadedAt: Date
    _count: PDFCountAggregateOutputType | null
    _min: PDFMinAggregateOutputType | null
    _max: PDFMaxAggregateOutputType | null
  }

  type GetPDFGroupByPayload<T extends PDFGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PDFGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PDFGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PDFGroupByOutputType[P]>
            : GetScalarType<T[P], PDFGroupByOutputType[P]>
        }
      >
    >


  export type PDFSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filePath?: boolean
    title?: boolean
    uploadedAt?: boolean
    highlights?: boolean | PDF$highlightsArgs<ExtArgs>
    _count?: boolean | PDFCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pDF"]>

  export type PDFSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filePath?: boolean
    title?: boolean
    uploadedAt?: boolean
  }, ExtArgs["result"]["pDF"]>

  export type PDFSelectScalar = {
    id?: boolean
    filePath?: boolean
    title?: boolean
    uploadedAt?: boolean
  }

  export type PDFInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    highlights?: boolean | PDF$highlightsArgs<ExtArgs>
    _count?: boolean | PDFCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PDFIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PDFPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PDF"
    objects: {
      highlights: Prisma.$HighlightPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      filePath: string
      title: string
      uploadedAt: Date
    }, ExtArgs["result"]["pDF"]>
    composites: {}
  }

  type PDFGetPayload<S extends boolean | null | undefined | PDFDefaultArgs> = $Result.GetResult<Prisma.$PDFPayload, S>

  type PDFCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PDFFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PDFCountAggregateInputType | true
    }

  export interface PDFDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PDF'], meta: { name: 'PDF' } }
    /**
     * Find zero or one PDF that matches the filter.
     * @param {PDFFindUniqueArgs} args - Arguments to find a PDF
     * @example
     * // Get one PDF
     * const pDF = await prisma.pDF.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PDFFindUniqueArgs>(args: SelectSubset<T, PDFFindUniqueArgs<ExtArgs>>): Prisma__PDFClient<$Result.GetResult<Prisma.$PDFPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PDF that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PDFFindUniqueOrThrowArgs} args - Arguments to find a PDF
     * @example
     * // Get one PDF
     * const pDF = await prisma.pDF.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PDFFindUniqueOrThrowArgs>(args: SelectSubset<T, PDFFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PDFClient<$Result.GetResult<Prisma.$PDFPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PDF that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PDFFindFirstArgs} args - Arguments to find a PDF
     * @example
     * // Get one PDF
     * const pDF = await prisma.pDF.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PDFFindFirstArgs>(args?: SelectSubset<T, PDFFindFirstArgs<ExtArgs>>): Prisma__PDFClient<$Result.GetResult<Prisma.$PDFPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PDF that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PDFFindFirstOrThrowArgs} args - Arguments to find a PDF
     * @example
     * // Get one PDF
     * const pDF = await prisma.pDF.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PDFFindFirstOrThrowArgs>(args?: SelectSubset<T, PDFFindFirstOrThrowArgs<ExtArgs>>): Prisma__PDFClient<$Result.GetResult<Prisma.$PDFPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PDFS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PDFFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PDFS
     * const pDFS = await prisma.pDF.findMany()
     * 
     * // Get first 10 PDFS
     * const pDFS = await prisma.pDF.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pDFWithIdOnly = await prisma.pDF.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PDFFindManyArgs>(args?: SelectSubset<T, PDFFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PDFPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PDF.
     * @param {PDFCreateArgs} args - Arguments to create a PDF.
     * @example
     * // Create one PDF
     * const PDF = await prisma.pDF.create({
     *   data: {
     *     // ... data to create a PDF
     *   }
     * })
     * 
     */
    create<T extends PDFCreateArgs>(args: SelectSubset<T, PDFCreateArgs<ExtArgs>>): Prisma__PDFClient<$Result.GetResult<Prisma.$PDFPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PDFS.
     * @param {PDFCreateManyArgs} args - Arguments to create many PDFS.
     * @example
     * // Create many PDFS
     * const pDF = await prisma.pDF.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PDFCreateManyArgs>(args?: SelectSubset<T, PDFCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PDFS and returns the data saved in the database.
     * @param {PDFCreateManyAndReturnArgs} args - Arguments to create many PDFS.
     * @example
     * // Create many PDFS
     * const pDF = await prisma.pDF.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PDFS and only return the `id`
     * const pDFWithIdOnly = await prisma.pDF.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PDFCreateManyAndReturnArgs>(args?: SelectSubset<T, PDFCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PDFPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PDF.
     * @param {PDFDeleteArgs} args - Arguments to delete one PDF.
     * @example
     * // Delete one PDF
     * const PDF = await prisma.pDF.delete({
     *   where: {
     *     // ... filter to delete one PDF
     *   }
     * })
     * 
     */
    delete<T extends PDFDeleteArgs>(args: SelectSubset<T, PDFDeleteArgs<ExtArgs>>): Prisma__PDFClient<$Result.GetResult<Prisma.$PDFPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PDF.
     * @param {PDFUpdateArgs} args - Arguments to update one PDF.
     * @example
     * // Update one PDF
     * const pDF = await prisma.pDF.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PDFUpdateArgs>(args: SelectSubset<T, PDFUpdateArgs<ExtArgs>>): Prisma__PDFClient<$Result.GetResult<Prisma.$PDFPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PDFS.
     * @param {PDFDeleteManyArgs} args - Arguments to filter PDFS to delete.
     * @example
     * // Delete a few PDFS
     * const { count } = await prisma.pDF.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PDFDeleteManyArgs>(args?: SelectSubset<T, PDFDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PDFS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PDFUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PDFS
     * const pDF = await prisma.pDF.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PDFUpdateManyArgs>(args: SelectSubset<T, PDFUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PDF.
     * @param {PDFUpsertArgs} args - Arguments to update or create a PDF.
     * @example
     * // Update or create a PDF
     * const pDF = await prisma.pDF.upsert({
     *   create: {
     *     // ... data to create a PDF
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PDF we want to update
     *   }
     * })
     */
    upsert<T extends PDFUpsertArgs>(args: SelectSubset<T, PDFUpsertArgs<ExtArgs>>): Prisma__PDFClient<$Result.GetResult<Prisma.$PDFPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PDFS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PDFCountArgs} args - Arguments to filter PDFS to count.
     * @example
     * // Count the number of PDFS
     * const count = await prisma.pDF.count({
     *   where: {
     *     // ... the filter for the PDFS we want to count
     *   }
     * })
    **/
    count<T extends PDFCountArgs>(
      args?: Subset<T, PDFCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PDFCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PDF.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PDFAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PDFAggregateArgs>(args: Subset<T, PDFAggregateArgs>): Prisma.PrismaPromise<GetPDFAggregateType<T>>

    /**
     * Group by PDF.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PDFGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PDFGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PDFGroupByArgs['orderBy'] }
        : { orderBy?: PDFGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PDFGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPDFGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PDF model
   */
  readonly fields: PDFFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PDF.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PDFClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    highlights<T extends PDF$highlightsArgs<ExtArgs> = {}>(args?: Subset<T, PDF$highlightsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HighlightPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PDF model
   */ 
  interface PDFFieldRefs {
    readonly id: FieldRef<"PDF", 'String'>
    readonly filePath: FieldRef<"PDF", 'String'>
    readonly title: FieldRef<"PDF", 'String'>
    readonly uploadedAt: FieldRef<"PDF", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PDF findUnique
   */
  export type PDFFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PDF
     */
    select?: PDFSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PDFInclude<ExtArgs> | null
    /**
     * Filter, which PDF to fetch.
     */
    where: PDFWhereUniqueInput
  }

  /**
   * PDF findUniqueOrThrow
   */
  export type PDFFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PDF
     */
    select?: PDFSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PDFInclude<ExtArgs> | null
    /**
     * Filter, which PDF to fetch.
     */
    where: PDFWhereUniqueInput
  }

  /**
   * PDF findFirst
   */
  export type PDFFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PDF
     */
    select?: PDFSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PDFInclude<ExtArgs> | null
    /**
     * Filter, which PDF to fetch.
     */
    where?: PDFWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PDFS to fetch.
     */
    orderBy?: PDFOrderByWithRelationInput | PDFOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PDFS.
     */
    cursor?: PDFWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PDFS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PDFS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PDFS.
     */
    distinct?: PDFScalarFieldEnum | PDFScalarFieldEnum[]
  }

  /**
   * PDF findFirstOrThrow
   */
  export type PDFFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PDF
     */
    select?: PDFSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PDFInclude<ExtArgs> | null
    /**
     * Filter, which PDF to fetch.
     */
    where?: PDFWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PDFS to fetch.
     */
    orderBy?: PDFOrderByWithRelationInput | PDFOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PDFS.
     */
    cursor?: PDFWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PDFS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PDFS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PDFS.
     */
    distinct?: PDFScalarFieldEnum | PDFScalarFieldEnum[]
  }

  /**
   * PDF findMany
   */
  export type PDFFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PDF
     */
    select?: PDFSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PDFInclude<ExtArgs> | null
    /**
     * Filter, which PDFS to fetch.
     */
    where?: PDFWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PDFS to fetch.
     */
    orderBy?: PDFOrderByWithRelationInput | PDFOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PDFS.
     */
    cursor?: PDFWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PDFS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PDFS.
     */
    skip?: number
    distinct?: PDFScalarFieldEnum | PDFScalarFieldEnum[]
  }

  /**
   * PDF create
   */
  export type PDFCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PDF
     */
    select?: PDFSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PDFInclude<ExtArgs> | null
    /**
     * The data needed to create a PDF.
     */
    data: XOR<PDFCreateInput, PDFUncheckedCreateInput>
  }

  /**
   * PDF createMany
   */
  export type PDFCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PDFS.
     */
    data: PDFCreateManyInput | PDFCreateManyInput[]
  }

  /**
   * PDF createManyAndReturn
   */
  export type PDFCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PDF
     */
    select?: PDFSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PDFS.
     */
    data: PDFCreateManyInput | PDFCreateManyInput[]
  }

  /**
   * PDF update
   */
  export type PDFUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PDF
     */
    select?: PDFSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PDFInclude<ExtArgs> | null
    /**
     * The data needed to update a PDF.
     */
    data: XOR<PDFUpdateInput, PDFUncheckedUpdateInput>
    /**
     * Choose, which PDF to update.
     */
    where: PDFWhereUniqueInput
  }

  /**
   * PDF updateMany
   */
  export type PDFUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PDFS.
     */
    data: XOR<PDFUpdateManyMutationInput, PDFUncheckedUpdateManyInput>
    /**
     * Filter which PDFS to update
     */
    where?: PDFWhereInput
  }

  /**
   * PDF upsert
   */
  export type PDFUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PDF
     */
    select?: PDFSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PDFInclude<ExtArgs> | null
    /**
     * The filter to search for the PDF to update in case it exists.
     */
    where: PDFWhereUniqueInput
    /**
     * In case the PDF found by the `where` argument doesn't exist, create a new PDF with this data.
     */
    create: XOR<PDFCreateInput, PDFUncheckedCreateInput>
    /**
     * In case the PDF was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PDFUpdateInput, PDFUncheckedUpdateInput>
  }

  /**
   * PDF delete
   */
  export type PDFDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PDF
     */
    select?: PDFSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PDFInclude<ExtArgs> | null
    /**
     * Filter which PDF to delete.
     */
    where: PDFWhereUniqueInput
  }

  /**
   * PDF deleteMany
   */
  export type PDFDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PDFS to delete
     */
    where?: PDFWhereInput
  }

  /**
   * PDF.highlights
   */
  export type PDF$highlightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Highlight
     */
    select?: HighlightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HighlightInclude<ExtArgs> | null
    where?: HighlightWhereInput
    orderBy?: HighlightOrderByWithRelationInput | HighlightOrderByWithRelationInput[]
    cursor?: HighlightWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HighlightScalarFieldEnum | HighlightScalarFieldEnum[]
  }

  /**
   * PDF without action
   */
  export type PDFDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PDF
     */
    select?: PDFSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PDFInclude<ExtArgs> | null
  }


  /**
   * Model Highlight
   */

  export type AggregateHighlight = {
    _count: HighlightCountAggregateOutputType | null
    _avg: HighlightAvgAggregateOutputType | null
    _sum: HighlightSumAggregateOutputType | null
    _min: HighlightMinAggregateOutputType | null
    _max: HighlightMaxAggregateOutputType | null
  }

  export type HighlightAvgAggregateOutputType = {
    page: number | null
  }

  export type HighlightSumAggregateOutputType = {
    page: number | null
  }

  export type HighlightMinAggregateOutputType = {
    id: string | null
    pdfId: string | null
    page: number | null
    text: string | null
    coords: string | null
    createdAt: Date | null
  }

  export type HighlightMaxAggregateOutputType = {
    id: string | null
    pdfId: string | null
    page: number | null
    text: string | null
    coords: string | null
    createdAt: Date | null
  }

  export type HighlightCountAggregateOutputType = {
    id: number
    pdfId: number
    page: number
    text: number
    coords: number
    createdAt: number
    _all: number
  }


  export type HighlightAvgAggregateInputType = {
    page?: true
  }

  export type HighlightSumAggregateInputType = {
    page?: true
  }

  export type HighlightMinAggregateInputType = {
    id?: true
    pdfId?: true
    page?: true
    text?: true
    coords?: true
    createdAt?: true
  }

  export type HighlightMaxAggregateInputType = {
    id?: true
    pdfId?: true
    page?: true
    text?: true
    coords?: true
    createdAt?: true
  }

  export type HighlightCountAggregateInputType = {
    id?: true
    pdfId?: true
    page?: true
    text?: true
    coords?: true
    createdAt?: true
    _all?: true
  }

  export type HighlightAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Highlight to aggregate.
     */
    where?: HighlightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Highlights to fetch.
     */
    orderBy?: HighlightOrderByWithRelationInput | HighlightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HighlightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Highlights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Highlights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Highlights
    **/
    _count?: true | HighlightCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HighlightAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HighlightSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HighlightMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HighlightMaxAggregateInputType
  }

  export type GetHighlightAggregateType<T extends HighlightAggregateArgs> = {
        [P in keyof T & keyof AggregateHighlight]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHighlight[P]>
      : GetScalarType<T[P], AggregateHighlight[P]>
  }




  export type HighlightGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HighlightWhereInput
    orderBy?: HighlightOrderByWithAggregationInput | HighlightOrderByWithAggregationInput[]
    by: HighlightScalarFieldEnum[] | HighlightScalarFieldEnum
    having?: HighlightScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HighlightCountAggregateInputType | true
    _avg?: HighlightAvgAggregateInputType
    _sum?: HighlightSumAggregateInputType
    _min?: HighlightMinAggregateInputType
    _max?: HighlightMaxAggregateInputType
  }

  export type HighlightGroupByOutputType = {
    id: string
    pdfId: string
    page: number
    text: string
    coords: string | null
    createdAt: Date
    _count: HighlightCountAggregateOutputType | null
    _avg: HighlightAvgAggregateOutputType | null
    _sum: HighlightSumAggregateOutputType | null
    _min: HighlightMinAggregateOutputType | null
    _max: HighlightMaxAggregateOutputType | null
  }

  type GetHighlightGroupByPayload<T extends HighlightGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HighlightGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HighlightGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HighlightGroupByOutputType[P]>
            : GetScalarType<T[P], HighlightGroupByOutputType[P]>
        }
      >
    >


  export type HighlightSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pdfId?: boolean
    page?: boolean
    text?: boolean
    coords?: boolean
    createdAt?: boolean
    pdf?: boolean | PDFDefaultArgs<ExtArgs>
    links?: boolean | Highlight$linksArgs<ExtArgs>
    _count?: boolean | HighlightCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["highlight"]>

  export type HighlightSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pdfId?: boolean
    page?: boolean
    text?: boolean
    coords?: boolean
    createdAt?: boolean
    pdf?: boolean | PDFDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["highlight"]>

  export type HighlightSelectScalar = {
    id?: boolean
    pdfId?: boolean
    page?: boolean
    text?: boolean
    coords?: boolean
    createdAt?: boolean
  }

  export type HighlightInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pdf?: boolean | PDFDefaultArgs<ExtArgs>
    links?: boolean | Highlight$linksArgs<ExtArgs>
    _count?: boolean | HighlightCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type HighlightIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pdf?: boolean | PDFDefaultArgs<ExtArgs>
  }

  export type $HighlightPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Highlight"
    objects: {
      pdf: Prisma.$PDFPayload<ExtArgs>
      links: Prisma.$LinkPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      pdfId: string
      page: number
      text: string
      coords: string | null
      createdAt: Date
    }, ExtArgs["result"]["highlight"]>
    composites: {}
  }

  type HighlightGetPayload<S extends boolean | null | undefined | HighlightDefaultArgs> = $Result.GetResult<Prisma.$HighlightPayload, S>

  type HighlightCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HighlightFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HighlightCountAggregateInputType | true
    }

  export interface HighlightDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Highlight'], meta: { name: 'Highlight' } }
    /**
     * Find zero or one Highlight that matches the filter.
     * @param {HighlightFindUniqueArgs} args - Arguments to find a Highlight
     * @example
     * // Get one Highlight
     * const highlight = await prisma.highlight.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HighlightFindUniqueArgs>(args: SelectSubset<T, HighlightFindUniqueArgs<ExtArgs>>): Prisma__HighlightClient<$Result.GetResult<Prisma.$HighlightPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Highlight that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {HighlightFindUniqueOrThrowArgs} args - Arguments to find a Highlight
     * @example
     * // Get one Highlight
     * const highlight = await prisma.highlight.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HighlightFindUniqueOrThrowArgs>(args: SelectSubset<T, HighlightFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HighlightClient<$Result.GetResult<Prisma.$HighlightPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Highlight that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HighlightFindFirstArgs} args - Arguments to find a Highlight
     * @example
     * // Get one Highlight
     * const highlight = await prisma.highlight.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HighlightFindFirstArgs>(args?: SelectSubset<T, HighlightFindFirstArgs<ExtArgs>>): Prisma__HighlightClient<$Result.GetResult<Prisma.$HighlightPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Highlight that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HighlightFindFirstOrThrowArgs} args - Arguments to find a Highlight
     * @example
     * // Get one Highlight
     * const highlight = await prisma.highlight.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HighlightFindFirstOrThrowArgs>(args?: SelectSubset<T, HighlightFindFirstOrThrowArgs<ExtArgs>>): Prisma__HighlightClient<$Result.GetResult<Prisma.$HighlightPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Highlights that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HighlightFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Highlights
     * const highlights = await prisma.highlight.findMany()
     * 
     * // Get first 10 Highlights
     * const highlights = await prisma.highlight.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const highlightWithIdOnly = await prisma.highlight.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HighlightFindManyArgs>(args?: SelectSubset<T, HighlightFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HighlightPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Highlight.
     * @param {HighlightCreateArgs} args - Arguments to create a Highlight.
     * @example
     * // Create one Highlight
     * const Highlight = await prisma.highlight.create({
     *   data: {
     *     // ... data to create a Highlight
     *   }
     * })
     * 
     */
    create<T extends HighlightCreateArgs>(args: SelectSubset<T, HighlightCreateArgs<ExtArgs>>): Prisma__HighlightClient<$Result.GetResult<Prisma.$HighlightPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Highlights.
     * @param {HighlightCreateManyArgs} args - Arguments to create many Highlights.
     * @example
     * // Create many Highlights
     * const highlight = await prisma.highlight.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HighlightCreateManyArgs>(args?: SelectSubset<T, HighlightCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Highlights and returns the data saved in the database.
     * @param {HighlightCreateManyAndReturnArgs} args - Arguments to create many Highlights.
     * @example
     * // Create many Highlights
     * const highlight = await prisma.highlight.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Highlights and only return the `id`
     * const highlightWithIdOnly = await prisma.highlight.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HighlightCreateManyAndReturnArgs>(args?: SelectSubset<T, HighlightCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HighlightPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Highlight.
     * @param {HighlightDeleteArgs} args - Arguments to delete one Highlight.
     * @example
     * // Delete one Highlight
     * const Highlight = await prisma.highlight.delete({
     *   where: {
     *     // ... filter to delete one Highlight
     *   }
     * })
     * 
     */
    delete<T extends HighlightDeleteArgs>(args: SelectSubset<T, HighlightDeleteArgs<ExtArgs>>): Prisma__HighlightClient<$Result.GetResult<Prisma.$HighlightPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Highlight.
     * @param {HighlightUpdateArgs} args - Arguments to update one Highlight.
     * @example
     * // Update one Highlight
     * const highlight = await prisma.highlight.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HighlightUpdateArgs>(args: SelectSubset<T, HighlightUpdateArgs<ExtArgs>>): Prisma__HighlightClient<$Result.GetResult<Prisma.$HighlightPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Highlights.
     * @param {HighlightDeleteManyArgs} args - Arguments to filter Highlights to delete.
     * @example
     * // Delete a few Highlights
     * const { count } = await prisma.highlight.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HighlightDeleteManyArgs>(args?: SelectSubset<T, HighlightDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Highlights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HighlightUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Highlights
     * const highlight = await prisma.highlight.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HighlightUpdateManyArgs>(args: SelectSubset<T, HighlightUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Highlight.
     * @param {HighlightUpsertArgs} args - Arguments to update or create a Highlight.
     * @example
     * // Update or create a Highlight
     * const highlight = await prisma.highlight.upsert({
     *   create: {
     *     // ... data to create a Highlight
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Highlight we want to update
     *   }
     * })
     */
    upsert<T extends HighlightUpsertArgs>(args: SelectSubset<T, HighlightUpsertArgs<ExtArgs>>): Prisma__HighlightClient<$Result.GetResult<Prisma.$HighlightPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Highlights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HighlightCountArgs} args - Arguments to filter Highlights to count.
     * @example
     * // Count the number of Highlights
     * const count = await prisma.highlight.count({
     *   where: {
     *     // ... the filter for the Highlights we want to count
     *   }
     * })
    **/
    count<T extends HighlightCountArgs>(
      args?: Subset<T, HighlightCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HighlightCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Highlight.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HighlightAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HighlightAggregateArgs>(args: Subset<T, HighlightAggregateArgs>): Prisma.PrismaPromise<GetHighlightAggregateType<T>>

    /**
     * Group by Highlight.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HighlightGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HighlightGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HighlightGroupByArgs['orderBy'] }
        : { orderBy?: HighlightGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HighlightGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHighlightGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Highlight model
   */
  readonly fields: HighlightFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Highlight.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HighlightClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pdf<T extends PDFDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PDFDefaultArgs<ExtArgs>>): Prisma__PDFClient<$Result.GetResult<Prisma.$PDFPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    links<T extends Highlight$linksArgs<ExtArgs> = {}>(args?: Subset<T, Highlight$linksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LinkPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Highlight model
   */ 
  interface HighlightFieldRefs {
    readonly id: FieldRef<"Highlight", 'String'>
    readonly pdfId: FieldRef<"Highlight", 'String'>
    readonly page: FieldRef<"Highlight", 'Int'>
    readonly text: FieldRef<"Highlight", 'String'>
    readonly coords: FieldRef<"Highlight", 'String'>
    readonly createdAt: FieldRef<"Highlight", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Highlight findUnique
   */
  export type HighlightFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Highlight
     */
    select?: HighlightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HighlightInclude<ExtArgs> | null
    /**
     * Filter, which Highlight to fetch.
     */
    where: HighlightWhereUniqueInput
  }

  /**
   * Highlight findUniqueOrThrow
   */
  export type HighlightFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Highlight
     */
    select?: HighlightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HighlightInclude<ExtArgs> | null
    /**
     * Filter, which Highlight to fetch.
     */
    where: HighlightWhereUniqueInput
  }

  /**
   * Highlight findFirst
   */
  export type HighlightFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Highlight
     */
    select?: HighlightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HighlightInclude<ExtArgs> | null
    /**
     * Filter, which Highlight to fetch.
     */
    where?: HighlightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Highlights to fetch.
     */
    orderBy?: HighlightOrderByWithRelationInput | HighlightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Highlights.
     */
    cursor?: HighlightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Highlights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Highlights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Highlights.
     */
    distinct?: HighlightScalarFieldEnum | HighlightScalarFieldEnum[]
  }

  /**
   * Highlight findFirstOrThrow
   */
  export type HighlightFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Highlight
     */
    select?: HighlightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HighlightInclude<ExtArgs> | null
    /**
     * Filter, which Highlight to fetch.
     */
    where?: HighlightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Highlights to fetch.
     */
    orderBy?: HighlightOrderByWithRelationInput | HighlightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Highlights.
     */
    cursor?: HighlightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Highlights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Highlights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Highlights.
     */
    distinct?: HighlightScalarFieldEnum | HighlightScalarFieldEnum[]
  }

  /**
   * Highlight findMany
   */
  export type HighlightFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Highlight
     */
    select?: HighlightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HighlightInclude<ExtArgs> | null
    /**
     * Filter, which Highlights to fetch.
     */
    where?: HighlightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Highlights to fetch.
     */
    orderBy?: HighlightOrderByWithRelationInput | HighlightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Highlights.
     */
    cursor?: HighlightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Highlights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Highlights.
     */
    skip?: number
    distinct?: HighlightScalarFieldEnum | HighlightScalarFieldEnum[]
  }

  /**
   * Highlight create
   */
  export type HighlightCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Highlight
     */
    select?: HighlightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HighlightInclude<ExtArgs> | null
    /**
     * The data needed to create a Highlight.
     */
    data: XOR<HighlightCreateInput, HighlightUncheckedCreateInput>
  }

  /**
   * Highlight createMany
   */
  export type HighlightCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Highlights.
     */
    data: HighlightCreateManyInput | HighlightCreateManyInput[]
  }

  /**
   * Highlight createManyAndReturn
   */
  export type HighlightCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Highlight
     */
    select?: HighlightSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Highlights.
     */
    data: HighlightCreateManyInput | HighlightCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HighlightIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Highlight update
   */
  export type HighlightUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Highlight
     */
    select?: HighlightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HighlightInclude<ExtArgs> | null
    /**
     * The data needed to update a Highlight.
     */
    data: XOR<HighlightUpdateInput, HighlightUncheckedUpdateInput>
    /**
     * Choose, which Highlight to update.
     */
    where: HighlightWhereUniqueInput
  }

  /**
   * Highlight updateMany
   */
  export type HighlightUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Highlights.
     */
    data: XOR<HighlightUpdateManyMutationInput, HighlightUncheckedUpdateManyInput>
    /**
     * Filter which Highlights to update
     */
    where?: HighlightWhereInput
  }

  /**
   * Highlight upsert
   */
  export type HighlightUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Highlight
     */
    select?: HighlightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HighlightInclude<ExtArgs> | null
    /**
     * The filter to search for the Highlight to update in case it exists.
     */
    where: HighlightWhereUniqueInput
    /**
     * In case the Highlight found by the `where` argument doesn't exist, create a new Highlight with this data.
     */
    create: XOR<HighlightCreateInput, HighlightUncheckedCreateInput>
    /**
     * In case the Highlight was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HighlightUpdateInput, HighlightUncheckedUpdateInput>
  }

  /**
   * Highlight delete
   */
  export type HighlightDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Highlight
     */
    select?: HighlightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HighlightInclude<ExtArgs> | null
    /**
     * Filter which Highlight to delete.
     */
    where: HighlightWhereUniqueInput
  }

  /**
   * Highlight deleteMany
   */
  export type HighlightDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Highlights to delete
     */
    where?: HighlightWhereInput
  }

  /**
   * Highlight.links
   */
  export type Highlight$linksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkInclude<ExtArgs> | null
    where?: LinkWhereInput
    orderBy?: LinkOrderByWithRelationInput | LinkOrderByWithRelationInput[]
    cursor?: LinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LinkScalarFieldEnum | LinkScalarFieldEnum[]
  }

  /**
   * Highlight without action
   */
  export type HighlightDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Highlight
     */
    select?: HighlightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HighlightInclude<ExtArgs> | null
  }


  /**
   * Model LiteratureNote
   */

  export type AggregateLiteratureNote = {
    _count: LiteratureNoteCountAggregateOutputType | null
    _min: LiteratureNoteMinAggregateOutputType | null
    _max: LiteratureNoteMaxAggregateOutputType | null
  }

  export type LiteratureNoteMinAggregateOutputType = {
    id: string | null
    title: string | null
    authors: string | null
    year: string | null
    journal: string | null
    doi: string | null
    abstract: string | null
    tags: string | null
    citation: string | null
    synonyms: string | null
    userNote: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LiteratureNoteMaxAggregateOutputType = {
    id: string | null
    title: string | null
    authors: string | null
    year: string | null
    journal: string | null
    doi: string | null
    abstract: string | null
    tags: string | null
    citation: string | null
    synonyms: string | null
    userNote: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LiteratureNoteCountAggregateOutputType = {
    id: number
    title: number
    authors: number
    year: number
    journal: number
    doi: number
    abstract: number
    tags: number
    citation: number
    synonyms: number
    userNote: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LiteratureNoteMinAggregateInputType = {
    id?: true
    title?: true
    authors?: true
    year?: true
    journal?: true
    doi?: true
    abstract?: true
    tags?: true
    citation?: true
    synonyms?: true
    userNote?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LiteratureNoteMaxAggregateInputType = {
    id?: true
    title?: true
    authors?: true
    year?: true
    journal?: true
    doi?: true
    abstract?: true
    tags?: true
    citation?: true
    synonyms?: true
    userNote?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LiteratureNoteCountAggregateInputType = {
    id?: true
    title?: true
    authors?: true
    year?: true
    journal?: true
    doi?: true
    abstract?: true
    tags?: true
    citation?: true
    synonyms?: true
    userNote?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LiteratureNoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LiteratureNote to aggregate.
     */
    where?: LiteratureNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LiteratureNotes to fetch.
     */
    orderBy?: LiteratureNoteOrderByWithRelationInput | LiteratureNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LiteratureNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LiteratureNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LiteratureNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LiteratureNotes
    **/
    _count?: true | LiteratureNoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LiteratureNoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LiteratureNoteMaxAggregateInputType
  }

  export type GetLiteratureNoteAggregateType<T extends LiteratureNoteAggregateArgs> = {
        [P in keyof T & keyof AggregateLiteratureNote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLiteratureNote[P]>
      : GetScalarType<T[P], AggregateLiteratureNote[P]>
  }




  export type LiteratureNoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LiteratureNoteWhereInput
    orderBy?: LiteratureNoteOrderByWithAggregationInput | LiteratureNoteOrderByWithAggregationInput[]
    by: LiteratureNoteScalarFieldEnum[] | LiteratureNoteScalarFieldEnum
    having?: LiteratureNoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LiteratureNoteCountAggregateInputType | true
    _min?: LiteratureNoteMinAggregateInputType
    _max?: LiteratureNoteMaxAggregateInputType
  }

  export type LiteratureNoteGroupByOutputType = {
    id: string
    title: string
    authors: string | null
    year: string | null
    journal: string | null
    doi: string | null
    abstract: string | null
    tags: string | null
    citation: string | null
    synonyms: string | null
    userNote: string | null
    createdAt: Date
    updatedAt: Date
    _count: LiteratureNoteCountAggregateOutputType | null
    _min: LiteratureNoteMinAggregateOutputType | null
    _max: LiteratureNoteMaxAggregateOutputType | null
  }

  type GetLiteratureNoteGroupByPayload<T extends LiteratureNoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LiteratureNoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LiteratureNoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LiteratureNoteGroupByOutputType[P]>
            : GetScalarType<T[P], LiteratureNoteGroupByOutputType[P]>
        }
      >
    >


  export type LiteratureNoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    authors?: boolean
    year?: boolean
    journal?: boolean
    doi?: boolean
    abstract?: boolean
    tags?: boolean
    citation?: boolean
    synonyms?: boolean
    userNote?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    relatedEntries?: boolean | LiteratureNote$relatedEntriesArgs<ExtArgs>
    _count?: boolean | LiteratureNoteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["literatureNote"]>

  export type LiteratureNoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    authors?: boolean
    year?: boolean
    journal?: boolean
    doi?: boolean
    abstract?: boolean
    tags?: boolean
    citation?: boolean
    synonyms?: boolean
    userNote?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["literatureNote"]>

  export type LiteratureNoteSelectScalar = {
    id?: boolean
    title?: boolean
    authors?: boolean
    year?: boolean
    journal?: boolean
    doi?: boolean
    abstract?: boolean
    tags?: boolean
    citation?: boolean
    synonyms?: boolean
    userNote?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LiteratureNoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    relatedEntries?: boolean | LiteratureNote$relatedEntriesArgs<ExtArgs>
    _count?: boolean | LiteratureNoteCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LiteratureNoteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $LiteratureNotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LiteratureNote"
    objects: {
      relatedEntries: Prisma.$DatabaseEntryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      authors: string | null
      year: string | null
      journal: string | null
      doi: string | null
      abstract: string | null
      tags: string | null
      citation: string | null
      synonyms: string | null
      userNote: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["literatureNote"]>
    composites: {}
  }

  type LiteratureNoteGetPayload<S extends boolean | null | undefined | LiteratureNoteDefaultArgs> = $Result.GetResult<Prisma.$LiteratureNotePayload, S>

  type LiteratureNoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LiteratureNoteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LiteratureNoteCountAggregateInputType | true
    }

  export interface LiteratureNoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LiteratureNote'], meta: { name: 'LiteratureNote' } }
    /**
     * Find zero or one LiteratureNote that matches the filter.
     * @param {LiteratureNoteFindUniqueArgs} args - Arguments to find a LiteratureNote
     * @example
     * // Get one LiteratureNote
     * const literatureNote = await prisma.literatureNote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LiteratureNoteFindUniqueArgs>(args: SelectSubset<T, LiteratureNoteFindUniqueArgs<ExtArgs>>): Prisma__LiteratureNoteClient<$Result.GetResult<Prisma.$LiteratureNotePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LiteratureNote that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LiteratureNoteFindUniqueOrThrowArgs} args - Arguments to find a LiteratureNote
     * @example
     * // Get one LiteratureNote
     * const literatureNote = await prisma.literatureNote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LiteratureNoteFindUniqueOrThrowArgs>(args: SelectSubset<T, LiteratureNoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LiteratureNoteClient<$Result.GetResult<Prisma.$LiteratureNotePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LiteratureNote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LiteratureNoteFindFirstArgs} args - Arguments to find a LiteratureNote
     * @example
     * // Get one LiteratureNote
     * const literatureNote = await prisma.literatureNote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LiteratureNoteFindFirstArgs>(args?: SelectSubset<T, LiteratureNoteFindFirstArgs<ExtArgs>>): Prisma__LiteratureNoteClient<$Result.GetResult<Prisma.$LiteratureNotePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LiteratureNote that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LiteratureNoteFindFirstOrThrowArgs} args - Arguments to find a LiteratureNote
     * @example
     * // Get one LiteratureNote
     * const literatureNote = await prisma.literatureNote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LiteratureNoteFindFirstOrThrowArgs>(args?: SelectSubset<T, LiteratureNoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__LiteratureNoteClient<$Result.GetResult<Prisma.$LiteratureNotePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LiteratureNotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LiteratureNoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LiteratureNotes
     * const literatureNotes = await prisma.literatureNote.findMany()
     * 
     * // Get first 10 LiteratureNotes
     * const literatureNotes = await prisma.literatureNote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const literatureNoteWithIdOnly = await prisma.literatureNote.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LiteratureNoteFindManyArgs>(args?: SelectSubset<T, LiteratureNoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LiteratureNotePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LiteratureNote.
     * @param {LiteratureNoteCreateArgs} args - Arguments to create a LiteratureNote.
     * @example
     * // Create one LiteratureNote
     * const LiteratureNote = await prisma.literatureNote.create({
     *   data: {
     *     // ... data to create a LiteratureNote
     *   }
     * })
     * 
     */
    create<T extends LiteratureNoteCreateArgs>(args: SelectSubset<T, LiteratureNoteCreateArgs<ExtArgs>>): Prisma__LiteratureNoteClient<$Result.GetResult<Prisma.$LiteratureNotePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LiteratureNotes.
     * @param {LiteratureNoteCreateManyArgs} args - Arguments to create many LiteratureNotes.
     * @example
     * // Create many LiteratureNotes
     * const literatureNote = await prisma.literatureNote.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LiteratureNoteCreateManyArgs>(args?: SelectSubset<T, LiteratureNoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LiteratureNotes and returns the data saved in the database.
     * @param {LiteratureNoteCreateManyAndReturnArgs} args - Arguments to create many LiteratureNotes.
     * @example
     * // Create many LiteratureNotes
     * const literatureNote = await prisma.literatureNote.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LiteratureNotes and only return the `id`
     * const literatureNoteWithIdOnly = await prisma.literatureNote.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LiteratureNoteCreateManyAndReturnArgs>(args?: SelectSubset<T, LiteratureNoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LiteratureNotePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a LiteratureNote.
     * @param {LiteratureNoteDeleteArgs} args - Arguments to delete one LiteratureNote.
     * @example
     * // Delete one LiteratureNote
     * const LiteratureNote = await prisma.literatureNote.delete({
     *   where: {
     *     // ... filter to delete one LiteratureNote
     *   }
     * })
     * 
     */
    delete<T extends LiteratureNoteDeleteArgs>(args: SelectSubset<T, LiteratureNoteDeleteArgs<ExtArgs>>): Prisma__LiteratureNoteClient<$Result.GetResult<Prisma.$LiteratureNotePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LiteratureNote.
     * @param {LiteratureNoteUpdateArgs} args - Arguments to update one LiteratureNote.
     * @example
     * // Update one LiteratureNote
     * const literatureNote = await prisma.literatureNote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LiteratureNoteUpdateArgs>(args: SelectSubset<T, LiteratureNoteUpdateArgs<ExtArgs>>): Prisma__LiteratureNoteClient<$Result.GetResult<Prisma.$LiteratureNotePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LiteratureNotes.
     * @param {LiteratureNoteDeleteManyArgs} args - Arguments to filter LiteratureNotes to delete.
     * @example
     * // Delete a few LiteratureNotes
     * const { count } = await prisma.literatureNote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LiteratureNoteDeleteManyArgs>(args?: SelectSubset<T, LiteratureNoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LiteratureNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LiteratureNoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LiteratureNotes
     * const literatureNote = await prisma.literatureNote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LiteratureNoteUpdateManyArgs>(args: SelectSubset<T, LiteratureNoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LiteratureNote.
     * @param {LiteratureNoteUpsertArgs} args - Arguments to update or create a LiteratureNote.
     * @example
     * // Update or create a LiteratureNote
     * const literatureNote = await prisma.literatureNote.upsert({
     *   create: {
     *     // ... data to create a LiteratureNote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LiteratureNote we want to update
     *   }
     * })
     */
    upsert<T extends LiteratureNoteUpsertArgs>(args: SelectSubset<T, LiteratureNoteUpsertArgs<ExtArgs>>): Prisma__LiteratureNoteClient<$Result.GetResult<Prisma.$LiteratureNotePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LiteratureNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LiteratureNoteCountArgs} args - Arguments to filter LiteratureNotes to count.
     * @example
     * // Count the number of LiteratureNotes
     * const count = await prisma.literatureNote.count({
     *   where: {
     *     // ... the filter for the LiteratureNotes we want to count
     *   }
     * })
    **/
    count<T extends LiteratureNoteCountArgs>(
      args?: Subset<T, LiteratureNoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LiteratureNoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LiteratureNote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LiteratureNoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LiteratureNoteAggregateArgs>(args: Subset<T, LiteratureNoteAggregateArgs>): Prisma.PrismaPromise<GetLiteratureNoteAggregateType<T>>

    /**
     * Group by LiteratureNote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LiteratureNoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LiteratureNoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LiteratureNoteGroupByArgs['orderBy'] }
        : { orderBy?: LiteratureNoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LiteratureNoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLiteratureNoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LiteratureNote model
   */
  readonly fields: LiteratureNoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LiteratureNote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LiteratureNoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    relatedEntries<T extends LiteratureNote$relatedEntriesArgs<ExtArgs> = {}>(args?: Subset<T, LiteratureNote$relatedEntriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DatabaseEntryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LiteratureNote model
   */ 
  interface LiteratureNoteFieldRefs {
    readonly id: FieldRef<"LiteratureNote", 'String'>
    readonly title: FieldRef<"LiteratureNote", 'String'>
    readonly authors: FieldRef<"LiteratureNote", 'String'>
    readonly year: FieldRef<"LiteratureNote", 'String'>
    readonly journal: FieldRef<"LiteratureNote", 'String'>
    readonly doi: FieldRef<"LiteratureNote", 'String'>
    readonly abstract: FieldRef<"LiteratureNote", 'String'>
    readonly tags: FieldRef<"LiteratureNote", 'String'>
    readonly citation: FieldRef<"LiteratureNote", 'String'>
    readonly synonyms: FieldRef<"LiteratureNote", 'String'>
    readonly userNote: FieldRef<"LiteratureNote", 'String'>
    readonly createdAt: FieldRef<"LiteratureNote", 'DateTime'>
    readonly updatedAt: FieldRef<"LiteratureNote", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LiteratureNote findUnique
   */
  export type LiteratureNoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LiteratureNote
     */
    select?: LiteratureNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LiteratureNoteInclude<ExtArgs> | null
    /**
     * Filter, which LiteratureNote to fetch.
     */
    where: LiteratureNoteWhereUniqueInput
  }

  /**
   * LiteratureNote findUniqueOrThrow
   */
  export type LiteratureNoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LiteratureNote
     */
    select?: LiteratureNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LiteratureNoteInclude<ExtArgs> | null
    /**
     * Filter, which LiteratureNote to fetch.
     */
    where: LiteratureNoteWhereUniqueInput
  }

  /**
   * LiteratureNote findFirst
   */
  export type LiteratureNoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LiteratureNote
     */
    select?: LiteratureNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LiteratureNoteInclude<ExtArgs> | null
    /**
     * Filter, which LiteratureNote to fetch.
     */
    where?: LiteratureNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LiteratureNotes to fetch.
     */
    orderBy?: LiteratureNoteOrderByWithRelationInput | LiteratureNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LiteratureNotes.
     */
    cursor?: LiteratureNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LiteratureNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LiteratureNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LiteratureNotes.
     */
    distinct?: LiteratureNoteScalarFieldEnum | LiteratureNoteScalarFieldEnum[]
  }

  /**
   * LiteratureNote findFirstOrThrow
   */
  export type LiteratureNoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LiteratureNote
     */
    select?: LiteratureNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LiteratureNoteInclude<ExtArgs> | null
    /**
     * Filter, which LiteratureNote to fetch.
     */
    where?: LiteratureNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LiteratureNotes to fetch.
     */
    orderBy?: LiteratureNoteOrderByWithRelationInput | LiteratureNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LiteratureNotes.
     */
    cursor?: LiteratureNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LiteratureNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LiteratureNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LiteratureNotes.
     */
    distinct?: LiteratureNoteScalarFieldEnum | LiteratureNoteScalarFieldEnum[]
  }

  /**
   * LiteratureNote findMany
   */
  export type LiteratureNoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LiteratureNote
     */
    select?: LiteratureNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LiteratureNoteInclude<ExtArgs> | null
    /**
     * Filter, which LiteratureNotes to fetch.
     */
    where?: LiteratureNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LiteratureNotes to fetch.
     */
    orderBy?: LiteratureNoteOrderByWithRelationInput | LiteratureNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LiteratureNotes.
     */
    cursor?: LiteratureNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LiteratureNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LiteratureNotes.
     */
    skip?: number
    distinct?: LiteratureNoteScalarFieldEnum | LiteratureNoteScalarFieldEnum[]
  }

  /**
   * LiteratureNote create
   */
  export type LiteratureNoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LiteratureNote
     */
    select?: LiteratureNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LiteratureNoteInclude<ExtArgs> | null
    /**
     * The data needed to create a LiteratureNote.
     */
    data: XOR<LiteratureNoteCreateInput, LiteratureNoteUncheckedCreateInput>
  }

  /**
   * LiteratureNote createMany
   */
  export type LiteratureNoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LiteratureNotes.
     */
    data: LiteratureNoteCreateManyInput | LiteratureNoteCreateManyInput[]
  }

  /**
   * LiteratureNote createManyAndReturn
   */
  export type LiteratureNoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LiteratureNote
     */
    select?: LiteratureNoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many LiteratureNotes.
     */
    data: LiteratureNoteCreateManyInput | LiteratureNoteCreateManyInput[]
  }

  /**
   * LiteratureNote update
   */
  export type LiteratureNoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LiteratureNote
     */
    select?: LiteratureNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LiteratureNoteInclude<ExtArgs> | null
    /**
     * The data needed to update a LiteratureNote.
     */
    data: XOR<LiteratureNoteUpdateInput, LiteratureNoteUncheckedUpdateInput>
    /**
     * Choose, which LiteratureNote to update.
     */
    where: LiteratureNoteWhereUniqueInput
  }

  /**
   * LiteratureNote updateMany
   */
  export type LiteratureNoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LiteratureNotes.
     */
    data: XOR<LiteratureNoteUpdateManyMutationInput, LiteratureNoteUncheckedUpdateManyInput>
    /**
     * Filter which LiteratureNotes to update
     */
    where?: LiteratureNoteWhereInput
  }

  /**
   * LiteratureNote upsert
   */
  export type LiteratureNoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LiteratureNote
     */
    select?: LiteratureNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LiteratureNoteInclude<ExtArgs> | null
    /**
     * The filter to search for the LiteratureNote to update in case it exists.
     */
    where: LiteratureNoteWhereUniqueInput
    /**
     * In case the LiteratureNote found by the `where` argument doesn't exist, create a new LiteratureNote with this data.
     */
    create: XOR<LiteratureNoteCreateInput, LiteratureNoteUncheckedCreateInput>
    /**
     * In case the LiteratureNote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LiteratureNoteUpdateInput, LiteratureNoteUncheckedUpdateInput>
  }

  /**
   * LiteratureNote delete
   */
  export type LiteratureNoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LiteratureNote
     */
    select?: LiteratureNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LiteratureNoteInclude<ExtArgs> | null
    /**
     * Filter which LiteratureNote to delete.
     */
    where: LiteratureNoteWhereUniqueInput
  }

  /**
   * LiteratureNote deleteMany
   */
  export type LiteratureNoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LiteratureNotes to delete
     */
    where?: LiteratureNoteWhereInput
  }

  /**
   * LiteratureNote.relatedEntries
   */
  export type LiteratureNote$relatedEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatabaseEntry
     */
    select?: DatabaseEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatabaseEntryInclude<ExtArgs> | null
    where?: DatabaseEntryWhereInput
    orderBy?: DatabaseEntryOrderByWithRelationInput | DatabaseEntryOrderByWithRelationInput[]
    cursor?: DatabaseEntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DatabaseEntryScalarFieldEnum | DatabaseEntryScalarFieldEnum[]
  }

  /**
   * LiteratureNote without action
   */
  export type LiteratureNoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LiteratureNote
     */
    select?: LiteratureNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LiteratureNoteInclude<ExtArgs> | null
  }


  /**
   * Model DatabaseEntry
   */

  export type AggregateDatabaseEntry = {
    _count: DatabaseEntryCountAggregateOutputType | null
    _avg: DatabaseEntryAvgAggregateOutputType | null
    _sum: DatabaseEntrySumAggregateOutputType | null
    _min: DatabaseEntryMinAggregateOutputType | null
    _max: DatabaseEntryMaxAggregateOutputType | null
  }

  export type DatabaseEntryAvgAggregateOutputType = {
    molecularWeight: number | null
  }

  export type DatabaseEntrySumAggregateOutputType = {
    molecularWeight: number | null
  }

  export type DatabaseEntryMinAggregateOutputType = {
    id: string | null
    type: string | null
    name: string | null
    description: string | null
    properties: string | null
    molecularWeight: number | null
    concentration: string | null
    storage: string | null
    supplier: string | null
    catalogNumber: string | null
    purity: string | null
    sequence: string | null
    organism: string | null
    function: string | null
    protocol: string | null
    equipment: string | null
    duration: string | null
    temperature: string | null
    pH: string | null
    createdAt: Date | null
    metadata: string | null
    relatedResearch: string | null
  }

  export type DatabaseEntryMaxAggregateOutputType = {
    id: string | null
    type: string | null
    name: string | null
    description: string | null
    properties: string | null
    molecularWeight: number | null
    concentration: string | null
    storage: string | null
    supplier: string | null
    catalogNumber: string | null
    purity: string | null
    sequence: string | null
    organism: string | null
    function: string | null
    protocol: string | null
    equipment: string | null
    duration: string | null
    temperature: string | null
    pH: string | null
    createdAt: Date | null
    metadata: string | null
    relatedResearch: string | null
  }

  export type DatabaseEntryCountAggregateOutputType = {
    id: number
    type: number
    name: number
    description: number
    properties: number
    molecularWeight: number
    concentration: number
    storage: number
    supplier: number
    catalogNumber: number
    purity: number
    sequence: number
    organism: number
    function: number
    protocol: number
    equipment: number
    duration: number
    temperature: number
    pH: number
    createdAt: number
    metadata: number
    relatedResearch: number
    _all: number
  }


  export type DatabaseEntryAvgAggregateInputType = {
    molecularWeight?: true
  }

  export type DatabaseEntrySumAggregateInputType = {
    molecularWeight?: true
  }

  export type DatabaseEntryMinAggregateInputType = {
    id?: true
    type?: true
    name?: true
    description?: true
    properties?: true
    molecularWeight?: true
    concentration?: true
    storage?: true
    supplier?: true
    catalogNumber?: true
    purity?: true
    sequence?: true
    organism?: true
    function?: true
    protocol?: true
    equipment?: true
    duration?: true
    temperature?: true
    pH?: true
    createdAt?: true
    metadata?: true
    relatedResearch?: true
  }

  export type DatabaseEntryMaxAggregateInputType = {
    id?: true
    type?: true
    name?: true
    description?: true
    properties?: true
    molecularWeight?: true
    concentration?: true
    storage?: true
    supplier?: true
    catalogNumber?: true
    purity?: true
    sequence?: true
    organism?: true
    function?: true
    protocol?: true
    equipment?: true
    duration?: true
    temperature?: true
    pH?: true
    createdAt?: true
    metadata?: true
    relatedResearch?: true
  }

  export type DatabaseEntryCountAggregateInputType = {
    id?: true
    type?: true
    name?: true
    description?: true
    properties?: true
    molecularWeight?: true
    concentration?: true
    storage?: true
    supplier?: true
    catalogNumber?: true
    purity?: true
    sequence?: true
    organism?: true
    function?: true
    protocol?: true
    equipment?: true
    duration?: true
    temperature?: true
    pH?: true
    createdAt?: true
    metadata?: true
    relatedResearch?: true
    _all?: true
  }

  export type DatabaseEntryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DatabaseEntry to aggregate.
     */
    where?: DatabaseEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DatabaseEntries to fetch.
     */
    orderBy?: DatabaseEntryOrderByWithRelationInput | DatabaseEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DatabaseEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DatabaseEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DatabaseEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DatabaseEntries
    **/
    _count?: true | DatabaseEntryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DatabaseEntryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DatabaseEntrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DatabaseEntryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DatabaseEntryMaxAggregateInputType
  }

  export type GetDatabaseEntryAggregateType<T extends DatabaseEntryAggregateArgs> = {
        [P in keyof T & keyof AggregateDatabaseEntry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDatabaseEntry[P]>
      : GetScalarType<T[P], AggregateDatabaseEntry[P]>
  }




  export type DatabaseEntryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DatabaseEntryWhereInput
    orderBy?: DatabaseEntryOrderByWithAggregationInput | DatabaseEntryOrderByWithAggregationInput[]
    by: DatabaseEntryScalarFieldEnum[] | DatabaseEntryScalarFieldEnum
    having?: DatabaseEntryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DatabaseEntryCountAggregateInputType | true
    _avg?: DatabaseEntryAvgAggregateInputType
    _sum?: DatabaseEntrySumAggregateInputType
    _min?: DatabaseEntryMinAggregateInputType
    _max?: DatabaseEntryMaxAggregateInputType
  }

  export type DatabaseEntryGroupByOutputType = {
    id: string
    type: string
    name: string
    description: string | null
    properties: string | null
    molecularWeight: number | null
    concentration: string | null
    storage: string | null
    supplier: string | null
    catalogNumber: string | null
    purity: string | null
    sequence: string | null
    organism: string | null
    function: string | null
    protocol: string | null
    equipment: string | null
    duration: string | null
    temperature: string | null
    pH: string | null
    createdAt: Date
    metadata: string | null
    relatedResearch: string | null
    _count: DatabaseEntryCountAggregateOutputType | null
    _avg: DatabaseEntryAvgAggregateOutputType | null
    _sum: DatabaseEntrySumAggregateOutputType | null
    _min: DatabaseEntryMinAggregateOutputType | null
    _max: DatabaseEntryMaxAggregateOutputType | null
  }

  type GetDatabaseEntryGroupByPayload<T extends DatabaseEntryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DatabaseEntryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DatabaseEntryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DatabaseEntryGroupByOutputType[P]>
            : GetScalarType<T[P], DatabaseEntryGroupByOutputType[P]>
        }
      >
    >


  export type DatabaseEntrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    name?: boolean
    description?: boolean
    properties?: boolean
    molecularWeight?: boolean
    concentration?: boolean
    storage?: boolean
    supplier?: boolean
    catalogNumber?: boolean
    purity?: boolean
    sequence?: boolean
    organism?: boolean
    function?: boolean
    protocol?: boolean
    equipment?: boolean
    duration?: boolean
    temperature?: boolean
    pH?: boolean
    createdAt?: boolean
    metadata?: boolean
    relatedResearch?: boolean
    relatedLitNotes?: boolean | DatabaseEntry$relatedLitNotesArgs<ExtArgs>
    links?: boolean | DatabaseEntry$linksArgs<ExtArgs>
    _count?: boolean | DatabaseEntryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["databaseEntry"]>

  export type DatabaseEntrySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    name?: boolean
    description?: boolean
    properties?: boolean
    molecularWeight?: boolean
    concentration?: boolean
    storage?: boolean
    supplier?: boolean
    catalogNumber?: boolean
    purity?: boolean
    sequence?: boolean
    organism?: boolean
    function?: boolean
    protocol?: boolean
    equipment?: boolean
    duration?: boolean
    temperature?: boolean
    pH?: boolean
    createdAt?: boolean
    metadata?: boolean
    relatedResearch?: boolean
  }, ExtArgs["result"]["databaseEntry"]>

  export type DatabaseEntrySelectScalar = {
    id?: boolean
    type?: boolean
    name?: boolean
    description?: boolean
    properties?: boolean
    molecularWeight?: boolean
    concentration?: boolean
    storage?: boolean
    supplier?: boolean
    catalogNumber?: boolean
    purity?: boolean
    sequence?: boolean
    organism?: boolean
    function?: boolean
    protocol?: boolean
    equipment?: boolean
    duration?: boolean
    temperature?: boolean
    pH?: boolean
    createdAt?: boolean
    metadata?: boolean
    relatedResearch?: boolean
  }

  export type DatabaseEntryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    relatedLitNotes?: boolean | DatabaseEntry$relatedLitNotesArgs<ExtArgs>
    links?: boolean | DatabaseEntry$linksArgs<ExtArgs>
    _count?: boolean | DatabaseEntryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DatabaseEntryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DatabaseEntryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DatabaseEntry"
    objects: {
      relatedLitNotes: Prisma.$LiteratureNotePayload<ExtArgs>[]
      links: Prisma.$LinkPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      name: string
      description: string | null
      properties: string | null
      molecularWeight: number | null
      concentration: string | null
      storage: string | null
      supplier: string | null
      catalogNumber: string | null
      purity: string | null
      sequence: string | null
      organism: string | null
      function: string | null
      protocol: string | null
      equipment: string | null
      duration: string | null
      temperature: string | null
      pH: string | null
      createdAt: Date
      metadata: string | null
      relatedResearch: string | null
    }, ExtArgs["result"]["databaseEntry"]>
    composites: {}
  }

  type DatabaseEntryGetPayload<S extends boolean | null | undefined | DatabaseEntryDefaultArgs> = $Result.GetResult<Prisma.$DatabaseEntryPayload, S>

  type DatabaseEntryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DatabaseEntryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DatabaseEntryCountAggregateInputType | true
    }

  export interface DatabaseEntryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DatabaseEntry'], meta: { name: 'DatabaseEntry' } }
    /**
     * Find zero or one DatabaseEntry that matches the filter.
     * @param {DatabaseEntryFindUniqueArgs} args - Arguments to find a DatabaseEntry
     * @example
     * // Get one DatabaseEntry
     * const databaseEntry = await prisma.databaseEntry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DatabaseEntryFindUniqueArgs>(args: SelectSubset<T, DatabaseEntryFindUniqueArgs<ExtArgs>>): Prisma__DatabaseEntryClient<$Result.GetResult<Prisma.$DatabaseEntryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DatabaseEntry that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DatabaseEntryFindUniqueOrThrowArgs} args - Arguments to find a DatabaseEntry
     * @example
     * // Get one DatabaseEntry
     * const databaseEntry = await prisma.databaseEntry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DatabaseEntryFindUniqueOrThrowArgs>(args: SelectSubset<T, DatabaseEntryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DatabaseEntryClient<$Result.GetResult<Prisma.$DatabaseEntryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DatabaseEntry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatabaseEntryFindFirstArgs} args - Arguments to find a DatabaseEntry
     * @example
     * // Get one DatabaseEntry
     * const databaseEntry = await prisma.databaseEntry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DatabaseEntryFindFirstArgs>(args?: SelectSubset<T, DatabaseEntryFindFirstArgs<ExtArgs>>): Prisma__DatabaseEntryClient<$Result.GetResult<Prisma.$DatabaseEntryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DatabaseEntry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatabaseEntryFindFirstOrThrowArgs} args - Arguments to find a DatabaseEntry
     * @example
     * // Get one DatabaseEntry
     * const databaseEntry = await prisma.databaseEntry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DatabaseEntryFindFirstOrThrowArgs>(args?: SelectSubset<T, DatabaseEntryFindFirstOrThrowArgs<ExtArgs>>): Prisma__DatabaseEntryClient<$Result.GetResult<Prisma.$DatabaseEntryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DatabaseEntries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatabaseEntryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DatabaseEntries
     * const databaseEntries = await prisma.databaseEntry.findMany()
     * 
     * // Get first 10 DatabaseEntries
     * const databaseEntries = await prisma.databaseEntry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const databaseEntryWithIdOnly = await prisma.databaseEntry.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DatabaseEntryFindManyArgs>(args?: SelectSubset<T, DatabaseEntryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DatabaseEntryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DatabaseEntry.
     * @param {DatabaseEntryCreateArgs} args - Arguments to create a DatabaseEntry.
     * @example
     * // Create one DatabaseEntry
     * const DatabaseEntry = await prisma.databaseEntry.create({
     *   data: {
     *     // ... data to create a DatabaseEntry
     *   }
     * })
     * 
     */
    create<T extends DatabaseEntryCreateArgs>(args: SelectSubset<T, DatabaseEntryCreateArgs<ExtArgs>>): Prisma__DatabaseEntryClient<$Result.GetResult<Prisma.$DatabaseEntryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DatabaseEntries.
     * @param {DatabaseEntryCreateManyArgs} args - Arguments to create many DatabaseEntries.
     * @example
     * // Create many DatabaseEntries
     * const databaseEntry = await prisma.databaseEntry.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DatabaseEntryCreateManyArgs>(args?: SelectSubset<T, DatabaseEntryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DatabaseEntries and returns the data saved in the database.
     * @param {DatabaseEntryCreateManyAndReturnArgs} args - Arguments to create many DatabaseEntries.
     * @example
     * // Create many DatabaseEntries
     * const databaseEntry = await prisma.databaseEntry.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DatabaseEntries and only return the `id`
     * const databaseEntryWithIdOnly = await prisma.databaseEntry.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DatabaseEntryCreateManyAndReturnArgs>(args?: SelectSubset<T, DatabaseEntryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DatabaseEntryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DatabaseEntry.
     * @param {DatabaseEntryDeleteArgs} args - Arguments to delete one DatabaseEntry.
     * @example
     * // Delete one DatabaseEntry
     * const DatabaseEntry = await prisma.databaseEntry.delete({
     *   where: {
     *     // ... filter to delete one DatabaseEntry
     *   }
     * })
     * 
     */
    delete<T extends DatabaseEntryDeleteArgs>(args: SelectSubset<T, DatabaseEntryDeleteArgs<ExtArgs>>): Prisma__DatabaseEntryClient<$Result.GetResult<Prisma.$DatabaseEntryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DatabaseEntry.
     * @param {DatabaseEntryUpdateArgs} args - Arguments to update one DatabaseEntry.
     * @example
     * // Update one DatabaseEntry
     * const databaseEntry = await prisma.databaseEntry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DatabaseEntryUpdateArgs>(args: SelectSubset<T, DatabaseEntryUpdateArgs<ExtArgs>>): Prisma__DatabaseEntryClient<$Result.GetResult<Prisma.$DatabaseEntryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DatabaseEntries.
     * @param {DatabaseEntryDeleteManyArgs} args - Arguments to filter DatabaseEntries to delete.
     * @example
     * // Delete a few DatabaseEntries
     * const { count } = await prisma.databaseEntry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DatabaseEntryDeleteManyArgs>(args?: SelectSubset<T, DatabaseEntryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DatabaseEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatabaseEntryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DatabaseEntries
     * const databaseEntry = await prisma.databaseEntry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DatabaseEntryUpdateManyArgs>(args: SelectSubset<T, DatabaseEntryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DatabaseEntry.
     * @param {DatabaseEntryUpsertArgs} args - Arguments to update or create a DatabaseEntry.
     * @example
     * // Update or create a DatabaseEntry
     * const databaseEntry = await prisma.databaseEntry.upsert({
     *   create: {
     *     // ... data to create a DatabaseEntry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DatabaseEntry we want to update
     *   }
     * })
     */
    upsert<T extends DatabaseEntryUpsertArgs>(args: SelectSubset<T, DatabaseEntryUpsertArgs<ExtArgs>>): Prisma__DatabaseEntryClient<$Result.GetResult<Prisma.$DatabaseEntryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DatabaseEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatabaseEntryCountArgs} args - Arguments to filter DatabaseEntries to count.
     * @example
     * // Count the number of DatabaseEntries
     * const count = await prisma.databaseEntry.count({
     *   where: {
     *     // ... the filter for the DatabaseEntries we want to count
     *   }
     * })
    **/
    count<T extends DatabaseEntryCountArgs>(
      args?: Subset<T, DatabaseEntryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DatabaseEntryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DatabaseEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatabaseEntryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DatabaseEntryAggregateArgs>(args: Subset<T, DatabaseEntryAggregateArgs>): Prisma.PrismaPromise<GetDatabaseEntryAggregateType<T>>

    /**
     * Group by DatabaseEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatabaseEntryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DatabaseEntryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DatabaseEntryGroupByArgs['orderBy'] }
        : { orderBy?: DatabaseEntryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DatabaseEntryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDatabaseEntryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DatabaseEntry model
   */
  readonly fields: DatabaseEntryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DatabaseEntry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DatabaseEntryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    relatedLitNotes<T extends DatabaseEntry$relatedLitNotesArgs<ExtArgs> = {}>(args?: Subset<T, DatabaseEntry$relatedLitNotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LiteratureNotePayload<ExtArgs>, T, "findMany"> | Null>
    links<T extends DatabaseEntry$linksArgs<ExtArgs> = {}>(args?: Subset<T, DatabaseEntry$linksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LinkPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DatabaseEntry model
   */ 
  interface DatabaseEntryFieldRefs {
    readonly id: FieldRef<"DatabaseEntry", 'String'>
    readonly type: FieldRef<"DatabaseEntry", 'String'>
    readonly name: FieldRef<"DatabaseEntry", 'String'>
    readonly description: FieldRef<"DatabaseEntry", 'String'>
    readonly properties: FieldRef<"DatabaseEntry", 'String'>
    readonly molecularWeight: FieldRef<"DatabaseEntry", 'Float'>
    readonly concentration: FieldRef<"DatabaseEntry", 'String'>
    readonly storage: FieldRef<"DatabaseEntry", 'String'>
    readonly supplier: FieldRef<"DatabaseEntry", 'String'>
    readonly catalogNumber: FieldRef<"DatabaseEntry", 'String'>
    readonly purity: FieldRef<"DatabaseEntry", 'String'>
    readonly sequence: FieldRef<"DatabaseEntry", 'String'>
    readonly organism: FieldRef<"DatabaseEntry", 'String'>
    readonly function: FieldRef<"DatabaseEntry", 'String'>
    readonly protocol: FieldRef<"DatabaseEntry", 'String'>
    readonly equipment: FieldRef<"DatabaseEntry", 'String'>
    readonly duration: FieldRef<"DatabaseEntry", 'String'>
    readonly temperature: FieldRef<"DatabaseEntry", 'String'>
    readonly pH: FieldRef<"DatabaseEntry", 'String'>
    readonly createdAt: FieldRef<"DatabaseEntry", 'DateTime'>
    readonly metadata: FieldRef<"DatabaseEntry", 'String'>
    readonly relatedResearch: FieldRef<"DatabaseEntry", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DatabaseEntry findUnique
   */
  export type DatabaseEntryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatabaseEntry
     */
    select?: DatabaseEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatabaseEntryInclude<ExtArgs> | null
    /**
     * Filter, which DatabaseEntry to fetch.
     */
    where: DatabaseEntryWhereUniqueInput
  }

  /**
   * DatabaseEntry findUniqueOrThrow
   */
  export type DatabaseEntryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatabaseEntry
     */
    select?: DatabaseEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatabaseEntryInclude<ExtArgs> | null
    /**
     * Filter, which DatabaseEntry to fetch.
     */
    where: DatabaseEntryWhereUniqueInput
  }

  /**
   * DatabaseEntry findFirst
   */
  export type DatabaseEntryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatabaseEntry
     */
    select?: DatabaseEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatabaseEntryInclude<ExtArgs> | null
    /**
     * Filter, which DatabaseEntry to fetch.
     */
    where?: DatabaseEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DatabaseEntries to fetch.
     */
    orderBy?: DatabaseEntryOrderByWithRelationInput | DatabaseEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DatabaseEntries.
     */
    cursor?: DatabaseEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DatabaseEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DatabaseEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DatabaseEntries.
     */
    distinct?: DatabaseEntryScalarFieldEnum | DatabaseEntryScalarFieldEnum[]
  }

  /**
   * DatabaseEntry findFirstOrThrow
   */
  export type DatabaseEntryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatabaseEntry
     */
    select?: DatabaseEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatabaseEntryInclude<ExtArgs> | null
    /**
     * Filter, which DatabaseEntry to fetch.
     */
    where?: DatabaseEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DatabaseEntries to fetch.
     */
    orderBy?: DatabaseEntryOrderByWithRelationInput | DatabaseEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DatabaseEntries.
     */
    cursor?: DatabaseEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DatabaseEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DatabaseEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DatabaseEntries.
     */
    distinct?: DatabaseEntryScalarFieldEnum | DatabaseEntryScalarFieldEnum[]
  }

  /**
   * DatabaseEntry findMany
   */
  export type DatabaseEntryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatabaseEntry
     */
    select?: DatabaseEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatabaseEntryInclude<ExtArgs> | null
    /**
     * Filter, which DatabaseEntries to fetch.
     */
    where?: DatabaseEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DatabaseEntries to fetch.
     */
    orderBy?: DatabaseEntryOrderByWithRelationInput | DatabaseEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DatabaseEntries.
     */
    cursor?: DatabaseEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DatabaseEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DatabaseEntries.
     */
    skip?: number
    distinct?: DatabaseEntryScalarFieldEnum | DatabaseEntryScalarFieldEnum[]
  }

  /**
   * DatabaseEntry create
   */
  export type DatabaseEntryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatabaseEntry
     */
    select?: DatabaseEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatabaseEntryInclude<ExtArgs> | null
    /**
     * The data needed to create a DatabaseEntry.
     */
    data: XOR<DatabaseEntryCreateInput, DatabaseEntryUncheckedCreateInput>
  }

  /**
   * DatabaseEntry createMany
   */
  export type DatabaseEntryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DatabaseEntries.
     */
    data: DatabaseEntryCreateManyInput | DatabaseEntryCreateManyInput[]
  }

  /**
   * DatabaseEntry createManyAndReturn
   */
  export type DatabaseEntryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatabaseEntry
     */
    select?: DatabaseEntrySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DatabaseEntries.
     */
    data: DatabaseEntryCreateManyInput | DatabaseEntryCreateManyInput[]
  }

  /**
   * DatabaseEntry update
   */
  export type DatabaseEntryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatabaseEntry
     */
    select?: DatabaseEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatabaseEntryInclude<ExtArgs> | null
    /**
     * The data needed to update a DatabaseEntry.
     */
    data: XOR<DatabaseEntryUpdateInput, DatabaseEntryUncheckedUpdateInput>
    /**
     * Choose, which DatabaseEntry to update.
     */
    where: DatabaseEntryWhereUniqueInput
  }

  /**
   * DatabaseEntry updateMany
   */
  export type DatabaseEntryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DatabaseEntries.
     */
    data: XOR<DatabaseEntryUpdateManyMutationInput, DatabaseEntryUncheckedUpdateManyInput>
    /**
     * Filter which DatabaseEntries to update
     */
    where?: DatabaseEntryWhereInput
  }

  /**
   * DatabaseEntry upsert
   */
  export type DatabaseEntryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatabaseEntry
     */
    select?: DatabaseEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatabaseEntryInclude<ExtArgs> | null
    /**
     * The filter to search for the DatabaseEntry to update in case it exists.
     */
    where: DatabaseEntryWhereUniqueInput
    /**
     * In case the DatabaseEntry found by the `where` argument doesn't exist, create a new DatabaseEntry with this data.
     */
    create: XOR<DatabaseEntryCreateInput, DatabaseEntryUncheckedCreateInput>
    /**
     * In case the DatabaseEntry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DatabaseEntryUpdateInput, DatabaseEntryUncheckedUpdateInput>
  }

  /**
   * DatabaseEntry delete
   */
  export type DatabaseEntryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatabaseEntry
     */
    select?: DatabaseEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatabaseEntryInclude<ExtArgs> | null
    /**
     * Filter which DatabaseEntry to delete.
     */
    where: DatabaseEntryWhereUniqueInput
  }

  /**
   * DatabaseEntry deleteMany
   */
  export type DatabaseEntryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DatabaseEntries to delete
     */
    where?: DatabaseEntryWhereInput
  }

  /**
   * DatabaseEntry.relatedLitNotes
   */
  export type DatabaseEntry$relatedLitNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LiteratureNote
     */
    select?: LiteratureNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LiteratureNoteInclude<ExtArgs> | null
    where?: LiteratureNoteWhereInput
    orderBy?: LiteratureNoteOrderByWithRelationInput | LiteratureNoteOrderByWithRelationInput[]
    cursor?: LiteratureNoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LiteratureNoteScalarFieldEnum | LiteratureNoteScalarFieldEnum[]
  }

  /**
   * DatabaseEntry.links
   */
  export type DatabaseEntry$linksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkInclude<ExtArgs> | null
    where?: LinkWhereInput
    orderBy?: LinkOrderByWithRelationInput | LinkOrderByWithRelationInput[]
    cursor?: LinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LinkScalarFieldEnum | LinkScalarFieldEnum[]
  }

  /**
   * DatabaseEntry without action
   */
  export type DatabaseEntryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatabaseEntry
     */
    select?: DatabaseEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatabaseEntryInclude<ExtArgs> | null
  }


  /**
   * Model Table
   */

  export type AggregateTable = {
    _count: TableCountAggregateOutputType | null
    _min: TableMinAggregateOutputType | null
    _max: TableMaxAggregateOutputType | null
  }

  export type TableMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    experimentId: string | null
    columns: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TableMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    experimentId: string | null
    columns: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TableCountAggregateOutputType = {
    id: number
    name: number
    description: number
    experimentId: number
    columns: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TableMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    experimentId?: true
    columns?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TableMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    experimentId?: true
    columns?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TableCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    experimentId?: true
    columns?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TableAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Table to aggregate.
     */
    where?: TableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tables to fetch.
     */
    orderBy?: TableOrderByWithRelationInput | TableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tables
    **/
    _count?: true | TableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TableMaxAggregateInputType
  }

  export type GetTableAggregateType<T extends TableAggregateArgs> = {
        [P in keyof T & keyof AggregateTable]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTable[P]>
      : GetScalarType<T[P], AggregateTable[P]>
  }




  export type TableGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TableWhereInput
    orderBy?: TableOrderByWithAggregationInput | TableOrderByWithAggregationInput[]
    by: TableScalarFieldEnum[] | TableScalarFieldEnum
    having?: TableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TableCountAggregateInputType | true
    _min?: TableMinAggregateInputType
    _max?: TableMaxAggregateInputType
  }

  export type TableGroupByOutputType = {
    id: string
    name: string
    description: string | null
    experimentId: string | null
    columns: string
    createdAt: Date
    updatedAt: Date
    _count: TableCountAggregateOutputType | null
    _min: TableMinAggregateOutputType | null
    _max: TableMaxAggregateOutputType | null
  }

  type GetTableGroupByPayload<T extends TableGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TableGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TableGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TableGroupByOutputType[P]>
            : GetScalarType<T[P], TableGroupByOutputType[P]>
        }
      >
    >


  export type TableSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    experimentId?: boolean
    columns?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    experiment?: boolean | Table$experimentArgs<ExtArgs>
    rows?: boolean | Table$rowsArgs<ExtArgs>
    links?: boolean | Table$linksArgs<ExtArgs>
    _count?: boolean | TableCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["table"]>

  export type TableSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    experimentId?: boolean
    columns?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    experiment?: boolean | Table$experimentArgs<ExtArgs>
  }, ExtArgs["result"]["table"]>

  export type TableSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    experimentId?: boolean
    columns?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TableInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    experiment?: boolean | Table$experimentArgs<ExtArgs>
    rows?: boolean | Table$rowsArgs<ExtArgs>
    links?: boolean | Table$linksArgs<ExtArgs>
    _count?: boolean | TableCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TableIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    experiment?: boolean | Table$experimentArgs<ExtArgs>
  }

  export type $TablePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Table"
    objects: {
      experiment: Prisma.$ExperimentPayload<ExtArgs> | null
      rows: Prisma.$TableRowPayload<ExtArgs>[]
      links: Prisma.$LinkPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      experimentId: string | null
      columns: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["table"]>
    composites: {}
  }

  type TableGetPayload<S extends boolean | null | undefined | TableDefaultArgs> = $Result.GetResult<Prisma.$TablePayload, S>

  type TableCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TableFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TableCountAggregateInputType | true
    }

  export interface TableDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Table'], meta: { name: 'Table' } }
    /**
     * Find zero or one Table that matches the filter.
     * @param {TableFindUniqueArgs} args - Arguments to find a Table
     * @example
     * // Get one Table
     * const table = await prisma.table.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TableFindUniqueArgs>(args: SelectSubset<T, TableFindUniqueArgs<ExtArgs>>): Prisma__TableClient<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Table that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TableFindUniqueOrThrowArgs} args - Arguments to find a Table
     * @example
     * // Get one Table
     * const table = await prisma.table.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TableFindUniqueOrThrowArgs>(args: SelectSubset<T, TableFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TableClient<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Table that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableFindFirstArgs} args - Arguments to find a Table
     * @example
     * // Get one Table
     * const table = await prisma.table.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TableFindFirstArgs>(args?: SelectSubset<T, TableFindFirstArgs<ExtArgs>>): Prisma__TableClient<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Table that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableFindFirstOrThrowArgs} args - Arguments to find a Table
     * @example
     * // Get one Table
     * const table = await prisma.table.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TableFindFirstOrThrowArgs>(args?: SelectSubset<T, TableFindFirstOrThrowArgs<ExtArgs>>): Prisma__TableClient<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tables
     * const tables = await prisma.table.findMany()
     * 
     * // Get first 10 Tables
     * const tables = await prisma.table.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tableWithIdOnly = await prisma.table.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TableFindManyArgs>(args?: SelectSubset<T, TableFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Table.
     * @param {TableCreateArgs} args - Arguments to create a Table.
     * @example
     * // Create one Table
     * const Table = await prisma.table.create({
     *   data: {
     *     // ... data to create a Table
     *   }
     * })
     * 
     */
    create<T extends TableCreateArgs>(args: SelectSubset<T, TableCreateArgs<ExtArgs>>): Prisma__TableClient<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tables.
     * @param {TableCreateManyArgs} args - Arguments to create many Tables.
     * @example
     * // Create many Tables
     * const table = await prisma.table.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TableCreateManyArgs>(args?: SelectSubset<T, TableCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tables and returns the data saved in the database.
     * @param {TableCreateManyAndReturnArgs} args - Arguments to create many Tables.
     * @example
     * // Create many Tables
     * const table = await prisma.table.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tables and only return the `id`
     * const tableWithIdOnly = await prisma.table.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TableCreateManyAndReturnArgs>(args?: SelectSubset<T, TableCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Table.
     * @param {TableDeleteArgs} args - Arguments to delete one Table.
     * @example
     * // Delete one Table
     * const Table = await prisma.table.delete({
     *   where: {
     *     // ... filter to delete one Table
     *   }
     * })
     * 
     */
    delete<T extends TableDeleteArgs>(args: SelectSubset<T, TableDeleteArgs<ExtArgs>>): Prisma__TableClient<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Table.
     * @param {TableUpdateArgs} args - Arguments to update one Table.
     * @example
     * // Update one Table
     * const table = await prisma.table.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TableUpdateArgs>(args: SelectSubset<T, TableUpdateArgs<ExtArgs>>): Prisma__TableClient<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tables.
     * @param {TableDeleteManyArgs} args - Arguments to filter Tables to delete.
     * @example
     * // Delete a few Tables
     * const { count } = await prisma.table.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TableDeleteManyArgs>(args?: SelectSubset<T, TableDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tables
     * const table = await prisma.table.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TableUpdateManyArgs>(args: SelectSubset<T, TableUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Table.
     * @param {TableUpsertArgs} args - Arguments to update or create a Table.
     * @example
     * // Update or create a Table
     * const table = await prisma.table.upsert({
     *   create: {
     *     // ... data to create a Table
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Table we want to update
     *   }
     * })
     */
    upsert<T extends TableUpsertArgs>(args: SelectSubset<T, TableUpsertArgs<ExtArgs>>): Prisma__TableClient<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableCountArgs} args - Arguments to filter Tables to count.
     * @example
     * // Count the number of Tables
     * const count = await prisma.table.count({
     *   where: {
     *     // ... the filter for the Tables we want to count
     *   }
     * })
    **/
    count<T extends TableCountArgs>(
      args?: Subset<T, TableCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TableAggregateArgs>(args: Subset<T, TableAggregateArgs>): Prisma.PrismaPromise<GetTableAggregateType<T>>

    /**
     * Group by Table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TableGroupByArgs['orderBy'] }
        : { orderBy?: TableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTableGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Table model
   */
  readonly fields: TableFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Table.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TableClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    experiment<T extends Table$experimentArgs<ExtArgs> = {}>(args?: Subset<T, Table$experimentArgs<ExtArgs>>): Prisma__ExperimentClient<$Result.GetResult<Prisma.$ExperimentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    rows<T extends Table$rowsArgs<ExtArgs> = {}>(args?: Subset<T, Table$rowsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TableRowPayload<ExtArgs>, T, "findMany"> | Null>
    links<T extends Table$linksArgs<ExtArgs> = {}>(args?: Subset<T, Table$linksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LinkPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Table model
   */ 
  interface TableFieldRefs {
    readonly id: FieldRef<"Table", 'String'>
    readonly name: FieldRef<"Table", 'String'>
    readonly description: FieldRef<"Table", 'String'>
    readonly experimentId: FieldRef<"Table", 'String'>
    readonly columns: FieldRef<"Table", 'String'>
    readonly createdAt: FieldRef<"Table", 'DateTime'>
    readonly updatedAt: FieldRef<"Table", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Table findUnique
   */
  export type TableFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableInclude<ExtArgs> | null
    /**
     * Filter, which Table to fetch.
     */
    where: TableWhereUniqueInput
  }

  /**
   * Table findUniqueOrThrow
   */
  export type TableFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableInclude<ExtArgs> | null
    /**
     * Filter, which Table to fetch.
     */
    where: TableWhereUniqueInput
  }

  /**
   * Table findFirst
   */
  export type TableFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableInclude<ExtArgs> | null
    /**
     * Filter, which Table to fetch.
     */
    where?: TableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tables to fetch.
     */
    orderBy?: TableOrderByWithRelationInput | TableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tables.
     */
    cursor?: TableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tables.
     */
    distinct?: TableScalarFieldEnum | TableScalarFieldEnum[]
  }

  /**
   * Table findFirstOrThrow
   */
  export type TableFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableInclude<ExtArgs> | null
    /**
     * Filter, which Table to fetch.
     */
    where?: TableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tables to fetch.
     */
    orderBy?: TableOrderByWithRelationInput | TableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tables.
     */
    cursor?: TableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tables.
     */
    distinct?: TableScalarFieldEnum | TableScalarFieldEnum[]
  }

  /**
   * Table findMany
   */
  export type TableFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableInclude<ExtArgs> | null
    /**
     * Filter, which Tables to fetch.
     */
    where?: TableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tables to fetch.
     */
    orderBy?: TableOrderByWithRelationInput | TableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tables.
     */
    cursor?: TableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tables.
     */
    skip?: number
    distinct?: TableScalarFieldEnum | TableScalarFieldEnum[]
  }

  /**
   * Table create
   */
  export type TableCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableInclude<ExtArgs> | null
    /**
     * The data needed to create a Table.
     */
    data: XOR<TableCreateInput, TableUncheckedCreateInput>
  }

  /**
   * Table createMany
   */
  export type TableCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tables.
     */
    data: TableCreateManyInput | TableCreateManyInput[]
  }

  /**
   * Table createManyAndReturn
   */
  export type TableCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Tables.
     */
    data: TableCreateManyInput | TableCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Table update
   */
  export type TableUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableInclude<ExtArgs> | null
    /**
     * The data needed to update a Table.
     */
    data: XOR<TableUpdateInput, TableUncheckedUpdateInput>
    /**
     * Choose, which Table to update.
     */
    where: TableWhereUniqueInput
  }

  /**
   * Table updateMany
   */
  export type TableUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tables.
     */
    data: XOR<TableUpdateManyMutationInput, TableUncheckedUpdateManyInput>
    /**
     * Filter which Tables to update
     */
    where?: TableWhereInput
  }

  /**
   * Table upsert
   */
  export type TableUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableInclude<ExtArgs> | null
    /**
     * The filter to search for the Table to update in case it exists.
     */
    where: TableWhereUniqueInput
    /**
     * In case the Table found by the `where` argument doesn't exist, create a new Table with this data.
     */
    create: XOR<TableCreateInput, TableUncheckedCreateInput>
    /**
     * In case the Table was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TableUpdateInput, TableUncheckedUpdateInput>
  }

  /**
   * Table delete
   */
  export type TableDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableInclude<ExtArgs> | null
    /**
     * Filter which Table to delete.
     */
    where: TableWhereUniqueInput
  }

  /**
   * Table deleteMany
   */
  export type TableDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tables to delete
     */
    where?: TableWhereInput
  }

  /**
   * Table.experiment
   */
  export type Table$experimentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experiment
     */
    select?: ExperimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentInclude<ExtArgs> | null
    where?: ExperimentWhereInput
  }

  /**
   * Table.rows
   */
  export type Table$rowsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableRow
     */
    select?: TableRowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableRowInclude<ExtArgs> | null
    where?: TableRowWhereInput
    orderBy?: TableRowOrderByWithRelationInput | TableRowOrderByWithRelationInput[]
    cursor?: TableRowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TableRowScalarFieldEnum | TableRowScalarFieldEnum[]
  }

  /**
   * Table.links
   */
  export type Table$linksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkInclude<ExtArgs> | null
    where?: LinkWhereInput
    orderBy?: LinkOrderByWithRelationInput | LinkOrderByWithRelationInput[]
    cursor?: LinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LinkScalarFieldEnum | LinkScalarFieldEnum[]
  }

  /**
   * Table without action
   */
  export type TableDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableInclude<ExtArgs> | null
  }


  /**
   * Model TableRow
   */

  export type AggregateTableRow = {
    _count: TableRowCountAggregateOutputType | null
    _avg: TableRowAvgAggregateOutputType | null
    _sum: TableRowSumAggregateOutputType | null
    _min: TableRowMinAggregateOutputType | null
    _max: TableRowMaxAggregateOutputType | null
  }

  export type TableRowAvgAggregateOutputType = {
    rowNumber: number | null
  }

  export type TableRowSumAggregateOutputType = {
    rowNumber: number | null
  }

  export type TableRowMinAggregateOutputType = {
    id: string | null
    tableId: string | null
    data: string | null
    rowNumber: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TableRowMaxAggregateOutputType = {
    id: string | null
    tableId: string | null
    data: string | null
    rowNumber: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TableRowCountAggregateOutputType = {
    id: number
    tableId: number
    data: number
    rowNumber: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TableRowAvgAggregateInputType = {
    rowNumber?: true
  }

  export type TableRowSumAggregateInputType = {
    rowNumber?: true
  }

  export type TableRowMinAggregateInputType = {
    id?: true
    tableId?: true
    data?: true
    rowNumber?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TableRowMaxAggregateInputType = {
    id?: true
    tableId?: true
    data?: true
    rowNumber?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TableRowCountAggregateInputType = {
    id?: true
    tableId?: true
    data?: true
    rowNumber?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TableRowAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TableRow to aggregate.
     */
    where?: TableRowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TableRows to fetch.
     */
    orderBy?: TableRowOrderByWithRelationInput | TableRowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TableRowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TableRows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TableRows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TableRows
    **/
    _count?: true | TableRowCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TableRowAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TableRowSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TableRowMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TableRowMaxAggregateInputType
  }

  export type GetTableRowAggregateType<T extends TableRowAggregateArgs> = {
        [P in keyof T & keyof AggregateTableRow]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTableRow[P]>
      : GetScalarType<T[P], AggregateTableRow[P]>
  }




  export type TableRowGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TableRowWhereInput
    orderBy?: TableRowOrderByWithAggregationInput | TableRowOrderByWithAggregationInput[]
    by: TableRowScalarFieldEnum[] | TableRowScalarFieldEnum
    having?: TableRowScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TableRowCountAggregateInputType | true
    _avg?: TableRowAvgAggregateInputType
    _sum?: TableRowSumAggregateInputType
    _min?: TableRowMinAggregateInputType
    _max?: TableRowMaxAggregateInputType
  }

  export type TableRowGroupByOutputType = {
    id: string
    tableId: string
    data: string
    rowNumber: number
    createdAt: Date
    updatedAt: Date
    _count: TableRowCountAggregateOutputType | null
    _avg: TableRowAvgAggregateOutputType | null
    _sum: TableRowSumAggregateOutputType | null
    _min: TableRowMinAggregateOutputType | null
    _max: TableRowMaxAggregateOutputType | null
  }

  type GetTableRowGroupByPayload<T extends TableRowGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TableRowGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TableRowGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TableRowGroupByOutputType[P]>
            : GetScalarType<T[P], TableRowGroupByOutputType[P]>
        }
      >
    >


  export type TableRowSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tableId?: boolean
    data?: boolean
    rowNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    table?: boolean | TableDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tableRow"]>

  export type TableRowSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tableId?: boolean
    data?: boolean
    rowNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    table?: boolean | TableDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tableRow"]>

  export type TableRowSelectScalar = {
    id?: boolean
    tableId?: boolean
    data?: boolean
    rowNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TableRowInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    table?: boolean | TableDefaultArgs<ExtArgs>
  }
  export type TableRowIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    table?: boolean | TableDefaultArgs<ExtArgs>
  }

  export type $TableRowPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TableRow"
    objects: {
      table: Prisma.$TablePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tableId: string
      data: string
      rowNumber: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tableRow"]>
    composites: {}
  }

  type TableRowGetPayload<S extends boolean | null | undefined | TableRowDefaultArgs> = $Result.GetResult<Prisma.$TableRowPayload, S>

  type TableRowCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TableRowFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TableRowCountAggregateInputType | true
    }

  export interface TableRowDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TableRow'], meta: { name: 'TableRow' } }
    /**
     * Find zero or one TableRow that matches the filter.
     * @param {TableRowFindUniqueArgs} args - Arguments to find a TableRow
     * @example
     * // Get one TableRow
     * const tableRow = await prisma.tableRow.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TableRowFindUniqueArgs>(args: SelectSubset<T, TableRowFindUniqueArgs<ExtArgs>>): Prisma__TableRowClient<$Result.GetResult<Prisma.$TableRowPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TableRow that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TableRowFindUniqueOrThrowArgs} args - Arguments to find a TableRow
     * @example
     * // Get one TableRow
     * const tableRow = await prisma.tableRow.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TableRowFindUniqueOrThrowArgs>(args: SelectSubset<T, TableRowFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TableRowClient<$Result.GetResult<Prisma.$TableRowPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TableRow that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableRowFindFirstArgs} args - Arguments to find a TableRow
     * @example
     * // Get one TableRow
     * const tableRow = await prisma.tableRow.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TableRowFindFirstArgs>(args?: SelectSubset<T, TableRowFindFirstArgs<ExtArgs>>): Prisma__TableRowClient<$Result.GetResult<Prisma.$TableRowPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TableRow that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableRowFindFirstOrThrowArgs} args - Arguments to find a TableRow
     * @example
     * // Get one TableRow
     * const tableRow = await prisma.tableRow.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TableRowFindFirstOrThrowArgs>(args?: SelectSubset<T, TableRowFindFirstOrThrowArgs<ExtArgs>>): Prisma__TableRowClient<$Result.GetResult<Prisma.$TableRowPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TableRows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableRowFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TableRows
     * const tableRows = await prisma.tableRow.findMany()
     * 
     * // Get first 10 TableRows
     * const tableRows = await prisma.tableRow.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tableRowWithIdOnly = await prisma.tableRow.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TableRowFindManyArgs>(args?: SelectSubset<T, TableRowFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TableRowPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TableRow.
     * @param {TableRowCreateArgs} args - Arguments to create a TableRow.
     * @example
     * // Create one TableRow
     * const TableRow = await prisma.tableRow.create({
     *   data: {
     *     // ... data to create a TableRow
     *   }
     * })
     * 
     */
    create<T extends TableRowCreateArgs>(args: SelectSubset<T, TableRowCreateArgs<ExtArgs>>): Prisma__TableRowClient<$Result.GetResult<Prisma.$TableRowPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TableRows.
     * @param {TableRowCreateManyArgs} args - Arguments to create many TableRows.
     * @example
     * // Create many TableRows
     * const tableRow = await prisma.tableRow.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TableRowCreateManyArgs>(args?: SelectSubset<T, TableRowCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TableRows and returns the data saved in the database.
     * @param {TableRowCreateManyAndReturnArgs} args - Arguments to create many TableRows.
     * @example
     * // Create many TableRows
     * const tableRow = await prisma.tableRow.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TableRows and only return the `id`
     * const tableRowWithIdOnly = await prisma.tableRow.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TableRowCreateManyAndReturnArgs>(args?: SelectSubset<T, TableRowCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TableRowPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TableRow.
     * @param {TableRowDeleteArgs} args - Arguments to delete one TableRow.
     * @example
     * // Delete one TableRow
     * const TableRow = await prisma.tableRow.delete({
     *   where: {
     *     // ... filter to delete one TableRow
     *   }
     * })
     * 
     */
    delete<T extends TableRowDeleteArgs>(args: SelectSubset<T, TableRowDeleteArgs<ExtArgs>>): Prisma__TableRowClient<$Result.GetResult<Prisma.$TableRowPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TableRow.
     * @param {TableRowUpdateArgs} args - Arguments to update one TableRow.
     * @example
     * // Update one TableRow
     * const tableRow = await prisma.tableRow.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TableRowUpdateArgs>(args: SelectSubset<T, TableRowUpdateArgs<ExtArgs>>): Prisma__TableRowClient<$Result.GetResult<Prisma.$TableRowPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TableRows.
     * @param {TableRowDeleteManyArgs} args - Arguments to filter TableRows to delete.
     * @example
     * // Delete a few TableRows
     * const { count } = await prisma.tableRow.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TableRowDeleteManyArgs>(args?: SelectSubset<T, TableRowDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TableRows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableRowUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TableRows
     * const tableRow = await prisma.tableRow.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TableRowUpdateManyArgs>(args: SelectSubset<T, TableRowUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TableRow.
     * @param {TableRowUpsertArgs} args - Arguments to update or create a TableRow.
     * @example
     * // Update or create a TableRow
     * const tableRow = await prisma.tableRow.upsert({
     *   create: {
     *     // ... data to create a TableRow
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TableRow we want to update
     *   }
     * })
     */
    upsert<T extends TableRowUpsertArgs>(args: SelectSubset<T, TableRowUpsertArgs<ExtArgs>>): Prisma__TableRowClient<$Result.GetResult<Prisma.$TableRowPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TableRows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableRowCountArgs} args - Arguments to filter TableRows to count.
     * @example
     * // Count the number of TableRows
     * const count = await prisma.tableRow.count({
     *   where: {
     *     // ... the filter for the TableRows we want to count
     *   }
     * })
    **/
    count<T extends TableRowCountArgs>(
      args?: Subset<T, TableRowCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TableRowCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TableRow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableRowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TableRowAggregateArgs>(args: Subset<T, TableRowAggregateArgs>): Prisma.PrismaPromise<GetTableRowAggregateType<T>>

    /**
     * Group by TableRow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableRowGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TableRowGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TableRowGroupByArgs['orderBy'] }
        : { orderBy?: TableRowGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TableRowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTableRowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TableRow model
   */
  readonly fields: TableRowFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TableRow.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TableRowClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    table<T extends TableDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TableDefaultArgs<ExtArgs>>): Prisma__TableClient<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TableRow model
   */ 
  interface TableRowFieldRefs {
    readonly id: FieldRef<"TableRow", 'String'>
    readonly tableId: FieldRef<"TableRow", 'String'>
    readonly data: FieldRef<"TableRow", 'String'>
    readonly rowNumber: FieldRef<"TableRow", 'Int'>
    readonly createdAt: FieldRef<"TableRow", 'DateTime'>
    readonly updatedAt: FieldRef<"TableRow", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TableRow findUnique
   */
  export type TableRowFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableRow
     */
    select?: TableRowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableRowInclude<ExtArgs> | null
    /**
     * Filter, which TableRow to fetch.
     */
    where: TableRowWhereUniqueInput
  }

  /**
   * TableRow findUniqueOrThrow
   */
  export type TableRowFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableRow
     */
    select?: TableRowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableRowInclude<ExtArgs> | null
    /**
     * Filter, which TableRow to fetch.
     */
    where: TableRowWhereUniqueInput
  }

  /**
   * TableRow findFirst
   */
  export type TableRowFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableRow
     */
    select?: TableRowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableRowInclude<ExtArgs> | null
    /**
     * Filter, which TableRow to fetch.
     */
    where?: TableRowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TableRows to fetch.
     */
    orderBy?: TableRowOrderByWithRelationInput | TableRowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TableRows.
     */
    cursor?: TableRowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TableRows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TableRows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TableRows.
     */
    distinct?: TableRowScalarFieldEnum | TableRowScalarFieldEnum[]
  }

  /**
   * TableRow findFirstOrThrow
   */
  export type TableRowFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableRow
     */
    select?: TableRowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableRowInclude<ExtArgs> | null
    /**
     * Filter, which TableRow to fetch.
     */
    where?: TableRowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TableRows to fetch.
     */
    orderBy?: TableRowOrderByWithRelationInput | TableRowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TableRows.
     */
    cursor?: TableRowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TableRows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TableRows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TableRows.
     */
    distinct?: TableRowScalarFieldEnum | TableRowScalarFieldEnum[]
  }

  /**
   * TableRow findMany
   */
  export type TableRowFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableRow
     */
    select?: TableRowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableRowInclude<ExtArgs> | null
    /**
     * Filter, which TableRows to fetch.
     */
    where?: TableRowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TableRows to fetch.
     */
    orderBy?: TableRowOrderByWithRelationInput | TableRowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TableRows.
     */
    cursor?: TableRowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TableRows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TableRows.
     */
    skip?: number
    distinct?: TableRowScalarFieldEnum | TableRowScalarFieldEnum[]
  }

  /**
   * TableRow create
   */
  export type TableRowCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableRow
     */
    select?: TableRowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableRowInclude<ExtArgs> | null
    /**
     * The data needed to create a TableRow.
     */
    data: XOR<TableRowCreateInput, TableRowUncheckedCreateInput>
  }

  /**
   * TableRow createMany
   */
  export type TableRowCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TableRows.
     */
    data: TableRowCreateManyInput | TableRowCreateManyInput[]
  }

  /**
   * TableRow createManyAndReturn
   */
  export type TableRowCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableRow
     */
    select?: TableRowSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TableRows.
     */
    data: TableRowCreateManyInput | TableRowCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableRowIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TableRow update
   */
  export type TableRowUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableRow
     */
    select?: TableRowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableRowInclude<ExtArgs> | null
    /**
     * The data needed to update a TableRow.
     */
    data: XOR<TableRowUpdateInput, TableRowUncheckedUpdateInput>
    /**
     * Choose, which TableRow to update.
     */
    where: TableRowWhereUniqueInput
  }

  /**
   * TableRow updateMany
   */
  export type TableRowUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TableRows.
     */
    data: XOR<TableRowUpdateManyMutationInput, TableRowUncheckedUpdateManyInput>
    /**
     * Filter which TableRows to update
     */
    where?: TableRowWhereInput
  }

  /**
   * TableRow upsert
   */
  export type TableRowUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableRow
     */
    select?: TableRowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableRowInclude<ExtArgs> | null
    /**
     * The filter to search for the TableRow to update in case it exists.
     */
    where: TableRowWhereUniqueInput
    /**
     * In case the TableRow found by the `where` argument doesn't exist, create a new TableRow with this data.
     */
    create: XOR<TableRowCreateInput, TableRowUncheckedCreateInput>
    /**
     * In case the TableRow was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TableRowUpdateInput, TableRowUncheckedUpdateInput>
  }

  /**
   * TableRow delete
   */
  export type TableRowDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableRow
     */
    select?: TableRowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableRowInclude<ExtArgs> | null
    /**
     * Filter which TableRow to delete.
     */
    where: TableRowWhereUniqueInput
  }

  /**
   * TableRow deleteMany
   */
  export type TableRowDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TableRows to delete
     */
    where?: TableRowWhereInput
  }

  /**
   * TableRow without action
   */
  export type TableRowDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableRow
     */
    select?: TableRowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableRowInclude<ExtArgs> | null
  }


  /**
   * Model Protocol
   */

  export type AggregateProtocol = {
    _count: ProtocolCountAggregateOutputType | null
    _avg: ProtocolAvgAggregateOutputType | null
    _sum: ProtocolSumAggregateOutputType | null
    _min: ProtocolMinAggregateOutputType | null
    _max: ProtocolMaxAggregateOutputType | null
  }

  export type ProtocolAvgAggregateOutputType = {
    successRate: number | null
  }

  export type ProtocolSumAggregateOutputType = {
    successRate: number | null
  }

  export type ProtocolMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    category: string | null
    version: string | null
    steps: string | null
    equipment: string | null
    reagents: string | null
    safetyNotes: string | null
    expectedDuration: string | null
    difficulty: string | null
    successRate: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProtocolMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    category: string | null
    version: string | null
    steps: string | null
    equipment: string | null
    reagents: string | null
    safetyNotes: string | null
    expectedDuration: string | null
    difficulty: string | null
    successRate: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProtocolCountAggregateOutputType = {
    id: number
    name: number
    description: number
    category: number
    version: number
    steps: number
    equipment: number
    reagents: number
    safetyNotes: number
    expectedDuration: number
    difficulty: number
    successRate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProtocolAvgAggregateInputType = {
    successRate?: true
  }

  export type ProtocolSumAggregateInputType = {
    successRate?: true
  }

  export type ProtocolMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    version?: true
    steps?: true
    equipment?: true
    reagents?: true
    safetyNotes?: true
    expectedDuration?: true
    difficulty?: true
    successRate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProtocolMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    version?: true
    steps?: true
    equipment?: true
    reagents?: true
    safetyNotes?: true
    expectedDuration?: true
    difficulty?: true
    successRate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProtocolCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    version?: true
    steps?: true
    equipment?: true
    reagents?: true
    safetyNotes?: true
    expectedDuration?: true
    difficulty?: true
    successRate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProtocolAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Protocol to aggregate.
     */
    where?: ProtocolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Protocols to fetch.
     */
    orderBy?: ProtocolOrderByWithRelationInput | ProtocolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProtocolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Protocols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Protocols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Protocols
    **/
    _count?: true | ProtocolCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProtocolAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProtocolSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProtocolMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProtocolMaxAggregateInputType
  }

  export type GetProtocolAggregateType<T extends ProtocolAggregateArgs> = {
        [P in keyof T & keyof AggregateProtocol]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProtocol[P]>
      : GetScalarType<T[P], AggregateProtocol[P]>
  }




  export type ProtocolGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProtocolWhereInput
    orderBy?: ProtocolOrderByWithAggregationInput | ProtocolOrderByWithAggregationInput[]
    by: ProtocolScalarFieldEnum[] | ProtocolScalarFieldEnum
    having?: ProtocolScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProtocolCountAggregateInputType | true
    _avg?: ProtocolAvgAggregateInputType
    _sum?: ProtocolSumAggregateInputType
    _min?: ProtocolMinAggregateInputType
    _max?: ProtocolMaxAggregateInputType
  }

  export type ProtocolGroupByOutputType = {
    id: string
    name: string
    description: string | null
    category: string
    version: string
    steps: string
    equipment: string | null
    reagents: string | null
    safetyNotes: string | null
    expectedDuration: string | null
    difficulty: string | null
    successRate: number | null
    createdAt: Date
    updatedAt: Date
    _count: ProtocolCountAggregateOutputType | null
    _avg: ProtocolAvgAggregateOutputType | null
    _sum: ProtocolSumAggregateOutputType | null
    _min: ProtocolMinAggregateOutputType | null
    _max: ProtocolMaxAggregateOutputType | null
  }

  type GetProtocolGroupByPayload<T extends ProtocolGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProtocolGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProtocolGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProtocolGroupByOutputType[P]>
            : GetScalarType<T[P], ProtocolGroupByOutputType[P]>
        }
      >
    >


  export type ProtocolSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    version?: boolean
    steps?: boolean
    equipment?: boolean
    reagents?: boolean
    safetyNotes?: boolean
    expectedDuration?: boolean
    difficulty?: boolean
    successRate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    executions?: boolean | Protocol$executionsArgs<ExtArgs>
    links?: boolean | Protocol$linksArgs<ExtArgs>
    _count?: boolean | ProtocolCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["protocol"]>

  export type ProtocolSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    version?: boolean
    steps?: boolean
    equipment?: boolean
    reagents?: boolean
    safetyNotes?: boolean
    expectedDuration?: boolean
    difficulty?: boolean
    successRate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["protocol"]>

  export type ProtocolSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    version?: boolean
    steps?: boolean
    equipment?: boolean
    reagents?: boolean
    safetyNotes?: boolean
    expectedDuration?: boolean
    difficulty?: boolean
    successRate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProtocolInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    executions?: boolean | Protocol$executionsArgs<ExtArgs>
    links?: boolean | Protocol$linksArgs<ExtArgs>
    _count?: boolean | ProtocolCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProtocolIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProtocolPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Protocol"
    objects: {
      executions: Prisma.$ProtocolExecutionPayload<ExtArgs>[]
      links: Prisma.$LinkPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      category: string
      version: string
      steps: string
      equipment: string | null
      reagents: string | null
      safetyNotes: string | null
      expectedDuration: string | null
      difficulty: string | null
      successRate: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["protocol"]>
    composites: {}
  }

  type ProtocolGetPayload<S extends boolean | null | undefined | ProtocolDefaultArgs> = $Result.GetResult<Prisma.$ProtocolPayload, S>

  type ProtocolCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProtocolFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProtocolCountAggregateInputType | true
    }

  export interface ProtocolDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Protocol'], meta: { name: 'Protocol' } }
    /**
     * Find zero or one Protocol that matches the filter.
     * @param {ProtocolFindUniqueArgs} args - Arguments to find a Protocol
     * @example
     * // Get one Protocol
     * const protocol = await prisma.protocol.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProtocolFindUniqueArgs>(args: SelectSubset<T, ProtocolFindUniqueArgs<ExtArgs>>): Prisma__ProtocolClient<$Result.GetResult<Prisma.$ProtocolPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Protocol that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProtocolFindUniqueOrThrowArgs} args - Arguments to find a Protocol
     * @example
     * // Get one Protocol
     * const protocol = await prisma.protocol.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProtocolFindUniqueOrThrowArgs>(args: SelectSubset<T, ProtocolFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProtocolClient<$Result.GetResult<Prisma.$ProtocolPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Protocol that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProtocolFindFirstArgs} args - Arguments to find a Protocol
     * @example
     * // Get one Protocol
     * const protocol = await prisma.protocol.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProtocolFindFirstArgs>(args?: SelectSubset<T, ProtocolFindFirstArgs<ExtArgs>>): Prisma__ProtocolClient<$Result.GetResult<Prisma.$ProtocolPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Protocol that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProtocolFindFirstOrThrowArgs} args - Arguments to find a Protocol
     * @example
     * // Get one Protocol
     * const protocol = await prisma.protocol.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProtocolFindFirstOrThrowArgs>(args?: SelectSubset<T, ProtocolFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProtocolClient<$Result.GetResult<Prisma.$ProtocolPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Protocols that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProtocolFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Protocols
     * const protocols = await prisma.protocol.findMany()
     * 
     * // Get first 10 Protocols
     * const protocols = await prisma.protocol.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const protocolWithIdOnly = await prisma.protocol.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProtocolFindManyArgs>(args?: SelectSubset<T, ProtocolFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProtocolPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Protocol.
     * @param {ProtocolCreateArgs} args - Arguments to create a Protocol.
     * @example
     * // Create one Protocol
     * const Protocol = await prisma.protocol.create({
     *   data: {
     *     // ... data to create a Protocol
     *   }
     * })
     * 
     */
    create<T extends ProtocolCreateArgs>(args: SelectSubset<T, ProtocolCreateArgs<ExtArgs>>): Prisma__ProtocolClient<$Result.GetResult<Prisma.$ProtocolPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Protocols.
     * @param {ProtocolCreateManyArgs} args - Arguments to create many Protocols.
     * @example
     * // Create many Protocols
     * const protocol = await prisma.protocol.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProtocolCreateManyArgs>(args?: SelectSubset<T, ProtocolCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Protocols and returns the data saved in the database.
     * @param {ProtocolCreateManyAndReturnArgs} args - Arguments to create many Protocols.
     * @example
     * // Create many Protocols
     * const protocol = await prisma.protocol.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Protocols and only return the `id`
     * const protocolWithIdOnly = await prisma.protocol.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProtocolCreateManyAndReturnArgs>(args?: SelectSubset<T, ProtocolCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProtocolPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Protocol.
     * @param {ProtocolDeleteArgs} args - Arguments to delete one Protocol.
     * @example
     * // Delete one Protocol
     * const Protocol = await prisma.protocol.delete({
     *   where: {
     *     // ... filter to delete one Protocol
     *   }
     * })
     * 
     */
    delete<T extends ProtocolDeleteArgs>(args: SelectSubset<T, ProtocolDeleteArgs<ExtArgs>>): Prisma__ProtocolClient<$Result.GetResult<Prisma.$ProtocolPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Protocol.
     * @param {ProtocolUpdateArgs} args - Arguments to update one Protocol.
     * @example
     * // Update one Protocol
     * const protocol = await prisma.protocol.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProtocolUpdateArgs>(args: SelectSubset<T, ProtocolUpdateArgs<ExtArgs>>): Prisma__ProtocolClient<$Result.GetResult<Prisma.$ProtocolPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Protocols.
     * @param {ProtocolDeleteManyArgs} args - Arguments to filter Protocols to delete.
     * @example
     * // Delete a few Protocols
     * const { count } = await prisma.protocol.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProtocolDeleteManyArgs>(args?: SelectSubset<T, ProtocolDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Protocols.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProtocolUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Protocols
     * const protocol = await prisma.protocol.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProtocolUpdateManyArgs>(args: SelectSubset<T, ProtocolUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Protocol.
     * @param {ProtocolUpsertArgs} args - Arguments to update or create a Protocol.
     * @example
     * // Update or create a Protocol
     * const protocol = await prisma.protocol.upsert({
     *   create: {
     *     // ... data to create a Protocol
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Protocol we want to update
     *   }
     * })
     */
    upsert<T extends ProtocolUpsertArgs>(args: SelectSubset<T, ProtocolUpsertArgs<ExtArgs>>): Prisma__ProtocolClient<$Result.GetResult<Prisma.$ProtocolPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Protocols.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProtocolCountArgs} args - Arguments to filter Protocols to count.
     * @example
     * // Count the number of Protocols
     * const count = await prisma.protocol.count({
     *   where: {
     *     // ... the filter for the Protocols we want to count
     *   }
     * })
    **/
    count<T extends ProtocolCountArgs>(
      args?: Subset<T, ProtocolCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProtocolCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Protocol.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProtocolAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProtocolAggregateArgs>(args: Subset<T, ProtocolAggregateArgs>): Prisma.PrismaPromise<GetProtocolAggregateType<T>>

    /**
     * Group by Protocol.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProtocolGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProtocolGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProtocolGroupByArgs['orderBy'] }
        : { orderBy?: ProtocolGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProtocolGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProtocolGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Protocol model
   */
  readonly fields: ProtocolFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Protocol.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProtocolClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    executions<T extends Protocol$executionsArgs<ExtArgs> = {}>(args?: Subset<T, Protocol$executionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProtocolExecutionPayload<ExtArgs>, T, "findMany"> | Null>
    links<T extends Protocol$linksArgs<ExtArgs> = {}>(args?: Subset<T, Protocol$linksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LinkPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Protocol model
   */ 
  interface ProtocolFieldRefs {
    readonly id: FieldRef<"Protocol", 'String'>
    readonly name: FieldRef<"Protocol", 'String'>
    readonly description: FieldRef<"Protocol", 'String'>
    readonly category: FieldRef<"Protocol", 'String'>
    readonly version: FieldRef<"Protocol", 'String'>
    readonly steps: FieldRef<"Protocol", 'String'>
    readonly equipment: FieldRef<"Protocol", 'String'>
    readonly reagents: FieldRef<"Protocol", 'String'>
    readonly safetyNotes: FieldRef<"Protocol", 'String'>
    readonly expectedDuration: FieldRef<"Protocol", 'String'>
    readonly difficulty: FieldRef<"Protocol", 'String'>
    readonly successRate: FieldRef<"Protocol", 'Float'>
    readonly createdAt: FieldRef<"Protocol", 'DateTime'>
    readonly updatedAt: FieldRef<"Protocol", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Protocol findUnique
   */
  export type ProtocolFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Protocol
     */
    select?: ProtocolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProtocolInclude<ExtArgs> | null
    /**
     * Filter, which Protocol to fetch.
     */
    where: ProtocolWhereUniqueInput
  }

  /**
   * Protocol findUniqueOrThrow
   */
  export type ProtocolFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Protocol
     */
    select?: ProtocolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProtocolInclude<ExtArgs> | null
    /**
     * Filter, which Protocol to fetch.
     */
    where: ProtocolWhereUniqueInput
  }

  /**
   * Protocol findFirst
   */
  export type ProtocolFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Protocol
     */
    select?: ProtocolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProtocolInclude<ExtArgs> | null
    /**
     * Filter, which Protocol to fetch.
     */
    where?: ProtocolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Protocols to fetch.
     */
    orderBy?: ProtocolOrderByWithRelationInput | ProtocolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Protocols.
     */
    cursor?: ProtocolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Protocols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Protocols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Protocols.
     */
    distinct?: ProtocolScalarFieldEnum | ProtocolScalarFieldEnum[]
  }

  /**
   * Protocol findFirstOrThrow
   */
  export type ProtocolFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Protocol
     */
    select?: ProtocolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProtocolInclude<ExtArgs> | null
    /**
     * Filter, which Protocol to fetch.
     */
    where?: ProtocolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Protocols to fetch.
     */
    orderBy?: ProtocolOrderByWithRelationInput | ProtocolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Protocols.
     */
    cursor?: ProtocolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Protocols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Protocols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Protocols.
     */
    distinct?: ProtocolScalarFieldEnum | ProtocolScalarFieldEnum[]
  }

  /**
   * Protocol findMany
   */
  export type ProtocolFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Protocol
     */
    select?: ProtocolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProtocolInclude<ExtArgs> | null
    /**
     * Filter, which Protocols to fetch.
     */
    where?: ProtocolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Protocols to fetch.
     */
    orderBy?: ProtocolOrderByWithRelationInput | ProtocolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Protocols.
     */
    cursor?: ProtocolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Protocols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Protocols.
     */
    skip?: number
    distinct?: ProtocolScalarFieldEnum | ProtocolScalarFieldEnum[]
  }

  /**
   * Protocol create
   */
  export type ProtocolCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Protocol
     */
    select?: ProtocolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProtocolInclude<ExtArgs> | null
    /**
     * The data needed to create a Protocol.
     */
    data: XOR<ProtocolCreateInput, ProtocolUncheckedCreateInput>
  }

  /**
   * Protocol createMany
   */
  export type ProtocolCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Protocols.
     */
    data: ProtocolCreateManyInput | ProtocolCreateManyInput[]
  }

  /**
   * Protocol createManyAndReturn
   */
  export type ProtocolCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Protocol
     */
    select?: ProtocolSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Protocols.
     */
    data: ProtocolCreateManyInput | ProtocolCreateManyInput[]
  }

  /**
   * Protocol update
   */
  export type ProtocolUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Protocol
     */
    select?: ProtocolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProtocolInclude<ExtArgs> | null
    /**
     * The data needed to update a Protocol.
     */
    data: XOR<ProtocolUpdateInput, ProtocolUncheckedUpdateInput>
    /**
     * Choose, which Protocol to update.
     */
    where: ProtocolWhereUniqueInput
  }

  /**
   * Protocol updateMany
   */
  export type ProtocolUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Protocols.
     */
    data: XOR<ProtocolUpdateManyMutationInput, ProtocolUncheckedUpdateManyInput>
    /**
     * Filter which Protocols to update
     */
    where?: ProtocolWhereInput
  }

  /**
   * Protocol upsert
   */
  export type ProtocolUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Protocol
     */
    select?: ProtocolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProtocolInclude<ExtArgs> | null
    /**
     * The filter to search for the Protocol to update in case it exists.
     */
    where: ProtocolWhereUniqueInput
    /**
     * In case the Protocol found by the `where` argument doesn't exist, create a new Protocol with this data.
     */
    create: XOR<ProtocolCreateInput, ProtocolUncheckedCreateInput>
    /**
     * In case the Protocol was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProtocolUpdateInput, ProtocolUncheckedUpdateInput>
  }

  /**
   * Protocol delete
   */
  export type ProtocolDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Protocol
     */
    select?: ProtocolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProtocolInclude<ExtArgs> | null
    /**
     * Filter which Protocol to delete.
     */
    where: ProtocolWhereUniqueInput
  }

  /**
   * Protocol deleteMany
   */
  export type ProtocolDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Protocols to delete
     */
    where?: ProtocolWhereInput
  }

  /**
   * Protocol.executions
   */
  export type Protocol$executionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProtocolExecution
     */
    select?: ProtocolExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProtocolExecutionInclude<ExtArgs> | null
    where?: ProtocolExecutionWhereInput
    orderBy?: ProtocolExecutionOrderByWithRelationInput | ProtocolExecutionOrderByWithRelationInput[]
    cursor?: ProtocolExecutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProtocolExecutionScalarFieldEnum | ProtocolExecutionScalarFieldEnum[]
  }

  /**
   * Protocol.links
   */
  export type Protocol$linksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkInclude<ExtArgs> | null
    where?: LinkWhereInput
    orderBy?: LinkOrderByWithRelationInput | LinkOrderByWithRelationInput[]
    cursor?: LinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LinkScalarFieldEnum | LinkScalarFieldEnum[]
  }

  /**
   * Protocol without action
   */
  export type ProtocolDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Protocol
     */
    select?: ProtocolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProtocolInclude<ExtArgs> | null
  }


  /**
   * Model ProtocolExecution
   */

  export type AggregateProtocolExecution = {
    _count: ProtocolExecutionCountAggregateOutputType | null
    _min: ProtocolExecutionMinAggregateOutputType | null
    _max: ProtocolExecutionMaxAggregateOutputType | null
  }

  export type ProtocolExecutionMinAggregateOutputType = {
    id: string | null
    protocolId: string | null
    experimentId: string | null
    status: string | null
    startDate: Date | null
    endDate: Date | null
    notes: string | null
    modifications: string | null
    results: string | null
    issues: string | null
    nextSteps: string | null
    executedBy: string | null
    completedSteps: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProtocolExecutionMaxAggregateOutputType = {
    id: string | null
    protocolId: string | null
    experimentId: string | null
    status: string | null
    startDate: Date | null
    endDate: Date | null
    notes: string | null
    modifications: string | null
    results: string | null
    issues: string | null
    nextSteps: string | null
    executedBy: string | null
    completedSteps: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProtocolExecutionCountAggregateOutputType = {
    id: number
    protocolId: number
    experimentId: number
    status: number
    startDate: number
    endDate: number
    notes: number
    modifications: number
    results: number
    issues: number
    nextSteps: number
    executedBy: number
    completedSteps: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProtocolExecutionMinAggregateInputType = {
    id?: true
    protocolId?: true
    experimentId?: true
    status?: true
    startDate?: true
    endDate?: true
    notes?: true
    modifications?: true
    results?: true
    issues?: true
    nextSteps?: true
    executedBy?: true
    completedSteps?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProtocolExecutionMaxAggregateInputType = {
    id?: true
    protocolId?: true
    experimentId?: true
    status?: true
    startDate?: true
    endDate?: true
    notes?: true
    modifications?: true
    results?: true
    issues?: true
    nextSteps?: true
    executedBy?: true
    completedSteps?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProtocolExecutionCountAggregateInputType = {
    id?: true
    protocolId?: true
    experimentId?: true
    status?: true
    startDate?: true
    endDate?: true
    notes?: true
    modifications?: true
    results?: true
    issues?: true
    nextSteps?: true
    executedBy?: true
    completedSteps?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProtocolExecutionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProtocolExecution to aggregate.
     */
    where?: ProtocolExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProtocolExecutions to fetch.
     */
    orderBy?: ProtocolExecutionOrderByWithRelationInput | ProtocolExecutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProtocolExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProtocolExecutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProtocolExecutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProtocolExecutions
    **/
    _count?: true | ProtocolExecutionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProtocolExecutionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProtocolExecutionMaxAggregateInputType
  }

  export type GetProtocolExecutionAggregateType<T extends ProtocolExecutionAggregateArgs> = {
        [P in keyof T & keyof AggregateProtocolExecution]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProtocolExecution[P]>
      : GetScalarType<T[P], AggregateProtocolExecution[P]>
  }




  export type ProtocolExecutionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProtocolExecutionWhereInput
    orderBy?: ProtocolExecutionOrderByWithAggregationInput | ProtocolExecutionOrderByWithAggregationInput[]
    by: ProtocolExecutionScalarFieldEnum[] | ProtocolExecutionScalarFieldEnum
    having?: ProtocolExecutionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProtocolExecutionCountAggregateInputType | true
    _min?: ProtocolExecutionMinAggregateInputType
    _max?: ProtocolExecutionMaxAggregateInputType
  }

  export type ProtocolExecutionGroupByOutputType = {
    id: string
    protocolId: string
    experimentId: string | null
    status: string
    startDate: Date | null
    endDate: Date | null
    notes: string | null
    modifications: string | null
    results: string | null
    issues: string | null
    nextSteps: string | null
    executedBy: string | null
    completedSteps: string | null
    createdAt: Date
    updatedAt: Date
    _count: ProtocolExecutionCountAggregateOutputType | null
    _min: ProtocolExecutionMinAggregateOutputType | null
    _max: ProtocolExecutionMaxAggregateOutputType | null
  }

  type GetProtocolExecutionGroupByPayload<T extends ProtocolExecutionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProtocolExecutionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProtocolExecutionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProtocolExecutionGroupByOutputType[P]>
            : GetScalarType<T[P], ProtocolExecutionGroupByOutputType[P]>
        }
      >
    >


  export type ProtocolExecutionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    protocolId?: boolean
    experimentId?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    notes?: boolean
    modifications?: boolean
    results?: boolean
    issues?: boolean
    nextSteps?: boolean
    executedBy?: boolean
    completedSteps?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    protocol?: boolean | ProtocolDefaultArgs<ExtArgs>
    experiment?: boolean | ProtocolExecution$experimentArgs<ExtArgs>
    links?: boolean | ProtocolExecution$linksArgs<ExtArgs>
    _count?: boolean | ProtocolExecutionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["protocolExecution"]>

  export type ProtocolExecutionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    protocolId?: boolean
    experimentId?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    notes?: boolean
    modifications?: boolean
    results?: boolean
    issues?: boolean
    nextSteps?: boolean
    executedBy?: boolean
    completedSteps?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    protocol?: boolean | ProtocolDefaultArgs<ExtArgs>
    experiment?: boolean | ProtocolExecution$experimentArgs<ExtArgs>
  }, ExtArgs["result"]["protocolExecution"]>

  export type ProtocolExecutionSelectScalar = {
    id?: boolean
    protocolId?: boolean
    experimentId?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    notes?: boolean
    modifications?: boolean
    results?: boolean
    issues?: boolean
    nextSteps?: boolean
    executedBy?: boolean
    completedSteps?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProtocolExecutionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    protocol?: boolean | ProtocolDefaultArgs<ExtArgs>
    experiment?: boolean | ProtocolExecution$experimentArgs<ExtArgs>
    links?: boolean | ProtocolExecution$linksArgs<ExtArgs>
    _count?: boolean | ProtocolExecutionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProtocolExecutionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    protocol?: boolean | ProtocolDefaultArgs<ExtArgs>
    experiment?: boolean | ProtocolExecution$experimentArgs<ExtArgs>
  }

  export type $ProtocolExecutionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProtocolExecution"
    objects: {
      protocol: Prisma.$ProtocolPayload<ExtArgs>
      experiment: Prisma.$ExperimentPayload<ExtArgs> | null
      links: Prisma.$LinkPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      protocolId: string
      experimentId: string | null
      status: string
      startDate: Date | null
      endDate: Date | null
      notes: string | null
      modifications: string | null
      results: string | null
      issues: string | null
      nextSteps: string | null
      executedBy: string | null
      completedSteps: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["protocolExecution"]>
    composites: {}
  }

  type ProtocolExecutionGetPayload<S extends boolean | null | undefined | ProtocolExecutionDefaultArgs> = $Result.GetResult<Prisma.$ProtocolExecutionPayload, S>

  type ProtocolExecutionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProtocolExecutionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProtocolExecutionCountAggregateInputType | true
    }

  export interface ProtocolExecutionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProtocolExecution'], meta: { name: 'ProtocolExecution' } }
    /**
     * Find zero or one ProtocolExecution that matches the filter.
     * @param {ProtocolExecutionFindUniqueArgs} args - Arguments to find a ProtocolExecution
     * @example
     * // Get one ProtocolExecution
     * const protocolExecution = await prisma.protocolExecution.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProtocolExecutionFindUniqueArgs>(args: SelectSubset<T, ProtocolExecutionFindUniqueArgs<ExtArgs>>): Prisma__ProtocolExecutionClient<$Result.GetResult<Prisma.$ProtocolExecutionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProtocolExecution that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProtocolExecutionFindUniqueOrThrowArgs} args - Arguments to find a ProtocolExecution
     * @example
     * // Get one ProtocolExecution
     * const protocolExecution = await prisma.protocolExecution.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProtocolExecutionFindUniqueOrThrowArgs>(args: SelectSubset<T, ProtocolExecutionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProtocolExecutionClient<$Result.GetResult<Prisma.$ProtocolExecutionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProtocolExecution that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProtocolExecutionFindFirstArgs} args - Arguments to find a ProtocolExecution
     * @example
     * // Get one ProtocolExecution
     * const protocolExecution = await prisma.protocolExecution.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProtocolExecutionFindFirstArgs>(args?: SelectSubset<T, ProtocolExecutionFindFirstArgs<ExtArgs>>): Prisma__ProtocolExecutionClient<$Result.GetResult<Prisma.$ProtocolExecutionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProtocolExecution that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProtocolExecutionFindFirstOrThrowArgs} args - Arguments to find a ProtocolExecution
     * @example
     * // Get one ProtocolExecution
     * const protocolExecution = await prisma.protocolExecution.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProtocolExecutionFindFirstOrThrowArgs>(args?: SelectSubset<T, ProtocolExecutionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProtocolExecutionClient<$Result.GetResult<Prisma.$ProtocolExecutionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProtocolExecutions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProtocolExecutionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProtocolExecutions
     * const protocolExecutions = await prisma.protocolExecution.findMany()
     * 
     * // Get first 10 ProtocolExecutions
     * const protocolExecutions = await prisma.protocolExecution.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const protocolExecutionWithIdOnly = await prisma.protocolExecution.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProtocolExecutionFindManyArgs>(args?: SelectSubset<T, ProtocolExecutionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProtocolExecutionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProtocolExecution.
     * @param {ProtocolExecutionCreateArgs} args - Arguments to create a ProtocolExecution.
     * @example
     * // Create one ProtocolExecution
     * const ProtocolExecution = await prisma.protocolExecution.create({
     *   data: {
     *     // ... data to create a ProtocolExecution
     *   }
     * })
     * 
     */
    create<T extends ProtocolExecutionCreateArgs>(args: SelectSubset<T, ProtocolExecutionCreateArgs<ExtArgs>>): Prisma__ProtocolExecutionClient<$Result.GetResult<Prisma.$ProtocolExecutionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProtocolExecutions.
     * @param {ProtocolExecutionCreateManyArgs} args - Arguments to create many ProtocolExecutions.
     * @example
     * // Create many ProtocolExecutions
     * const protocolExecution = await prisma.protocolExecution.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProtocolExecutionCreateManyArgs>(args?: SelectSubset<T, ProtocolExecutionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProtocolExecutions and returns the data saved in the database.
     * @param {ProtocolExecutionCreateManyAndReturnArgs} args - Arguments to create many ProtocolExecutions.
     * @example
     * // Create many ProtocolExecutions
     * const protocolExecution = await prisma.protocolExecution.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProtocolExecutions and only return the `id`
     * const protocolExecutionWithIdOnly = await prisma.protocolExecution.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProtocolExecutionCreateManyAndReturnArgs>(args?: SelectSubset<T, ProtocolExecutionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProtocolExecutionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ProtocolExecution.
     * @param {ProtocolExecutionDeleteArgs} args - Arguments to delete one ProtocolExecution.
     * @example
     * // Delete one ProtocolExecution
     * const ProtocolExecution = await prisma.protocolExecution.delete({
     *   where: {
     *     // ... filter to delete one ProtocolExecution
     *   }
     * })
     * 
     */
    delete<T extends ProtocolExecutionDeleteArgs>(args: SelectSubset<T, ProtocolExecutionDeleteArgs<ExtArgs>>): Prisma__ProtocolExecutionClient<$Result.GetResult<Prisma.$ProtocolExecutionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProtocolExecution.
     * @param {ProtocolExecutionUpdateArgs} args - Arguments to update one ProtocolExecution.
     * @example
     * // Update one ProtocolExecution
     * const protocolExecution = await prisma.protocolExecution.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProtocolExecutionUpdateArgs>(args: SelectSubset<T, ProtocolExecutionUpdateArgs<ExtArgs>>): Prisma__ProtocolExecutionClient<$Result.GetResult<Prisma.$ProtocolExecutionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProtocolExecutions.
     * @param {ProtocolExecutionDeleteManyArgs} args - Arguments to filter ProtocolExecutions to delete.
     * @example
     * // Delete a few ProtocolExecutions
     * const { count } = await prisma.protocolExecution.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProtocolExecutionDeleteManyArgs>(args?: SelectSubset<T, ProtocolExecutionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProtocolExecutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProtocolExecutionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProtocolExecutions
     * const protocolExecution = await prisma.protocolExecution.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProtocolExecutionUpdateManyArgs>(args: SelectSubset<T, ProtocolExecutionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProtocolExecution.
     * @param {ProtocolExecutionUpsertArgs} args - Arguments to update or create a ProtocolExecution.
     * @example
     * // Update or create a ProtocolExecution
     * const protocolExecution = await prisma.protocolExecution.upsert({
     *   create: {
     *     // ... data to create a ProtocolExecution
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProtocolExecution we want to update
     *   }
     * })
     */
    upsert<T extends ProtocolExecutionUpsertArgs>(args: SelectSubset<T, ProtocolExecutionUpsertArgs<ExtArgs>>): Prisma__ProtocolExecutionClient<$Result.GetResult<Prisma.$ProtocolExecutionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProtocolExecutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProtocolExecutionCountArgs} args - Arguments to filter ProtocolExecutions to count.
     * @example
     * // Count the number of ProtocolExecutions
     * const count = await prisma.protocolExecution.count({
     *   where: {
     *     // ... the filter for the ProtocolExecutions we want to count
     *   }
     * })
    **/
    count<T extends ProtocolExecutionCountArgs>(
      args?: Subset<T, ProtocolExecutionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProtocolExecutionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProtocolExecution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProtocolExecutionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProtocolExecutionAggregateArgs>(args: Subset<T, ProtocolExecutionAggregateArgs>): Prisma.PrismaPromise<GetProtocolExecutionAggregateType<T>>

    /**
     * Group by ProtocolExecution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProtocolExecutionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProtocolExecutionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProtocolExecutionGroupByArgs['orderBy'] }
        : { orderBy?: ProtocolExecutionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProtocolExecutionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProtocolExecutionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProtocolExecution model
   */
  readonly fields: ProtocolExecutionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProtocolExecution.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProtocolExecutionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    protocol<T extends ProtocolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProtocolDefaultArgs<ExtArgs>>): Prisma__ProtocolClient<$Result.GetResult<Prisma.$ProtocolPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    experiment<T extends ProtocolExecution$experimentArgs<ExtArgs> = {}>(args?: Subset<T, ProtocolExecution$experimentArgs<ExtArgs>>): Prisma__ExperimentClient<$Result.GetResult<Prisma.$ExperimentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    links<T extends ProtocolExecution$linksArgs<ExtArgs> = {}>(args?: Subset<T, ProtocolExecution$linksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LinkPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProtocolExecution model
   */ 
  interface ProtocolExecutionFieldRefs {
    readonly id: FieldRef<"ProtocolExecution", 'String'>
    readonly protocolId: FieldRef<"ProtocolExecution", 'String'>
    readonly experimentId: FieldRef<"ProtocolExecution", 'String'>
    readonly status: FieldRef<"ProtocolExecution", 'String'>
    readonly startDate: FieldRef<"ProtocolExecution", 'DateTime'>
    readonly endDate: FieldRef<"ProtocolExecution", 'DateTime'>
    readonly notes: FieldRef<"ProtocolExecution", 'String'>
    readonly modifications: FieldRef<"ProtocolExecution", 'String'>
    readonly results: FieldRef<"ProtocolExecution", 'String'>
    readonly issues: FieldRef<"ProtocolExecution", 'String'>
    readonly nextSteps: FieldRef<"ProtocolExecution", 'String'>
    readonly executedBy: FieldRef<"ProtocolExecution", 'String'>
    readonly completedSteps: FieldRef<"ProtocolExecution", 'String'>
    readonly createdAt: FieldRef<"ProtocolExecution", 'DateTime'>
    readonly updatedAt: FieldRef<"ProtocolExecution", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProtocolExecution findUnique
   */
  export type ProtocolExecutionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProtocolExecution
     */
    select?: ProtocolExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProtocolExecutionInclude<ExtArgs> | null
    /**
     * Filter, which ProtocolExecution to fetch.
     */
    where: ProtocolExecutionWhereUniqueInput
  }

  /**
   * ProtocolExecution findUniqueOrThrow
   */
  export type ProtocolExecutionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProtocolExecution
     */
    select?: ProtocolExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProtocolExecutionInclude<ExtArgs> | null
    /**
     * Filter, which ProtocolExecution to fetch.
     */
    where: ProtocolExecutionWhereUniqueInput
  }

  /**
   * ProtocolExecution findFirst
   */
  export type ProtocolExecutionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProtocolExecution
     */
    select?: ProtocolExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProtocolExecutionInclude<ExtArgs> | null
    /**
     * Filter, which ProtocolExecution to fetch.
     */
    where?: ProtocolExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProtocolExecutions to fetch.
     */
    orderBy?: ProtocolExecutionOrderByWithRelationInput | ProtocolExecutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProtocolExecutions.
     */
    cursor?: ProtocolExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProtocolExecutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProtocolExecutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProtocolExecutions.
     */
    distinct?: ProtocolExecutionScalarFieldEnum | ProtocolExecutionScalarFieldEnum[]
  }

  /**
   * ProtocolExecution findFirstOrThrow
   */
  export type ProtocolExecutionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProtocolExecution
     */
    select?: ProtocolExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProtocolExecutionInclude<ExtArgs> | null
    /**
     * Filter, which ProtocolExecution to fetch.
     */
    where?: ProtocolExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProtocolExecutions to fetch.
     */
    orderBy?: ProtocolExecutionOrderByWithRelationInput | ProtocolExecutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProtocolExecutions.
     */
    cursor?: ProtocolExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProtocolExecutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProtocolExecutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProtocolExecutions.
     */
    distinct?: ProtocolExecutionScalarFieldEnum | ProtocolExecutionScalarFieldEnum[]
  }

  /**
   * ProtocolExecution findMany
   */
  export type ProtocolExecutionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProtocolExecution
     */
    select?: ProtocolExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProtocolExecutionInclude<ExtArgs> | null
    /**
     * Filter, which ProtocolExecutions to fetch.
     */
    where?: ProtocolExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProtocolExecutions to fetch.
     */
    orderBy?: ProtocolExecutionOrderByWithRelationInput | ProtocolExecutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProtocolExecutions.
     */
    cursor?: ProtocolExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProtocolExecutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProtocolExecutions.
     */
    skip?: number
    distinct?: ProtocolExecutionScalarFieldEnum | ProtocolExecutionScalarFieldEnum[]
  }

  /**
   * ProtocolExecution create
   */
  export type ProtocolExecutionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProtocolExecution
     */
    select?: ProtocolExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProtocolExecutionInclude<ExtArgs> | null
    /**
     * The data needed to create a ProtocolExecution.
     */
    data: XOR<ProtocolExecutionCreateInput, ProtocolExecutionUncheckedCreateInput>
  }

  /**
   * ProtocolExecution createMany
   */
  export type ProtocolExecutionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProtocolExecutions.
     */
    data: ProtocolExecutionCreateManyInput | ProtocolExecutionCreateManyInput[]
  }

  /**
   * ProtocolExecution createManyAndReturn
   */
  export type ProtocolExecutionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProtocolExecution
     */
    select?: ProtocolExecutionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ProtocolExecutions.
     */
    data: ProtocolExecutionCreateManyInput | ProtocolExecutionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProtocolExecutionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProtocolExecution update
   */
  export type ProtocolExecutionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProtocolExecution
     */
    select?: ProtocolExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProtocolExecutionInclude<ExtArgs> | null
    /**
     * The data needed to update a ProtocolExecution.
     */
    data: XOR<ProtocolExecutionUpdateInput, ProtocolExecutionUncheckedUpdateInput>
    /**
     * Choose, which ProtocolExecution to update.
     */
    where: ProtocolExecutionWhereUniqueInput
  }

  /**
   * ProtocolExecution updateMany
   */
  export type ProtocolExecutionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProtocolExecutions.
     */
    data: XOR<ProtocolExecutionUpdateManyMutationInput, ProtocolExecutionUncheckedUpdateManyInput>
    /**
     * Filter which ProtocolExecutions to update
     */
    where?: ProtocolExecutionWhereInput
  }

  /**
   * ProtocolExecution upsert
   */
  export type ProtocolExecutionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProtocolExecution
     */
    select?: ProtocolExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProtocolExecutionInclude<ExtArgs> | null
    /**
     * The filter to search for the ProtocolExecution to update in case it exists.
     */
    where: ProtocolExecutionWhereUniqueInput
    /**
     * In case the ProtocolExecution found by the `where` argument doesn't exist, create a new ProtocolExecution with this data.
     */
    create: XOR<ProtocolExecutionCreateInput, ProtocolExecutionUncheckedCreateInput>
    /**
     * In case the ProtocolExecution was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProtocolExecutionUpdateInput, ProtocolExecutionUncheckedUpdateInput>
  }

  /**
   * ProtocolExecution delete
   */
  export type ProtocolExecutionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProtocolExecution
     */
    select?: ProtocolExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProtocolExecutionInclude<ExtArgs> | null
    /**
     * Filter which ProtocolExecution to delete.
     */
    where: ProtocolExecutionWhereUniqueInput
  }

  /**
   * ProtocolExecution deleteMany
   */
  export type ProtocolExecutionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProtocolExecutions to delete
     */
    where?: ProtocolExecutionWhereInput
  }

  /**
   * ProtocolExecution.experiment
   */
  export type ProtocolExecution$experimentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experiment
     */
    select?: ExperimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentInclude<ExtArgs> | null
    where?: ExperimentWhereInput
  }

  /**
   * ProtocolExecution.links
   */
  export type ProtocolExecution$linksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkInclude<ExtArgs> | null
    where?: LinkWhereInput
    orderBy?: LinkOrderByWithRelationInput | LinkOrderByWithRelationInput[]
    cursor?: LinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LinkScalarFieldEnum | LinkScalarFieldEnum[]
  }

  /**
   * ProtocolExecution without action
   */
  export type ProtocolExecutionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProtocolExecution
     */
    select?: ProtocolExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProtocolExecutionInclude<ExtArgs> | null
  }


  /**
   * Model Link
   */

  export type AggregateLink = {
    _count: LinkCountAggregateOutputType | null
    _min: LinkMinAggregateOutputType | null
    _max: LinkMaxAggregateOutputType | null
  }

  export type LinkMinAggregateOutputType = {
    id: string | null
    sourceType: string | null
    sourceId: string | null
    targetType: string | null
    targetId: string | null
    createdAt: Date | null
  }

  export type LinkMaxAggregateOutputType = {
    id: string | null
    sourceType: string | null
    sourceId: string | null
    targetType: string | null
    targetId: string | null
    createdAt: Date | null
  }

  export type LinkCountAggregateOutputType = {
    id: number
    sourceType: number
    sourceId: number
    targetType: number
    targetId: number
    createdAt: number
    _all: number
  }


  export type LinkMinAggregateInputType = {
    id?: true
    sourceType?: true
    sourceId?: true
    targetType?: true
    targetId?: true
    createdAt?: true
  }

  export type LinkMaxAggregateInputType = {
    id?: true
    sourceType?: true
    sourceId?: true
    targetType?: true
    targetId?: true
    createdAt?: true
  }

  export type LinkCountAggregateInputType = {
    id?: true
    sourceType?: true
    sourceId?: true
    targetType?: true
    targetId?: true
    createdAt?: true
    _all?: true
  }

  export type LinkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Link to aggregate.
     */
    where?: LinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Links to fetch.
     */
    orderBy?: LinkOrderByWithRelationInput | LinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Links from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Links.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Links
    **/
    _count?: true | LinkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LinkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LinkMaxAggregateInputType
  }

  export type GetLinkAggregateType<T extends LinkAggregateArgs> = {
        [P in keyof T & keyof AggregateLink]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLink[P]>
      : GetScalarType<T[P], AggregateLink[P]>
  }




  export type LinkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LinkWhereInput
    orderBy?: LinkOrderByWithAggregationInput | LinkOrderByWithAggregationInput[]
    by: LinkScalarFieldEnum[] | LinkScalarFieldEnum
    having?: LinkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LinkCountAggregateInputType | true
    _min?: LinkMinAggregateInputType
    _max?: LinkMaxAggregateInputType
  }

  export type LinkGroupByOutputType = {
    id: string
    sourceType: string
    sourceId: string
    targetType: string
    targetId: string
    createdAt: Date
    _count: LinkCountAggregateOutputType | null
    _min: LinkMinAggregateOutputType | null
    _max: LinkMaxAggregateOutputType | null
  }

  type GetLinkGroupByPayload<T extends LinkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LinkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LinkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LinkGroupByOutputType[P]>
            : GetScalarType<T[P], LinkGroupByOutputType[P]>
        }
      >
    >


  export type LinkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sourceType?: boolean
    sourceId?: boolean
    targetType?: boolean
    targetId?: boolean
    createdAt?: boolean
    note?: boolean | Link$noteArgs<ExtArgs>
    highlight?: boolean | Link$highlightArgs<ExtArgs>
    databaseEntry?: boolean | Link$databaseEntryArgs<ExtArgs>
    table?: boolean | Link$tableArgs<ExtArgs>
    protocol?: boolean | Link$protocolArgs<ExtArgs>
    protocolExecution?: boolean | Link$protocolExecutionArgs<ExtArgs>
  }, ExtArgs["result"]["link"]>

  export type LinkSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sourceType?: boolean
    sourceId?: boolean
    targetType?: boolean
    targetId?: boolean
    createdAt?: boolean
    note?: boolean | Link$noteArgs<ExtArgs>
    highlight?: boolean | Link$highlightArgs<ExtArgs>
    databaseEntry?: boolean | Link$databaseEntryArgs<ExtArgs>
    table?: boolean | Link$tableArgs<ExtArgs>
    protocol?: boolean | Link$protocolArgs<ExtArgs>
    protocolExecution?: boolean | Link$protocolExecutionArgs<ExtArgs>
  }, ExtArgs["result"]["link"]>

  export type LinkSelectScalar = {
    id?: boolean
    sourceType?: boolean
    sourceId?: boolean
    targetType?: boolean
    targetId?: boolean
    createdAt?: boolean
  }

  export type LinkInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    note?: boolean | Link$noteArgs<ExtArgs>
    highlight?: boolean | Link$highlightArgs<ExtArgs>
    databaseEntry?: boolean | Link$databaseEntryArgs<ExtArgs>
    table?: boolean | Link$tableArgs<ExtArgs>
    protocol?: boolean | Link$protocolArgs<ExtArgs>
    protocolExecution?: boolean | Link$protocolExecutionArgs<ExtArgs>
  }
  export type LinkIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    note?: boolean | Link$noteArgs<ExtArgs>
    highlight?: boolean | Link$highlightArgs<ExtArgs>
    databaseEntry?: boolean | Link$databaseEntryArgs<ExtArgs>
    table?: boolean | Link$tableArgs<ExtArgs>
    protocol?: boolean | Link$protocolArgs<ExtArgs>
    protocolExecution?: boolean | Link$protocolExecutionArgs<ExtArgs>
  }

  export type $LinkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Link"
    objects: {
      note: Prisma.$NotePayload<ExtArgs> | null
      highlight: Prisma.$HighlightPayload<ExtArgs> | null
      databaseEntry: Prisma.$DatabaseEntryPayload<ExtArgs> | null
      table: Prisma.$TablePayload<ExtArgs> | null
      protocol: Prisma.$ProtocolPayload<ExtArgs> | null
      protocolExecution: Prisma.$ProtocolExecutionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sourceType: string
      sourceId: string
      targetType: string
      targetId: string
      createdAt: Date
    }, ExtArgs["result"]["link"]>
    composites: {}
  }

  type LinkGetPayload<S extends boolean | null | undefined | LinkDefaultArgs> = $Result.GetResult<Prisma.$LinkPayload, S>

  type LinkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LinkFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LinkCountAggregateInputType | true
    }

  export interface LinkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Link'], meta: { name: 'Link' } }
    /**
     * Find zero or one Link that matches the filter.
     * @param {LinkFindUniqueArgs} args - Arguments to find a Link
     * @example
     * // Get one Link
     * const link = await prisma.link.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LinkFindUniqueArgs>(args: SelectSubset<T, LinkFindUniqueArgs<ExtArgs>>): Prisma__LinkClient<$Result.GetResult<Prisma.$LinkPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Link that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LinkFindUniqueOrThrowArgs} args - Arguments to find a Link
     * @example
     * // Get one Link
     * const link = await prisma.link.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LinkFindUniqueOrThrowArgs>(args: SelectSubset<T, LinkFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LinkClient<$Result.GetResult<Prisma.$LinkPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Link that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinkFindFirstArgs} args - Arguments to find a Link
     * @example
     * // Get one Link
     * const link = await prisma.link.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LinkFindFirstArgs>(args?: SelectSubset<T, LinkFindFirstArgs<ExtArgs>>): Prisma__LinkClient<$Result.GetResult<Prisma.$LinkPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Link that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinkFindFirstOrThrowArgs} args - Arguments to find a Link
     * @example
     * // Get one Link
     * const link = await prisma.link.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LinkFindFirstOrThrowArgs>(args?: SelectSubset<T, LinkFindFirstOrThrowArgs<ExtArgs>>): Prisma__LinkClient<$Result.GetResult<Prisma.$LinkPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Links that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinkFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Links
     * const links = await prisma.link.findMany()
     * 
     * // Get first 10 Links
     * const links = await prisma.link.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const linkWithIdOnly = await prisma.link.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LinkFindManyArgs>(args?: SelectSubset<T, LinkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LinkPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Link.
     * @param {LinkCreateArgs} args - Arguments to create a Link.
     * @example
     * // Create one Link
     * const Link = await prisma.link.create({
     *   data: {
     *     // ... data to create a Link
     *   }
     * })
     * 
     */
    create<T extends LinkCreateArgs>(args: SelectSubset<T, LinkCreateArgs<ExtArgs>>): Prisma__LinkClient<$Result.GetResult<Prisma.$LinkPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Links.
     * @param {LinkCreateManyArgs} args - Arguments to create many Links.
     * @example
     * // Create many Links
     * const link = await prisma.link.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LinkCreateManyArgs>(args?: SelectSubset<T, LinkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Links and returns the data saved in the database.
     * @param {LinkCreateManyAndReturnArgs} args - Arguments to create many Links.
     * @example
     * // Create many Links
     * const link = await prisma.link.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Links and only return the `id`
     * const linkWithIdOnly = await prisma.link.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LinkCreateManyAndReturnArgs>(args?: SelectSubset<T, LinkCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LinkPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Link.
     * @param {LinkDeleteArgs} args - Arguments to delete one Link.
     * @example
     * // Delete one Link
     * const Link = await prisma.link.delete({
     *   where: {
     *     // ... filter to delete one Link
     *   }
     * })
     * 
     */
    delete<T extends LinkDeleteArgs>(args: SelectSubset<T, LinkDeleteArgs<ExtArgs>>): Prisma__LinkClient<$Result.GetResult<Prisma.$LinkPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Link.
     * @param {LinkUpdateArgs} args - Arguments to update one Link.
     * @example
     * // Update one Link
     * const link = await prisma.link.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LinkUpdateArgs>(args: SelectSubset<T, LinkUpdateArgs<ExtArgs>>): Prisma__LinkClient<$Result.GetResult<Prisma.$LinkPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Links.
     * @param {LinkDeleteManyArgs} args - Arguments to filter Links to delete.
     * @example
     * // Delete a few Links
     * const { count } = await prisma.link.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LinkDeleteManyArgs>(args?: SelectSubset<T, LinkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Links.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Links
     * const link = await prisma.link.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LinkUpdateManyArgs>(args: SelectSubset<T, LinkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Link.
     * @param {LinkUpsertArgs} args - Arguments to update or create a Link.
     * @example
     * // Update or create a Link
     * const link = await prisma.link.upsert({
     *   create: {
     *     // ... data to create a Link
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Link we want to update
     *   }
     * })
     */
    upsert<T extends LinkUpsertArgs>(args: SelectSubset<T, LinkUpsertArgs<ExtArgs>>): Prisma__LinkClient<$Result.GetResult<Prisma.$LinkPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Links.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinkCountArgs} args - Arguments to filter Links to count.
     * @example
     * // Count the number of Links
     * const count = await prisma.link.count({
     *   where: {
     *     // ... the filter for the Links we want to count
     *   }
     * })
    **/
    count<T extends LinkCountArgs>(
      args?: Subset<T, LinkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LinkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Link.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LinkAggregateArgs>(args: Subset<T, LinkAggregateArgs>): Prisma.PrismaPromise<GetLinkAggregateType<T>>

    /**
     * Group by Link.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LinkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LinkGroupByArgs['orderBy'] }
        : { orderBy?: LinkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LinkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLinkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Link model
   */
  readonly fields: LinkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Link.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LinkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    note<T extends Link$noteArgs<ExtArgs> = {}>(args?: Subset<T, Link$noteArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    highlight<T extends Link$highlightArgs<ExtArgs> = {}>(args?: Subset<T, Link$highlightArgs<ExtArgs>>): Prisma__HighlightClient<$Result.GetResult<Prisma.$HighlightPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    databaseEntry<T extends Link$databaseEntryArgs<ExtArgs> = {}>(args?: Subset<T, Link$databaseEntryArgs<ExtArgs>>): Prisma__DatabaseEntryClient<$Result.GetResult<Prisma.$DatabaseEntryPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    table<T extends Link$tableArgs<ExtArgs> = {}>(args?: Subset<T, Link$tableArgs<ExtArgs>>): Prisma__TableClient<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    protocol<T extends Link$protocolArgs<ExtArgs> = {}>(args?: Subset<T, Link$protocolArgs<ExtArgs>>): Prisma__ProtocolClient<$Result.GetResult<Prisma.$ProtocolPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    protocolExecution<T extends Link$protocolExecutionArgs<ExtArgs> = {}>(args?: Subset<T, Link$protocolExecutionArgs<ExtArgs>>): Prisma__ProtocolExecutionClient<$Result.GetResult<Prisma.$ProtocolExecutionPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Link model
   */ 
  interface LinkFieldRefs {
    readonly id: FieldRef<"Link", 'String'>
    readonly sourceType: FieldRef<"Link", 'String'>
    readonly sourceId: FieldRef<"Link", 'String'>
    readonly targetType: FieldRef<"Link", 'String'>
    readonly targetId: FieldRef<"Link", 'String'>
    readonly createdAt: FieldRef<"Link", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Link findUnique
   */
  export type LinkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkInclude<ExtArgs> | null
    /**
     * Filter, which Link to fetch.
     */
    where: LinkWhereUniqueInput
  }

  /**
   * Link findUniqueOrThrow
   */
  export type LinkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkInclude<ExtArgs> | null
    /**
     * Filter, which Link to fetch.
     */
    where: LinkWhereUniqueInput
  }

  /**
   * Link findFirst
   */
  export type LinkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkInclude<ExtArgs> | null
    /**
     * Filter, which Link to fetch.
     */
    where?: LinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Links to fetch.
     */
    orderBy?: LinkOrderByWithRelationInput | LinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Links.
     */
    cursor?: LinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Links from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Links.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Links.
     */
    distinct?: LinkScalarFieldEnum | LinkScalarFieldEnum[]
  }

  /**
   * Link findFirstOrThrow
   */
  export type LinkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkInclude<ExtArgs> | null
    /**
     * Filter, which Link to fetch.
     */
    where?: LinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Links to fetch.
     */
    orderBy?: LinkOrderByWithRelationInput | LinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Links.
     */
    cursor?: LinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Links from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Links.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Links.
     */
    distinct?: LinkScalarFieldEnum | LinkScalarFieldEnum[]
  }

  /**
   * Link findMany
   */
  export type LinkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkInclude<ExtArgs> | null
    /**
     * Filter, which Links to fetch.
     */
    where?: LinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Links to fetch.
     */
    orderBy?: LinkOrderByWithRelationInput | LinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Links.
     */
    cursor?: LinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Links from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Links.
     */
    skip?: number
    distinct?: LinkScalarFieldEnum | LinkScalarFieldEnum[]
  }

  /**
   * Link create
   */
  export type LinkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkInclude<ExtArgs> | null
    /**
     * The data needed to create a Link.
     */
    data: XOR<LinkCreateInput, LinkUncheckedCreateInput>
  }

  /**
   * Link createMany
   */
  export type LinkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Links.
     */
    data: LinkCreateManyInput | LinkCreateManyInput[]
  }

  /**
   * Link createManyAndReturn
   */
  export type LinkCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Links.
     */
    data: LinkCreateManyInput | LinkCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Link update
   */
  export type LinkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkInclude<ExtArgs> | null
    /**
     * The data needed to update a Link.
     */
    data: XOR<LinkUpdateInput, LinkUncheckedUpdateInput>
    /**
     * Choose, which Link to update.
     */
    where: LinkWhereUniqueInput
  }

  /**
   * Link updateMany
   */
  export type LinkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Links.
     */
    data: XOR<LinkUpdateManyMutationInput, LinkUncheckedUpdateManyInput>
    /**
     * Filter which Links to update
     */
    where?: LinkWhereInput
  }

  /**
   * Link upsert
   */
  export type LinkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkInclude<ExtArgs> | null
    /**
     * The filter to search for the Link to update in case it exists.
     */
    where: LinkWhereUniqueInput
    /**
     * In case the Link found by the `where` argument doesn't exist, create a new Link with this data.
     */
    create: XOR<LinkCreateInput, LinkUncheckedCreateInput>
    /**
     * In case the Link was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LinkUpdateInput, LinkUncheckedUpdateInput>
  }

  /**
   * Link delete
   */
  export type LinkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkInclude<ExtArgs> | null
    /**
     * Filter which Link to delete.
     */
    where: LinkWhereUniqueInput
  }

  /**
   * Link deleteMany
   */
  export type LinkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Links to delete
     */
    where?: LinkWhereInput
  }

  /**
   * Link.note
   */
  export type Link$noteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    where?: NoteWhereInput
  }

  /**
   * Link.highlight
   */
  export type Link$highlightArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Highlight
     */
    select?: HighlightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HighlightInclude<ExtArgs> | null
    where?: HighlightWhereInput
  }

  /**
   * Link.databaseEntry
   */
  export type Link$databaseEntryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatabaseEntry
     */
    select?: DatabaseEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatabaseEntryInclude<ExtArgs> | null
    where?: DatabaseEntryWhereInput
  }

  /**
   * Link.table
   */
  export type Link$tableArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableInclude<ExtArgs> | null
    where?: TableWhereInput
  }

  /**
   * Link.protocol
   */
  export type Link$protocolArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Protocol
     */
    select?: ProtocolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProtocolInclude<ExtArgs> | null
    where?: ProtocolWhereInput
  }

  /**
   * Link.protocolExecution
   */
  export type Link$protocolExecutionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProtocolExecution
     */
    select?: ProtocolExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProtocolExecutionInclude<ExtArgs> | null
    where?: ProtocolExecutionWhereInput
  }

  /**
   * Link without action
   */
  export type LinkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LinkInclude<ExtArgs> | null
  }


  /**
   * Model Recipe
   */

  export type AggregateRecipe = {
    _count: RecipeCountAggregateOutputType | null
    _avg: RecipeAvgAggregateOutputType | null
    _sum: RecipeSumAggregateOutputType | null
    _min: RecipeMinAggregateOutputType | null
    _max: RecipeMaxAggregateOutputType | null
  }

  export type RecipeAvgAggregateOutputType = {
    pH: number | null
  }

  export type RecipeSumAggregateOutputType = {
    pH: number | null
  }

  export type RecipeMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    category: string | null
    type: string | null
    steps: string | null
    instructions: string | null
    notes: string | null
    pH: number | null
    osmolarity: string | null
    storage: string | null
    shelfLife: string | null
    source: string | null
    version: string | null
    isPublic: boolean | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RecipeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    category: string | null
    type: string | null
    steps: string | null
    instructions: string | null
    notes: string | null
    pH: number | null
    osmolarity: string | null
    storage: string | null
    shelfLife: string | null
    source: string | null
    version: string | null
    isPublic: boolean | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RecipeCountAggregateOutputType = {
    id: number
    name: number
    description: number
    category: number
    type: number
    steps: number
    instructions: number
    notes: number
    pH: number
    osmolarity: number
    storage: number
    shelfLife: number
    source: number
    version: number
    isPublic: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RecipeAvgAggregateInputType = {
    pH?: true
  }

  export type RecipeSumAggregateInputType = {
    pH?: true
  }

  export type RecipeMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    type?: true
    steps?: true
    instructions?: true
    notes?: true
    pH?: true
    osmolarity?: true
    storage?: true
    shelfLife?: true
    source?: true
    version?: true
    isPublic?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RecipeMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    type?: true
    steps?: true
    instructions?: true
    notes?: true
    pH?: true
    osmolarity?: true
    storage?: true
    shelfLife?: true
    source?: true
    version?: true
    isPublic?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RecipeCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    type?: true
    steps?: true
    instructions?: true
    notes?: true
    pH?: true
    osmolarity?: true
    storage?: true
    shelfLife?: true
    source?: true
    version?: true
    isPublic?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RecipeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recipe to aggregate.
     */
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     */
    orderBy?: RecipeOrderByWithRelationInput | RecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Recipes
    **/
    _count?: true | RecipeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecipeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecipeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecipeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecipeMaxAggregateInputType
  }

  export type GetRecipeAggregateType<T extends RecipeAggregateArgs> = {
        [P in keyof T & keyof AggregateRecipe]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecipe[P]>
      : GetScalarType<T[P], AggregateRecipe[P]>
  }




  export type RecipeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeWhereInput
    orderBy?: RecipeOrderByWithAggregationInput | RecipeOrderByWithAggregationInput[]
    by: RecipeScalarFieldEnum[] | RecipeScalarFieldEnum
    having?: RecipeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecipeCountAggregateInputType | true
    _avg?: RecipeAvgAggregateInputType
    _sum?: RecipeSumAggregateInputType
    _min?: RecipeMinAggregateInputType
    _max?: RecipeMaxAggregateInputType
  }

  export type RecipeGroupByOutputType = {
    id: string
    name: string
    description: string | null
    category: string
    type: string
    steps: string | null
    instructions: string | null
    notes: string | null
    pH: number | null
    osmolarity: string | null
    storage: string | null
    shelfLife: string | null
    source: string | null
    version: string
    isPublic: boolean
    createdBy: string | null
    createdAt: Date
    updatedAt: Date
    _count: RecipeCountAggregateOutputType | null
    _avg: RecipeAvgAggregateOutputType | null
    _sum: RecipeSumAggregateOutputType | null
    _min: RecipeMinAggregateOutputType | null
    _max: RecipeMaxAggregateOutputType | null
  }

  type GetRecipeGroupByPayload<T extends RecipeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecipeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecipeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecipeGroupByOutputType[P]>
            : GetScalarType<T[P], RecipeGroupByOutputType[P]>
        }
      >
    >


  export type RecipeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    type?: boolean
    steps?: boolean
    instructions?: boolean
    notes?: boolean
    pH?: boolean
    osmolarity?: boolean
    storage?: boolean
    shelfLife?: boolean
    source?: boolean
    version?: boolean
    isPublic?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ingredients?: boolean | Recipe$ingredientsArgs<ExtArgs>
    recipeExecutions?: boolean | Recipe$recipeExecutionsArgs<ExtArgs>
    _count?: boolean | RecipeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recipe"]>

  export type RecipeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    type?: boolean
    steps?: boolean
    instructions?: boolean
    notes?: boolean
    pH?: boolean
    osmolarity?: boolean
    storage?: boolean
    shelfLife?: boolean
    source?: boolean
    version?: boolean
    isPublic?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["recipe"]>

  export type RecipeSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    type?: boolean
    steps?: boolean
    instructions?: boolean
    notes?: boolean
    pH?: boolean
    osmolarity?: boolean
    storage?: boolean
    shelfLife?: boolean
    source?: boolean
    version?: boolean
    isPublic?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RecipeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ingredients?: boolean | Recipe$ingredientsArgs<ExtArgs>
    recipeExecutions?: boolean | Recipe$recipeExecutionsArgs<ExtArgs>
    _count?: boolean | RecipeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RecipeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RecipePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Recipe"
    objects: {
      ingredients: Prisma.$RecipeIngredientPayload<ExtArgs>[]
      recipeExecutions: Prisma.$RecipeExecutionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      category: string
      type: string
      steps: string | null
      instructions: string | null
      notes: string | null
      pH: number | null
      osmolarity: string | null
      storage: string | null
      shelfLife: string | null
      source: string | null
      version: string
      isPublic: boolean
      createdBy: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["recipe"]>
    composites: {}
  }

  type RecipeGetPayload<S extends boolean | null | undefined | RecipeDefaultArgs> = $Result.GetResult<Prisma.$RecipePayload, S>

  type RecipeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RecipeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RecipeCountAggregateInputType | true
    }

  export interface RecipeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Recipe'], meta: { name: 'Recipe' } }
    /**
     * Find zero or one Recipe that matches the filter.
     * @param {RecipeFindUniqueArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RecipeFindUniqueArgs>(args: SelectSubset<T, RecipeFindUniqueArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Recipe that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RecipeFindUniqueOrThrowArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RecipeFindUniqueOrThrowArgs>(args: SelectSubset<T, RecipeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Recipe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeFindFirstArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RecipeFindFirstArgs>(args?: SelectSubset<T, RecipeFindFirstArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Recipe that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeFindFirstOrThrowArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RecipeFindFirstOrThrowArgs>(args?: SelectSubset<T, RecipeFindFirstOrThrowArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Recipes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recipes
     * const recipes = await prisma.recipe.findMany()
     * 
     * // Get first 10 Recipes
     * const recipes = await prisma.recipe.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recipeWithIdOnly = await prisma.recipe.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RecipeFindManyArgs>(args?: SelectSubset<T, RecipeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Recipe.
     * @param {RecipeCreateArgs} args - Arguments to create a Recipe.
     * @example
     * // Create one Recipe
     * const Recipe = await prisma.recipe.create({
     *   data: {
     *     // ... data to create a Recipe
     *   }
     * })
     * 
     */
    create<T extends RecipeCreateArgs>(args: SelectSubset<T, RecipeCreateArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Recipes.
     * @param {RecipeCreateManyArgs} args - Arguments to create many Recipes.
     * @example
     * // Create many Recipes
     * const recipe = await prisma.recipe.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RecipeCreateManyArgs>(args?: SelectSubset<T, RecipeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Recipes and returns the data saved in the database.
     * @param {RecipeCreateManyAndReturnArgs} args - Arguments to create many Recipes.
     * @example
     * // Create many Recipes
     * const recipe = await prisma.recipe.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Recipes and only return the `id`
     * const recipeWithIdOnly = await prisma.recipe.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RecipeCreateManyAndReturnArgs>(args?: SelectSubset<T, RecipeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Recipe.
     * @param {RecipeDeleteArgs} args - Arguments to delete one Recipe.
     * @example
     * // Delete one Recipe
     * const Recipe = await prisma.recipe.delete({
     *   where: {
     *     // ... filter to delete one Recipe
     *   }
     * })
     * 
     */
    delete<T extends RecipeDeleteArgs>(args: SelectSubset<T, RecipeDeleteArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Recipe.
     * @param {RecipeUpdateArgs} args - Arguments to update one Recipe.
     * @example
     * // Update one Recipe
     * const recipe = await prisma.recipe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RecipeUpdateArgs>(args: SelectSubset<T, RecipeUpdateArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Recipes.
     * @param {RecipeDeleteManyArgs} args - Arguments to filter Recipes to delete.
     * @example
     * // Delete a few Recipes
     * const { count } = await prisma.recipe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RecipeDeleteManyArgs>(args?: SelectSubset<T, RecipeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recipes
     * const recipe = await prisma.recipe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RecipeUpdateManyArgs>(args: SelectSubset<T, RecipeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Recipe.
     * @param {RecipeUpsertArgs} args - Arguments to update or create a Recipe.
     * @example
     * // Update or create a Recipe
     * const recipe = await prisma.recipe.upsert({
     *   create: {
     *     // ... data to create a Recipe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recipe we want to update
     *   }
     * })
     */
    upsert<T extends RecipeUpsertArgs>(args: SelectSubset<T, RecipeUpsertArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Recipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeCountArgs} args - Arguments to filter Recipes to count.
     * @example
     * // Count the number of Recipes
     * const count = await prisma.recipe.count({
     *   where: {
     *     // ... the filter for the Recipes we want to count
     *   }
     * })
    **/
    count<T extends RecipeCountArgs>(
      args?: Subset<T, RecipeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecipeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecipeAggregateArgs>(args: Subset<T, RecipeAggregateArgs>): Prisma.PrismaPromise<GetRecipeAggregateType<T>>

    /**
     * Group by Recipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecipeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecipeGroupByArgs['orderBy'] }
        : { orderBy?: RecipeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecipeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecipeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Recipe model
   */
  readonly fields: RecipeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Recipe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecipeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ingredients<T extends Recipe$ingredientsArgs<ExtArgs> = {}>(args?: Subset<T, Recipe$ingredientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "findMany"> | Null>
    recipeExecutions<T extends Recipe$recipeExecutionsArgs<ExtArgs> = {}>(args?: Subset<T, Recipe$recipeExecutionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeExecutionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Recipe model
   */ 
  interface RecipeFieldRefs {
    readonly id: FieldRef<"Recipe", 'String'>
    readonly name: FieldRef<"Recipe", 'String'>
    readonly description: FieldRef<"Recipe", 'String'>
    readonly category: FieldRef<"Recipe", 'String'>
    readonly type: FieldRef<"Recipe", 'String'>
    readonly steps: FieldRef<"Recipe", 'String'>
    readonly instructions: FieldRef<"Recipe", 'String'>
    readonly notes: FieldRef<"Recipe", 'String'>
    readonly pH: FieldRef<"Recipe", 'Float'>
    readonly osmolarity: FieldRef<"Recipe", 'String'>
    readonly storage: FieldRef<"Recipe", 'String'>
    readonly shelfLife: FieldRef<"Recipe", 'String'>
    readonly source: FieldRef<"Recipe", 'String'>
    readonly version: FieldRef<"Recipe", 'String'>
    readonly isPublic: FieldRef<"Recipe", 'Boolean'>
    readonly createdBy: FieldRef<"Recipe", 'String'>
    readonly createdAt: FieldRef<"Recipe", 'DateTime'>
    readonly updatedAt: FieldRef<"Recipe", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Recipe findUnique
   */
  export type RecipeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipe to fetch.
     */
    where: RecipeWhereUniqueInput
  }

  /**
   * Recipe findUniqueOrThrow
   */
  export type RecipeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipe to fetch.
     */
    where: RecipeWhereUniqueInput
  }

  /**
   * Recipe findFirst
   */
  export type RecipeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipe to fetch.
     */
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     */
    orderBy?: RecipeOrderByWithRelationInput | RecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recipes.
     */
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recipes.
     */
    distinct?: RecipeScalarFieldEnum | RecipeScalarFieldEnum[]
  }

  /**
   * Recipe findFirstOrThrow
   */
  export type RecipeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipe to fetch.
     */
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     */
    orderBy?: RecipeOrderByWithRelationInput | RecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recipes.
     */
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recipes.
     */
    distinct?: RecipeScalarFieldEnum | RecipeScalarFieldEnum[]
  }

  /**
   * Recipe findMany
   */
  export type RecipeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipes to fetch.
     */
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     */
    orderBy?: RecipeOrderByWithRelationInput | RecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Recipes.
     */
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     */
    skip?: number
    distinct?: RecipeScalarFieldEnum | RecipeScalarFieldEnum[]
  }

  /**
   * Recipe create
   */
  export type RecipeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * The data needed to create a Recipe.
     */
    data: XOR<RecipeCreateInput, RecipeUncheckedCreateInput>
  }

  /**
   * Recipe createMany
   */
  export type RecipeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Recipes.
     */
    data: RecipeCreateManyInput | RecipeCreateManyInput[]
  }

  /**
   * Recipe createManyAndReturn
   */
  export type RecipeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Recipes.
     */
    data: RecipeCreateManyInput | RecipeCreateManyInput[]
  }

  /**
   * Recipe update
   */
  export type RecipeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * The data needed to update a Recipe.
     */
    data: XOR<RecipeUpdateInput, RecipeUncheckedUpdateInput>
    /**
     * Choose, which Recipe to update.
     */
    where: RecipeWhereUniqueInput
  }

  /**
   * Recipe updateMany
   */
  export type RecipeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Recipes.
     */
    data: XOR<RecipeUpdateManyMutationInput, RecipeUncheckedUpdateManyInput>
    /**
     * Filter which Recipes to update
     */
    where?: RecipeWhereInput
  }

  /**
   * Recipe upsert
   */
  export type RecipeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * The filter to search for the Recipe to update in case it exists.
     */
    where: RecipeWhereUniqueInput
    /**
     * In case the Recipe found by the `where` argument doesn't exist, create a new Recipe with this data.
     */
    create: XOR<RecipeCreateInput, RecipeUncheckedCreateInput>
    /**
     * In case the Recipe was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecipeUpdateInput, RecipeUncheckedUpdateInput>
  }

  /**
   * Recipe delete
   */
  export type RecipeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter which Recipe to delete.
     */
    where: RecipeWhereUniqueInput
  }

  /**
   * Recipe deleteMany
   */
  export type RecipeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recipes to delete
     */
    where?: RecipeWhereInput
  }

  /**
   * Recipe.ingredients
   */
  export type Recipe$ingredientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    where?: RecipeIngredientWhereInput
    orderBy?: RecipeIngredientOrderByWithRelationInput | RecipeIngredientOrderByWithRelationInput[]
    cursor?: RecipeIngredientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecipeIngredientScalarFieldEnum | RecipeIngredientScalarFieldEnum[]
  }

  /**
   * Recipe.recipeExecutions
   */
  export type Recipe$recipeExecutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeExecution
     */
    select?: RecipeExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeExecutionInclude<ExtArgs> | null
    where?: RecipeExecutionWhereInput
    orderBy?: RecipeExecutionOrderByWithRelationInput | RecipeExecutionOrderByWithRelationInput[]
    cursor?: RecipeExecutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecipeExecutionScalarFieldEnum | RecipeExecutionScalarFieldEnum[]
  }

  /**
   * Recipe without action
   */
  export type RecipeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
  }


  /**
   * Model RecipeIngredient
   */

  export type AggregateRecipeIngredient = {
    _count: RecipeIngredientCountAggregateOutputType | null
    _avg: RecipeIngredientAvgAggregateOutputType | null
    _sum: RecipeIngredientSumAggregateOutputType | null
    _min: RecipeIngredientMinAggregateOutputType | null
    _max: RecipeIngredientMaxAggregateOutputType | null
  }

  export type RecipeIngredientAvgAggregateOutputType = {
    amount: number | null
  }

  export type RecipeIngredientSumAggregateOutputType = {
    amount: number | null
  }

  export type RecipeIngredientMinAggregateOutputType = {
    id: string | null
    recipeId: string | null
    name: string | null
    amount: number | null
    unit: string | null
    concentration: string | null
    supplier: string | null
    catalogNumber: string | null
    notes: string | null
  }

  export type RecipeIngredientMaxAggregateOutputType = {
    id: string | null
    recipeId: string | null
    name: string | null
    amount: number | null
    unit: string | null
    concentration: string | null
    supplier: string | null
    catalogNumber: string | null
    notes: string | null
  }

  export type RecipeIngredientCountAggregateOutputType = {
    id: number
    recipeId: number
    name: number
    amount: number
    unit: number
    concentration: number
    supplier: number
    catalogNumber: number
    notes: number
    _all: number
  }


  export type RecipeIngredientAvgAggregateInputType = {
    amount?: true
  }

  export type RecipeIngredientSumAggregateInputType = {
    amount?: true
  }

  export type RecipeIngredientMinAggregateInputType = {
    id?: true
    recipeId?: true
    name?: true
    amount?: true
    unit?: true
    concentration?: true
    supplier?: true
    catalogNumber?: true
    notes?: true
  }

  export type RecipeIngredientMaxAggregateInputType = {
    id?: true
    recipeId?: true
    name?: true
    amount?: true
    unit?: true
    concentration?: true
    supplier?: true
    catalogNumber?: true
    notes?: true
  }

  export type RecipeIngredientCountAggregateInputType = {
    id?: true
    recipeId?: true
    name?: true
    amount?: true
    unit?: true
    concentration?: true
    supplier?: true
    catalogNumber?: true
    notes?: true
    _all?: true
  }

  export type RecipeIngredientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RecipeIngredient to aggregate.
     */
    where?: RecipeIngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipeIngredients to fetch.
     */
    orderBy?: RecipeIngredientOrderByWithRelationInput | RecipeIngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecipeIngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipeIngredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipeIngredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RecipeIngredients
    **/
    _count?: true | RecipeIngredientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecipeIngredientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecipeIngredientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecipeIngredientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecipeIngredientMaxAggregateInputType
  }

  export type GetRecipeIngredientAggregateType<T extends RecipeIngredientAggregateArgs> = {
        [P in keyof T & keyof AggregateRecipeIngredient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecipeIngredient[P]>
      : GetScalarType<T[P], AggregateRecipeIngredient[P]>
  }




  export type RecipeIngredientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeIngredientWhereInput
    orderBy?: RecipeIngredientOrderByWithAggregationInput | RecipeIngredientOrderByWithAggregationInput[]
    by: RecipeIngredientScalarFieldEnum[] | RecipeIngredientScalarFieldEnum
    having?: RecipeIngredientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecipeIngredientCountAggregateInputType | true
    _avg?: RecipeIngredientAvgAggregateInputType
    _sum?: RecipeIngredientSumAggregateInputType
    _min?: RecipeIngredientMinAggregateInputType
    _max?: RecipeIngredientMaxAggregateInputType
  }

  export type RecipeIngredientGroupByOutputType = {
    id: string
    recipeId: string
    name: string
    amount: number
    unit: string
    concentration: string | null
    supplier: string | null
    catalogNumber: string | null
    notes: string | null
    _count: RecipeIngredientCountAggregateOutputType | null
    _avg: RecipeIngredientAvgAggregateOutputType | null
    _sum: RecipeIngredientSumAggregateOutputType | null
    _min: RecipeIngredientMinAggregateOutputType | null
    _max: RecipeIngredientMaxAggregateOutputType | null
  }

  type GetRecipeIngredientGroupByPayload<T extends RecipeIngredientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecipeIngredientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecipeIngredientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecipeIngredientGroupByOutputType[P]>
            : GetScalarType<T[P], RecipeIngredientGroupByOutputType[P]>
        }
      >
    >


  export type RecipeIngredientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recipeId?: boolean
    name?: boolean
    amount?: boolean
    unit?: boolean
    concentration?: boolean
    supplier?: boolean
    catalogNumber?: boolean
    notes?: boolean
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recipeIngredient"]>

  export type RecipeIngredientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recipeId?: boolean
    name?: boolean
    amount?: boolean
    unit?: boolean
    concentration?: boolean
    supplier?: boolean
    catalogNumber?: boolean
    notes?: boolean
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recipeIngredient"]>

  export type RecipeIngredientSelectScalar = {
    id?: boolean
    recipeId?: boolean
    name?: boolean
    amount?: boolean
    unit?: boolean
    concentration?: boolean
    supplier?: boolean
    catalogNumber?: boolean
    notes?: boolean
  }

  export type RecipeIngredientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
  }
  export type RecipeIngredientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
  }

  export type $RecipeIngredientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RecipeIngredient"
    objects: {
      recipe: Prisma.$RecipePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      recipeId: string
      name: string
      amount: number
      unit: string
      concentration: string | null
      supplier: string | null
      catalogNumber: string | null
      notes: string | null
    }, ExtArgs["result"]["recipeIngredient"]>
    composites: {}
  }

  type RecipeIngredientGetPayload<S extends boolean | null | undefined | RecipeIngredientDefaultArgs> = $Result.GetResult<Prisma.$RecipeIngredientPayload, S>

  type RecipeIngredientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RecipeIngredientFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RecipeIngredientCountAggregateInputType | true
    }

  export interface RecipeIngredientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RecipeIngredient'], meta: { name: 'RecipeIngredient' } }
    /**
     * Find zero or one RecipeIngredient that matches the filter.
     * @param {RecipeIngredientFindUniqueArgs} args - Arguments to find a RecipeIngredient
     * @example
     * // Get one RecipeIngredient
     * const recipeIngredient = await prisma.recipeIngredient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RecipeIngredientFindUniqueArgs>(args: SelectSubset<T, RecipeIngredientFindUniqueArgs<ExtArgs>>): Prisma__RecipeIngredientClient<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RecipeIngredient that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RecipeIngredientFindUniqueOrThrowArgs} args - Arguments to find a RecipeIngredient
     * @example
     * // Get one RecipeIngredient
     * const recipeIngredient = await prisma.recipeIngredient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RecipeIngredientFindUniqueOrThrowArgs>(args: SelectSubset<T, RecipeIngredientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RecipeIngredientClient<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RecipeIngredient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeIngredientFindFirstArgs} args - Arguments to find a RecipeIngredient
     * @example
     * // Get one RecipeIngredient
     * const recipeIngredient = await prisma.recipeIngredient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RecipeIngredientFindFirstArgs>(args?: SelectSubset<T, RecipeIngredientFindFirstArgs<ExtArgs>>): Prisma__RecipeIngredientClient<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RecipeIngredient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeIngredientFindFirstOrThrowArgs} args - Arguments to find a RecipeIngredient
     * @example
     * // Get one RecipeIngredient
     * const recipeIngredient = await prisma.recipeIngredient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RecipeIngredientFindFirstOrThrowArgs>(args?: SelectSubset<T, RecipeIngredientFindFirstOrThrowArgs<ExtArgs>>): Prisma__RecipeIngredientClient<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RecipeIngredients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeIngredientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RecipeIngredients
     * const recipeIngredients = await prisma.recipeIngredient.findMany()
     * 
     * // Get first 10 RecipeIngredients
     * const recipeIngredients = await prisma.recipeIngredient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recipeIngredientWithIdOnly = await prisma.recipeIngredient.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RecipeIngredientFindManyArgs>(args?: SelectSubset<T, RecipeIngredientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RecipeIngredient.
     * @param {RecipeIngredientCreateArgs} args - Arguments to create a RecipeIngredient.
     * @example
     * // Create one RecipeIngredient
     * const RecipeIngredient = await prisma.recipeIngredient.create({
     *   data: {
     *     // ... data to create a RecipeIngredient
     *   }
     * })
     * 
     */
    create<T extends RecipeIngredientCreateArgs>(args: SelectSubset<T, RecipeIngredientCreateArgs<ExtArgs>>): Prisma__RecipeIngredientClient<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RecipeIngredients.
     * @param {RecipeIngredientCreateManyArgs} args - Arguments to create many RecipeIngredients.
     * @example
     * // Create many RecipeIngredients
     * const recipeIngredient = await prisma.recipeIngredient.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RecipeIngredientCreateManyArgs>(args?: SelectSubset<T, RecipeIngredientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RecipeIngredients and returns the data saved in the database.
     * @param {RecipeIngredientCreateManyAndReturnArgs} args - Arguments to create many RecipeIngredients.
     * @example
     * // Create many RecipeIngredients
     * const recipeIngredient = await prisma.recipeIngredient.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RecipeIngredients and only return the `id`
     * const recipeIngredientWithIdOnly = await prisma.recipeIngredient.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RecipeIngredientCreateManyAndReturnArgs>(args?: SelectSubset<T, RecipeIngredientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RecipeIngredient.
     * @param {RecipeIngredientDeleteArgs} args - Arguments to delete one RecipeIngredient.
     * @example
     * // Delete one RecipeIngredient
     * const RecipeIngredient = await prisma.recipeIngredient.delete({
     *   where: {
     *     // ... filter to delete one RecipeIngredient
     *   }
     * })
     * 
     */
    delete<T extends RecipeIngredientDeleteArgs>(args: SelectSubset<T, RecipeIngredientDeleteArgs<ExtArgs>>): Prisma__RecipeIngredientClient<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RecipeIngredient.
     * @param {RecipeIngredientUpdateArgs} args - Arguments to update one RecipeIngredient.
     * @example
     * // Update one RecipeIngredient
     * const recipeIngredient = await prisma.recipeIngredient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RecipeIngredientUpdateArgs>(args: SelectSubset<T, RecipeIngredientUpdateArgs<ExtArgs>>): Prisma__RecipeIngredientClient<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RecipeIngredients.
     * @param {RecipeIngredientDeleteManyArgs} args - Arguments to filter RecipeIngredients to delete.
     * @example
     * // Delete a few RecipeIngredients
     * const { count } = await prisma.recipeIngredient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RecipeIngredientDeleteManyArgs>(args?: SelectSubset<T, RecipeIngredientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RecipeIngredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeIngredientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RecipeIngredients
     * const recipeIngredient = await prisma.recipeIngredient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RecipeIngredientUpdateManyArgs>(args: SelectSubset<T, RecipeIngredientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RecipeIngredient.
     * @param {RecipeIngredientUpsertArgs} args - Arguments to update or create a RecipeIngredient.
     * @example
     * // Update or create a RecipeIngredient
     * const recipeIngredient = await prisma.recipeIngredient.upsert({
     *   create: {
     *     // ... data to create a RecipeIngredient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RecipeIngredient we want to update
     *   }
     * })
     */
    upsert<T extends RecipeIngredientUpsertArgs>(args: SelectSubset<T, RecipeIngredientUpsertArgs<ExtArgs>>): Prisma__RecipeIngredientClient<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RecipeIngredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeIngredientCountArgs} args - Arguments to filter RecipeIngredients to count.
     * @example
     * // Count the number of RecipeIngredients
     * const count = await prisma.recipeIngredient.count({
     *   where: {
     *     // ... the filter for the RecipeIngredients we want to count
     *   }
     * })
    **/
    count<T extends RecipeIngredientCountArgs>(
      args?: Subset<T, RecipeIngredientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecipeIngredientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RecipeIngredient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeIngredientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecipeIngredientAggregateArgs>(args: Subset<T, RecipeIngredientAggregateArgs>): Prisma.PrismaPromise<GetRecipeIngredientAggregateType<T>>

    /**
     * Group by RecipeIngredient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeIngredientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecipeIngredientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecipeIngredientGroupByArgs['orderBy'] }
        : { orderBy?: RecipeIngredientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecipeIngredientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecipeIngredientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RecipeIngredient model
   */
  readonly fields: RecipeIngredientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RecipeIngredient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecipeIngredientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    recipe<T extends RecipeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RecipeDefaultArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RecipeIngredient model
   */ 
  interface RecipeIngredientFieldRefs {
    readonly id: FieldRef<"RecipeIngredient", 'String'>
    readonly recipeId: FieldRef<"RecipeIngredient", 'String'>
    readonly name: FieldRef<"RecipeIngredient", 'String'>
    readonly amount: FieldRef<"RecipeIngredient", 'Float'>
    readonly unit: FieldRef<"RecipeIngredient", 'String'>
    readonly concentration: FieldRef<"RecipeIngredient", 'String'>
    readonly supplier: FieldRef<"RecipeIngredient", 'String'>
    readonly catalogNumber: FieldRef<"RecipeIngredient", 'String'>
    readonly notes: FieldRef<"RecipeIngredient", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RecipeIngredient findUnique
   */
  export type RecipeIngredientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * Filter, which RecipeIngredient to fetch.
     */
    where: RecipeIngredientWhereUniqueInput
  }

  /**
   * RecipeIngredient findUniqueOrThrow
   */
  export type RecipeIngredientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * Filter, which RecipeIngredient to fetch.
     */
    where: RecipeIngredientWhereUniqueInput
  }

  /**
   * RecipeIngredient findFirst
   */
  export type RecipeIngredientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * Filter, which RecipeIngredient to fetch.
     */
    where?: RecipeIngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipeIngredients to fetch.
     */
    orderBy?: RecipeIngredientOrderByWithRelationInput | RecipeIngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RecipeIngredients.
     */
    cursor?: RecipeIngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipeIngredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipeIngredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RecipeIngredients.
     */
    distinct?: RecipeIngredientScalarFieldEnum | RecipeIngredientScalarFieldEnum[]
  }

  /**
   * RecipeIngredient findFirstOrThrow
   */
  export type RecipeIngredientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * Filter, which RecipeIngredient to fetch.
     */
    where?: RecipeIngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipeIngredients to fetch.
     */
    orderBy?: RecipeIngredientOrderByWithRelationInput | RecipeIngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RecipeIngredients.
     */
    cursor?: RecipeIngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipeIngredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipeIngredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RecipeIngredients.
     */
    distinct?: RecipeIngredientScalarFieldEnum | RecipeIngredientScalarFieldEnum[]
  }

  /**
   * RecipeIngredient findMany
   */
  export type RecipeIngredientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * Filter, which RecipeIngredients to fetch.
     */
    where?: RecipeIngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipeIngredients to fetch.
     */
    orderBy?: RecipeIngredientOrderByWithRelationInput | RecipeIngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RecipeIngredients.
     */
    cursor?: RecipeIngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipeIngredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipeIngredients.
     */
    skip?: number
    distinct?: RecipeIngredientScalarFieldEnum | RecipeIngredientScalarFieldEnum[]
  }

  /**
   * RecipeIngredient create
   */
  export type RecipeIngredientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * The data needed to create a RecipeIngredient.
     */
    data: XOR<RecipeIngredientCreateInput, RecipeIngredientUncheckedCreateInput>
  }

  /**
   * RecipeIngredient createMany
   */
  export type RecipeIngredientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RecipeIngredients.
     */
    data: RecipeIngredientCreateManyInput | RecipeIngredientCreateManyInput[]
  }

  /**
   * RecipeIngredient createManyAndReturn
   */
  export type RecipeIngredientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RecipeIngredients.
     */
    data: RecipeIngredientCreateManyInput | RecipeIngredientCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RecipeIngredient update
   */
  export type RecipeIngredientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * The data needed to update a RecipeIngredient.
     */
    data: XOR<RecipeIngredientUpdateInput, RecipeIngredientUncheckedUpdateInput>
    /**
     * Choose, which RecipeIngredient to update.
     */
    where: RecipeIngredientWhereUniqueInput
  }

  /**
   * RecipeIngredient updateMany
   */
  export type RecipeIngredientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RecipeIngredients.
     */
    data: XOR<RecipeIngredientUpdateManyMutationInput, RecipeIngredientUncheckedUpdateManyInput>
    /**
     * Filter which RecipeIngredients to update
     */
    where?: RecipeIngredientWhereInput
  }

  /**
   * RecipeIngredient upsert
   */
  export type RecipeIngredientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * The filter to search for the RecipeIngredient to update in case it exists.
     */
    where: RecipeIngredientWhereUniqueInput
    /**
     * In case the RecipeIngredient found by the `where` argument doesn't exist, create a new RecipeIngredient with this data.
     */
    create: XOR<RecipeIngredientCreateInput, RecipeIngredientUncheckedCreateInput>
    /**
     * In case the RecipeIngredient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecipeIngredientUpdateInput, RecipeIngredientUncheckedUpdateInput>
  }

  /**
   * RecipeIngredient delete
   */
  export type RecipeIngredientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * Filter which RecipeIngredient to delete.
     */
    where: RecipeIngredientWhereUniqueInput
  }

  /**
   * RecipeIngredient deleteMany
   */
  export type RecipeIngredientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RecipeIngredients to delete
     */
    where?: RecipeIngredientWhereInput
  }

  /**
   * RecipeIngredient without action
   */
  export type RecipeIngredientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
  }


  /**
   * Model CalendarEvent
   */

  export type AggregateCalendarEvent = {
    _count: CalendarEventCountAggregateOutputType | null
    _min: CalendarEventMinAggregateOutputType | null
    _max: CalendarEventMaxAggregateOutputType | null
  }

  export type CalendarEventMinAggregateOutputType = {
    id: string | null
    type: string | null
    title: string | null
    description: string | null
    start: Date | null
    end: Date | null
    allDay: boolean | null
    relatedId: string | null
    createdAt: Date | null
    metadata: string | null
  }

  export type CalendarEventMaxAggregateOutputType = {
    id: string | null
    type: string | null
    title: string | null
    description: string | null
    start: Date | null
    end: Date | null
    allDay: boolean | null
    relatedId: string | null
    createdAt: Date | null
    metadata: string | null
  }

  export type CalendarEventCountAggregateOutputType = {
    id: number
    type: number
    title: number
    description: number
    start: number
    end: number
    allDay: number
    relatedId: number
    createdAt: number
    metadata: number
    _all: number
  }


  export type CalendarEventMinAggregateInputType = {
    id?: true
    type?: true
    title?: true
    description?: true
    start?: true
    end?: true
    allDay?: true
    relatedId?: true
    createdAt?: true
    metadata?: true
  }

  export type CalendarEventMaxAggregateInputType = {
    id?: true
    type?: true
    title?: true
    description?: true
    start?: true
    end?: true
    allDay?: true
    relatedId?: true
    createdAt?: true
    metadata?: true
  }

  export type CalendarEventCountAggregateInputType = {
    id?: true
    type?: true
    title?: true
    description?: true
    start?: true
    end?: true
    allDay?: true
    relatedId?: true
    createdAt?: true
    metadata?: true
    _all?: true
  }

  export type CalendarEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CalendarEvent to aggregate.
     */
    where?: CalendarEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalendarEvents to fetch.
     */
    orderBy?: CalendarEventOrderByWithRelationInput | CalendarEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CalendarEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalendarEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalendarEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CalendarEvents
    **/
    _count?: true | CalendarEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CalendarEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CalendarEventMaxAggregateInputType
  }

  export type GetCalendarEventAggregateType<T extends CalendarEventAggregateArgs> = {
        [P in keyof T & keyof AggregateCalendarEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCalendarEvent[P]>
      : GetScalarType<T[P], AggregateCalendarEvent[P]>
  }




  export type CalendarEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CalendarEventWhereInput
    orderBy?: CalendarEventOrderByWithAggregationInput | CalendarEventOrderByWithAggregationInput[]
    by: CalendarEventScalarFieldEnum[] | CalendarEventScalarFieldEnum
    having?: CalendarEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CalendarEventCountAggregateInputType | true
    _min?: CalendarEventMinAggregateInputType
    _max?: CalendarEventMaxAggregateInputType
  }

  export type CalendarEventGroupByOutputType = {
    id: string
    type: string
    title: string
    description: string | null
    start: Date
    end: Date | null
    allDay: boolean | null
    relatedId: string | null
    createdAt: Date
    metadata: string | null
    _count: CalendarEventCountAggregateOutputType | null
    _min: CalendarEventMinAggregateOutputType | null
    _max: CalendarEventMaxAggregateOutputType | null
  }

  type GetCalendarEventGroupByPayload<T extends CalendarEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CalendarEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CalendarEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CalendarEventGroupByOutputType[P]>
            : GetScalarType<T[P], CalendarEventGroupByOutputType[P]>
        }
      >
    >


  export type CalendarEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    description?: boolean
    start?: boolean
    end?: boolean
    allDay?: boolean
    relatedId?: boolean
    createdAt?: boolean
    metadata?: boolean
  }, ExtArgs["result"]["calendarEvent"]>

  export type CalendarEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    description?: boolean
    start?: boolean
    end?: boolean
    allDay?: boolean
    relatedId?: boolean
    createdAt?: boolean
    metadata?: boolean
  }, ExtArgs["result"]["calendarEvent"]>

  export type CalendarEventSelectScalar = {
    id?: boolean
    type?: boolean
    title?: boolean
    description?: boolean
    start?: boolean
    end?: boolean
    allDay?: boolean
    relatedId?: boolean
    createdAt?: boolean
    metadata?: boolean
  }


  export type $CalendarEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CalendarEvent"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      title: string
      description: string | null
      start: Date
      end: Date | null
      allDay: boolean | null
      relatedId: string | null
      createdAt: Date
      metadata: string | null
    }, ExtArgs["result"]["calendarEvent"]>
    composites: {}
  }

  type CalendarEventGetPayload<S extends boolean | null | undefined | CalendarEventDefaultArgs> = $Result.GetResult<Prisma.$CalendarEventPayload, S>

  type CalendarEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CalendarEventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CalendarEventCountAggregateInputType | true
    }

  export interface CalendarEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CalendarEvent'], meta: { name: 'CalendarEvent' } }
    /**
     * Find zero or one CalendarEvent that matches the filter.
     * @param {CalendarEventFindUniqueArgs} args - Arguments to find a CalendarEvent
     * @example
     * // Get one CalendarEvent
     * const calendarEvent = await prisma.calendarEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CalendarEventFindUniqueArgs>(args: SelectSubset<T, CalendarEventFindUniqueArgs<ExtArgs>>): Prisma__CalendarEventClient<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CalendarEvent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CalendarEventFindUniqueOrThrowArgs} args - Arguments to find a CalendarEvent
     * @example
     * // Get one CalendarEvent
     * const calendarEvent = await prisma.calendarEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CalendarEventFindUniqueOrThrowArgs>(args: SelectSubset<T, CalendarEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CalendarEventClient<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CalendarEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarEventFindFirstArgs} args - Arguments to find a CalendarEvent
     * @example
     * // Get one CalendarEvent
     * const calendarEvent = await prisma.calendarEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CalendarEventFindFirstArgs>(args?: SelectSubset<T, CalendarEventFindFirstArgs<ExtArgs>>): Prisma__CalendarEventClient<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CalendarEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarEventFindFirstOrThrowArgs} args - Arguments to find a CalendarEvent
     * @example
     * // Get one CalendarEvent
     * const calendarEvent = await prisma.calendarEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CalendarEventFindFirstOrThrowArgs>(args?: SelectSubset<T, CalendarEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__CalendarEventClient<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CalendarEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CalendarEvents
     * const calendarEvents = await prisma.calendarEvent.findMany()
     * 
     * // Get first 10 CalendarEvents
     * const calendarEvents = await prisma.calendarEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const calendarEventWithIdOnly = await prisma.calendarEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CalendarEventFindManyArgs>(args?: SelectSubset<T, CalendarEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CalendarEvent.
     * @param {CalendarEventCreateArgs} args - Arguments to create a CalendarEvent.
     * @example
     * // Create one CalendarEvent
     * const CalendarEvent = await prisma.calendarEvent.create({
     *   data: {
     *     // ... data to create a CalendarEvent
     *   }
     * })
     * 
     */
    create<T extends CalendarEventCreateArgs>(args: SelectSubset<T, CalendarEventCreateArgs<ExtArgs>>): Prisma__CalendarEventClient<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CalendarEvents.
     * @param {CalendarEventCreateManyArgs} args - Arguments to create many CalendarEvents.
     * @example
     * // Create many CalendarEvents
     * const calendarEvent = await prisma.calendarEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CalendarEventCreateManyArgs>(args?: SelectSubset<T, CalendarEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CalendarEvents and returns the data saved in the database.
     * @param {CalendarEventCreateManyAndReturnArgs} args - Arguments to create many CalendarEvents.
     * @example
     * // Create many CalendarEvents
     * const calendarEvent = await prisma.calendarEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CalendarEvents and only return the `id`
     * const calendarEventWithIdOnly = await prisma.calendarEvent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CalendarEventCreateManyAndReturnArgs>(args?: SelectSubset<T, CalendarEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CalendarEvent.
     * @param {CalendarEventDeleteArgs} args - Arguments to delete one CalendarEvent.
     * @example
     * // Delete one CalendarEvent
     * const CalendarEvent = await prisma.calendarEvent.delete({
     *   where: {
     *     // ... filter to delete one CalendarEvent
     *   }
     * })
     * 
     */
    delete<T extends CalendarEventDeleteArgs>(args: SelectSubset<T, CalendarEventDeleteArgs<ExtArgs>>): Prisma__CalendarEventClient<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CalendarEvent.
     * @param {CalendarEventUpdateArgs} args - Arguments to update one CalendarEvent.
     * @example
     * // Update one CalendarEvent
     * const calendarEvent = await prisma.calendarEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CalendarEventUpdateArgs>(args: SelectSubset<T, CalendarEventUpdateArgs<ExtArgs>>): Prisma__CalendarEventClient<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CalendarEvents.
     * @param {CalendarEventDeleteManyArgs} args - Arguments to filter CalendarEvents to delete.
     * @example
     * // Delete a few CalendarEvents
     * const { count } = await prisma.calendarEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CalendarEventDeleteManyArgs>(args?: SelectSubset<T, CalendarEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CalendarEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CalendarEvents
     * const calendarEvent = await prisma.calendarEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CalendarEventUpdateManyArgs>(args: SelectSubset<T, CalendarEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CalendarEvent.
     * @param {CalendarEventUpsertArgs} args - Arguments to update or create a CalendarEvent.
     * @example
     * // Update or create a CalendarEvent
     * const calendarEvent = await prisma.calendarEvent.upsert({
     *   create: {
     *     // ... data to create a CalendarEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CalendarEvent we want to update
     *   }
     * })
     */
    upsert<T extends CalendarEventUpsertArgs>(args: SelectSubset<T, CalendarEventUpsertArgs<ExtArgs>>): Prisma__CalendarEventClient<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CalendarEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarEventCountArgs} args - Arguments to filter CalendarEvents to count.
     * @example
     * // Count the number of CalendarEvents
     * const count = await prisma.calendarEvent.count({
     *   where: {
     *     // ... the filter for the CalendarEvents we want to count
     *   }
     * })
    **/
    count<T extends CalendarEventCountArgs>(
      args?: Subset<T, CalendarEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CalendarEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CalendarEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CalendarEventAggregateArgs>(args: Subset<T, CalendarEventAggregateArgs>): Prisma.PrismaPromise<GetCalendarEventAggregateType<T>>

    /**
     * Group by CalendarEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CalendarEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CalendarEventGroupByArgs['orderBy'] }
        : { orderBy?: CalendarEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CalendarEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCalendarEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CalendarEvent model
   */
  readonly fields: CalendarEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CalendarEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CalendarEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CalendarEvent model
   */ 
  interface CalendarEventFieldRefs {
    readonly id: FieldRef<"CalendarEvent", 'String'>
    readonly type: FieldRef<"CalendarEvent", 'String'>
    readonly title: FieldRef<"CalendarEvent", 'String'>
    readonly description: FieldRef<"CalendarEvent", 'String'>
    readonly start: FieldRef<"CalendarEvent", 'DateTime'>
    readonly end: FieldRef<"CalendarEvent", 'DateTime'>
    readonly allDay: FieldRef<"CalendarEvent", 'Boolean'>
    readonly relatedId: FieldRef<"CalendarEvent", 'String'>
    readonly createdAt: FieldRef<"CalendarEvent", 'DateTime'>
    readonly metadata: FieldRef<"CalendarEvent", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CalendarEvent findUnique
   */
  export type CalendarEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * Filter, which CalendarEvent to fetch.
     */
    where: CalendarEventWhereUniqueInput
  }

  /**
   * CalendarEvent findUniqueOrThrow
   */
  export type CalendarEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * Filter, which CalendarEvent to fetch.
     */
    where: CalendarEventWhereUniqueInput
  }

  /**
   * CalendarEvent findFirst
   */
  export type CalendarEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * Filter, which CalendarEvent to fetch.
     */
    where?: CalendarEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalendarEvents to fetch.
     */
    orderBy?: CalendarEventOrderByWithRelationInput | CalendarEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CalendarEvents.
     */
    cursor?: CalendarEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalendarEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalendarEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CalendarEvents.
     */
    distinct?: CalendarEventScalarFieldEnum | CalendarEventScalarFieldEnum[]
  }

  /**
   * CalendarEvent findFirstOrThrow
   */
  export type CalendarEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * Filter, which CalendarEvent to fetch.
     */
    where?: CalendarEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalendarEvents to fetch.
     */
    orderBy?: CalendarEventOrderByWithRelationInput | CalendarEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CalendarEvents.
     */
    cursor?: CalendarEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalendarEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalendarEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CalendarEvents.
     */
    distinct?: CalendarEventScalarFieldEnum | CalendarEventScalarFieldEnum[]
  }

  /**
   * CalendarEvent findMany
   */
  export type CalendarEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * Filter, which CalendarEvents to fetch.
     */
    where?: CalendarEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalendarEvents to fetch.
     */
    orderBy?: CalendarEventOrderByWithRelationInput | CalendarEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CalendarEvents.
     */
    cursor?: CalendarEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalendarEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalendarEvents.
     */
    skip?: number
    distinct?: CalendarEventScalarFieldEnum | CalendarEventScalarFieldEnum[]
  }

  /**
   * CalendarEvent create
   */
  export type CalendarEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * The data needed to create a CalendarEvent.
     */
    data: XOR<CalendarEventCreateInput, CalendarEventUncheckedCreateInput>
  }

  /**
   * CalendarEvent createMany
   */
  export type CalendarEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CalendarEvents.
     */
    data: CalendarEventCreateManyInput | CalendarEventCreateManyInput[]
  }

  /**
   * CalendarEvent createManyAndReturn
   */
  export type CalendarEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CalendarEvents.
     */
    data: CalendarEventCreateManyInput | CalendarEventCreateManyInput[]
  }

  /**
   * CalendarEvent update
   */
  export type CalendarEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * The data needed to update a CalendarEvent.
     */
    data: XOR<CalendarEventUpdateInput, CalendarEventUncheckedUpdateInput>
    /**
     * Choose, which CalendarEvent to update.
     */
    where: CalendarEventWhereUniqueInput
  }

  /**
   * CalendarEvent updateMany
   */
  export type CalendarEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CalendarEvents.
     */
    data: XOR<CalendarEventUpdateManyMutationInput, CalendarEventUncheckedUpdateManyInput>
    /**
     * Filter which CalendarEvents to update
     */
    where?: CalendarEventWhereInput
  }

  /**
   * CalendarEvent upsert
   */
  export type CalendarEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * The filter to search for the CalendarEvent to update in case it exists.
     */
    where: CalendarEventWhereUniqueInput
    /**
     * In case the CalendarEvent found by the `where` argument doesn't exist, create a new CalendarEvent with this data.
     */
    create: XOR<CalendarEventCreateInput, CalendarEventUncheckedCreateInput>
    /**
     * In case the CalendarEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CalendarEventUpdateInput, CalendarEventUncheckedUpdateInput>
  }

  /**
   * CalendarEvent delete
   */
  export type CalendarEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * Filter which CalendarEvent to delete.
     */
    where: CalendarEventWhereUniqueInput
  }

  /**
   * CalendarEvent deleteMany
   */
  export type CalendarEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CalendarEvents to delete
     */
    where?: CalendarEventWhereInput
  }

  /**
   * CalendarEvent without action
   */
  export type CalendarEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
  }


  /**
   * Model Task
   */

  export type AggregateTask = {
    _count: TaskCountAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  export type TaskMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    status: string | null
    priority: string | null
    deadline: Date | null
    createdAt: Date | null
    completedAt: Date | null
    autoGenerated: boolean | null
    projectId: string | null
    experimentId: string | null
  }

  export type TaskMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    status: string | null
    priority: string | null
    deadline: Date | null
    createdAt: Date | null
    completedAt: Date | null
    autoGenerated: boolean | null
    projectId: string | null
    experimentId: string | null
  }

  export type TaskCountAggregateOutputType = {
    id: number
    title: number
    description: number
    status: number
    priority: number
    deadline: number
    createdAt: number
    completedAt: number
    autoGenerated: number
    projectId: number
    experimentId: number
    _all: number
  }


  export type TaskMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    deadline?: true
    createdAt?: true
    completedAt?: true
    autoGenerated?: true
    projectId?: true
    experimentId?: true
  }

  export type TaskMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    deadline?: true
    createdAt?: true
    completedAt?: true
    autoGenerated?: true
    projectId?: true
    experimentId?: true
  }

  export type TaskCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    deadline?: true
    createdAt?: true
    completedAt?: true
    autoGenerated?: true
    projectId?: true
    experimentId?: true
    _all?: true
  }

  export type TaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Task to aggregate.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tasks
    **/
    _count?: true | TaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskMaxAggregateInputType
  }

  export type GetTaskAggregateType<T extends TaskAggregateArgs> = {
        [P in keyof T & keyof AggregateTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTask[P]>
      : GetScalarType<T[P], AggregateTask[P]>
  }




  export type TaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithAggregationInput | TaskOrderByWithAggregationInput[]
    by: TaskScalarFieldEnum[] | TaskScalarFieldEnum
    having?: TaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskCountAggregateInputType | true
    _min?: TaskMinAggregateInputType
    _max?: TaskMaxAggregateInputType
  }

  export type TaskGroupByOutputType = {
    id: string
    title: string
    description: string | null
    status: string
    priority: string
    deadline: Date | null
    createdAt: Date
    completedAt: Date | null
    autoGenerated: boolean
    projectId: string
    experimentId: string | null
    _count: TaskCountAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  type GetTaskGroupByPayload<T extends TaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskGroupByOutputType[P]>
            : GetScalarType<T[P], TaskGroupByOutputType[P]>
        }
      >
    >


  export type TaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    deadline?: boolean
    createdAt?: boolean
    completedAt?: boolean
    autoGenerated?: boolean
    projectId?: boolean
    experimentId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    experiment?: boolean | Task$experimentArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    deadline?: boolean
    createdAt?: boolean
    completedAt?: boolean
    autoGenerated?: boolean
    projectId?: boolean
    experimentId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    experiment?: boolean | Task$experimentArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    deadline?: boolean
    createdAt?: boolean
    completedAt?: boolean
    autoGenerated?: boolean
    projectId?: boolean
    experimentId?: boolean
  }

  export type TaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    experiment?: boolean | Task$experimentArgs<ExtArgs>
  }
  export type TaskIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    experiment?: boolean | Task$experimentArgs<ExtArgs>
  }

  export type $TaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Task"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      experiment: Prisma.$ExperimentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      status: string
      priority: string
      deadline: Date | null
      createdAt: Date
      completedAt: Date | null
      autoGenerated: boolean
      projectId: string
      experimentId: string | null
    }, ExtArgs["result"]["task"]>
    composites: {}
  }

  type TaskGetPayload<S extends boolean | null | undefined | TaskDefaultArgs> = $Result.GetResult<Prisma.$TaskPayload, S>

  type TaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TaskFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TaskCountAggregateInputType | true
    }

  export interface TaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Task'], meta: { name: 'Task' } }
    /**
     * Find zero or one Task that matches the filter.
     * @param {TaskFindUniqueArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskFindUniqueArgs>(args: SelectSubset<T, TaskFindUniqueArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Task that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TaskFindUniqueOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskFindUniqueOrThrowArgs>(args: SelectSubset<T, TaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Task that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskFindFirstArgs>(args?: SelectSubset<T, TaskFindFirstArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Task that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskFindFirstOrThrowArgs>(args?: SelectSubset<T, TaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.task.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.task.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskWithIdOnly = await prisma.task.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Task.
     * @param {TaskCreateArgs} args - Arguments to create a Task.
     * @example
     * // Create one Task
     * const Task = await prisma.task.create({
     *   data: {
     *     // ... data to create a Task
     *   }
     * })
     * 
     */
    create<T extends TaskCreateArgs>(args: SelectSubset<T, TaskCreateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tasks.
     * @param {TaskCreateManyArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaskCreateManyArgs>(args?: SelectSubset<T, TaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tasks and returns the data saved in the database.
     * @param {TaskCreateManyAndReturnArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tasks and only return the `id`
     * const taskWithIdOnly = await prisma.task.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TaskCreateManyAndReturnArgs>(args?: SelectSubset<T, TaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Task.
     * @param {TaskDeleteArgs} args - Arguments to delete one Task.
     * @example
     * // Delete one Task
     * const Task = await prisma.task.delete({
     *   where: {
     *     // ... filter to delete one Task
     *   }
     * })
     * 
     */
    delete<T extends TaskDeleteArgs>(args: SelectSubset<T, TaskDeleteArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Task.
     * @param {TaskUpdateArgs} args - Arguments to update one Task.
     * @example
     * // Update one Task
     * const task = await prisma.task.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaskUpdateArgs>(args: SelectSubset<T, TaskUpdateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tasks.
     * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.task.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaskDeleteManyArgs>(args?: SelectSubset<T, TaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaskUpdateManyArgs>(args: SelectSubset<T, TaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Task.
     * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
     * @example
     * // Update or create a Task
     * const task = await prisma.task.upsert({
     *   create: {
     *     // ... data to create a Task
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Task we want to update
     *   }
     * })
     */
    upsert<T extends TaskUpsertArgs>(args: SelectSubset<T, TaskUpsertArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.task.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends TaskCountArgs>(
      args?: Subset<T, TaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskAggregateArgs>(args: Subset<T, TaskAggregateArgs>): Prisma.PrismaPromise<GetTaskAggregateType<T>>

    /**
     * Group by Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskGroupByArgs['orderBy'] }
        : { orderBy?: TaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Task model
   */
  readonly fields: TaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Task.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    experiment<T extends Task$experimentArgs<ExtArgs> = {}>(args?: Subset<T, Task$experimentArgs<ExtArgs>>): Prisma__ExperimentClient<$Result.GetResult<Prisma.$ExperimentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Task model
   */ 
  interface TaskFieldRefs {
    readonly id: FieldRef<"Task", 'String'>
    readonly title: FieldRef<"Task", 'String'>
    readonly description: FieldRef<"Task", 'String'>
    readonly status: FieldRef<"Task", 'String'>
    readonly priority: FieldRef<"Task", 'String'>
    readonly deadline: FieldRef<"Task", 'DateTime'>
    readonly createdAt: FieldRef<"Task", 'DateTime'>
    readonly completedAt: FieldRef<"Task", 'DateTime'>
    readonly autoGenerated: FieldRef<"Task", 'Boolean'>
    readonly projectId: FieldRef<"Task", 'String'>
    readonly experimentId: FieldRef<"Task", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Task findUnique
   */
  export type TaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findUniqueOrThrow
   */
  export type TaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findFirst
   */
  export type TaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findFirstOrThrow
   */
  export type TaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findMany
   */
  export type TaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task create
   */
  export type TaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to create a Task.
     */
    data: XOR<TaskCreateInput, TaskUncheckedCreateInput>
  }

  /**
   * Task createMany
   */
  export type TaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
  }

  /**
   * Task createManyAndReturn
   */
  export type TaskCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Task update
   */
  export type TaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to update a Task.
     */
    data: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
    /**
     * Choose, which Task to update.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task updateMany
   */
  export type TaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
  }

  /**
   * Task upsert
   */
  export type TaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The filter to search for the Task to update in case it exists.
     */
    where: TaskWhereUniqueInput
    /**
     * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
     */
    create: XOR<TaskCreateInput, TaskUncheckedCreateInput>
    /**
     * In case the Task was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
  }

  /**
   * Task delete
   */
  export type TaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter which Task to delete.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task deleteMany
   */
  export type TaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tasks to delete
     */
    where?: TaskWhereInput
  }

  /**
   * Task.experiment
   */
  export type Task$experimentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experiment
     */
    select?: ExperimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentInclude<ExtArgs> | null
    where?: ExperimentWhereInput
  }

  /**
   * Task without action
   */
  export type TaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
  }


  /**
   * Model RecipeExecution
   */

  export type AggregateRecipeExecution = {
    _count: RecipeExecutionCountAggregateOutputType | null
    _min: RecipeExecutionMinAggregateOutputType | null
    _max: RecipeExecutionMaxAggregateOutputType | null
  }

  export type RecipeExecutionMinAggregateOutputType = {
    id: string | null
    recipeId: string | null
    experimentId: string | null
    status: string | null
    startDate: Date | null
    endDate: Date | null
    notes: string | null
    completedSteps: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RecipeExecutionMaxAggregateOutputType = {
    id: string | null
    recipeId: string | null
    experimentId: string | null
    status: string | null
    startDate: Date | null
    endDate: Date | null
    notes: string | null
    completedSteps: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RecipeExecutionCountAggregateOutputType = {
    id: number
    recipeId: number
    experimentId: number
    status: number
    startDate: number
    endDate: number
    notes: number
    completedSteps: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RecipeExecutionMinAggregateInputType = {
    id?: true
    recipeId?: true
    experimentId?: true
    status?: true
    startDate?: true
    endDate?: true
    notes?: true
    completedSteps?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RecipeExecutionMaxAggregateInputType = {
    id?: true
    recipeId?: true
    experimentId?: true
    status?: true
    startDate?: true
    endDate?: true
    notes?: true
    completedSteps?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RecipeExecutionCountAggregateInputType = {
    id?: true
    recipeId?: true
    experimentId?: true
    status?: true
    startDate?: true
    endDate?: true
    notes?: true
    completedSteps?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RecipeExecutionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RecipeExecution to aggregate.
     */
    where?: RecipeExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipeExecutions to fetch.
     */
    orderBy?: RecipeExecutionOrderByWithRelationInput | RecipeExecutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecipeExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipeExecutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipeExecutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RecipeExecutions
    **/
    _count?: true | RecipeExecutionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecipeExecutionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecipeExecutionMaxAggregateInputType
  }

  export type GetRecipeExecutionAggregateType<T extends RecipeExecutionAggregateArgs> = {
        [P in keyof T & keyof AggregateRecipeExecution]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecipeExecution[P]>
      : GetScalarType<T[P], AggregateRecipeExecution[P]>
  }




  export type RecipeExecutionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeExecutionWhereInput
    orderBy?: RecipeExecutionOrderByWithAggregationInput | RecipeExecutionOrderByWithAggregationInput[]
    by: RecipeExecutionScalarFieldEnum[] | RecipeExecutionScalarFieldEnum
    having?: RecipeExecutionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecipeExecutionCountAggregateInputType | true
    _min?: RecipeExecutionMinAggregateInputType
    _max?: RecipeExecutionMaxAggregateInputType
  }

  export type RecipeExecutionGroupByOutputType = {
    id: string
    recipeId: string
    experimentId: string | null
    status: string
    startDate: Date | null
    endDate: Date | null
    notes: string | null
    completedSteps: string | null
    createdAt: Date
    updatedAt: Date
    _count: RecipeExecutionCountAggregateOutputType | null
    _min: RecipeExecutionMinAggregateOutputType | null
    _max: RecipeExecutionMaxAggregateOutputType | null
  }

  type GetRecipeExecutionGroupByPayload<T extends RecipeExecutionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecipeExecutionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecipeExecutionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecipeExecutionGroupByOutputType[P]>
            : GetScalarType<T[P], RecipeExecutionGroupByOutputType[P]>
        }
      >
    >


  export type RecipeExecutionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recipeId?: boolean
    experimentId?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    notes?: boolean
    completedSteps?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    experiment?: boolean | RecipeExecution$experimentArgs<ExtArgs>
  }, ExtArgs["result"]["recipeExecution"]>

  export type RecipeExecutionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recipeId?: boolean
    experimentId?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    notes?: boolean
    completedSteps?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    experiment?: boolean | RecipeExecution$experimentArgs<ExtArgs>
  }, ExtArgs["result"]["recipeExecution"]>

  export type RecipeExecutionSelectScalar = {
    id?: boolean
    recipeId?: boolean
    experimentId?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    notes?: boolean
    completedSteps?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RecipeExecutionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    experiment?: boolean | RecipeExecution$experimentArgs<ExtArgs>
  }
  export type RecipeExecutionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    experiment?: boolean | RecipeExecution$experimentArgs<ExtArgs>
  }

  export type $RecipeExecutionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RecipeExecution"
    objects: {
      recipe: Prisma.$RecipePayload<ExtArgs>
      experiment: Prisma.$ExperimentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      recipeId: string
      experimentId: string | null
      status: string
      startDate: Date | null
      endDate: Date | null
      notes: string | null
      completedSteps: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["recipeExecution"]>
    composites: {}
  }

  type RecipeExecutionGetPayload<S extends boolean | null | undefined | RecipeExecutionDefaultArgs> = $Result.GetResult<Prisma.$RecipeExecutionPayload, S>

  type RecipeExecutionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RecipeExecutionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RecipeExecutionCountAggregateInputType | true
    }

  export interface RecipeExecutionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RecipeExecution'], meta: { name: 'RecipeExecution' } }
    /**
     * Find zero or one RecipeExecution that matches the filter.
     * @param {RecipeExecutionFindUniqueArgs} args - Arguments to find a RecipeExecution
     * @example
     * // Get one RecipeExecution
     * const recipeExecution = await prisma.recipeExecution.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RecipeExecutionFindUniqueArgs>(args: SelectSubset<T, RecipeExecutionFindUniqueArgs<ExtArgs>>): Prisma__RecipeExecutionClient<$Result.GetResult<Prisma.$RecipeExecutionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RecipeExecution that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RecipeExecutionFindUniqueOrThrowArgs} args - Arguments to find a RecipeExecution
     * @example
     * // Get one RecipeExecution
     * const recipeExecution = await prisma.recipeExecution.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RecipeExecutionFindUniqueOrThrowArgs>(args: SelectSubset<T, RecipeExecutionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RecipeExecutionClient<$Result.GetResult<Prisma.$RecipeExecutionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RecipeExecution that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeExecutionFindFirstArgs} args - Arguments to find a RecipeExecution
     * @example
     * // Get one RecipeExecution
     * const recipeExecution = await prisma.recipeExecution.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RecipeExecutionFindFirstArgs>(args?: SelectSubset<T, RecipeExecutionFindFirstArgs<ExtArgs>>): Prisma__RecipeExecutionClient<$Result.GetResult<Prisma.$RecipeExecutionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RecipeExecution that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeExecutionFindFirstOrThrowArgs} args - Arguments to find a RecipeExecution
     * @example
     * // Get one RecipeExecution
     * const recipeExecution = await prisma.recipeExecution.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RecipeExecutionFindFirstOrThrowArgs>(args?: SelectSubset<T, RecipeExecutionFindFirstOrThrowArgs<ExtArgs>>): Prisma__RecipeExecutionClient<$Result.GetResult<Prisma.$RecipeExecutionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RecipeExecutions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeExecutionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RecipeExecutions
     * const recipeExecutions = await prisma.recipeExecution.findMany()
     * 
     * // Get first 10 RecipeExecutions
     * const recipeExecutions = await prisma.recipeExecution.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recipeExecutionWithIdOnly = await prisma.recipeExecution.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RecipeExecutionFindManyArgs>(args?: SelectSubset<T, RecipeExecutionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeExecutionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RecipeExecution.
     * @param {RecipeExecutionCreateArgs} args - Arguments to create a RecipeExecution.
     * @example
     * // Create one RecipeExecution
     * const RecipeExecution = await prisma.recipeExecution.create({
     *   data: {
     *     // ... data to create a RecipeExecution
     *   }
     * })
     * 
     */
    create<T extends RecipeExecutionCreateArgs>(args: SelectSubset<T, RecipeExecutionCreateArgs<ExtArgs>>): Prisma__RecipeExecutionClient<$Result.GetResult<Prisma.$RecipeExecutionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RecipeExecutions.
     * @param {RecipeExecutionCreateManyArgs} args - Arguments to create many RecipeExecutions.
     * @example
     * // Create many RecipeExecutions
     * const recipeExecution = await prisma.recipeExecution.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RecipeExecutionCreateManyArgs>(args?: SelectSubset<T, RecipeExecutionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RecipeExecutions and returns the data saved in the database.
     * @param {RecipeExecutionCreateManyAndReturnArgs} args - Arguments to create many RecipeExecutions.
     * @example
     * // Create many RecipeExecutions
     * const recipeExecution = await prisma.recipeExecution.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RecipeExecutions and only return the `id`
     * const recipeExecutionWithIdOnly = await prisma.recipeExecution.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RecipeExecutionCreateManyAndReturnArgs>(args?: SelectSubset<T, RecipeExecutionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeExecutionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RecipeExecution.
     * @param {RecipeExecutionDeleteArgs} args - Arguments to delete one RecipeExecution.
     * @example
     * // Delete one RecipeExecution
     * const RecipeExecution = await prisma.recipeExecution.delete({
     *   where: {
     *     // ... filter to delete one RecipeExecution
     *   }
     * })
     * 
     */
    delete<T extends RecipeExecutionDeleteArgs>(args: SelectSubset<T, RecipeExecutionDeleteArgs<ExtArgs>>): Prisma__RecipeExecutionClient<$Result.GetResult<Prisma.$RecipeExecutionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RecipeExecution.
     * @param {RecipeExecutionUpdateArgs} args - Arguments to update one RecipeExecution.
     * @example
     * // Update one RecipeExecution
     * const recipeExecution = await prisma.recipeExecution.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RecipeExecutionUpdateArgs>(args: SelectSubset<T, RecipeExecutionUpdateArgs<ExtArgs>>): Prisma__RecipeExecutionClient<$Result.GetResult<Prisma.$RecipeExecutionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RecipeExecutions.
     * @param {RecipeExecutionDeleteManyArgs} args - Arguments to filter RecipeExecutions to delete.
     * @example
     * // Delete a few RecipeExecutions
     * const { count } = await prisma.recipeExecution.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RecipeExecutionDeleteManyArgs>(args?: SelectSubset<T, RecipeExecutionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RecipeExecutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeExecutionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RecipeExecutions
     * const recipeExecution = await prisma.recipeExecution.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RecipeExecutionUpdateManyArgs>(args: SelectSubset<T, RecipeExecutionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RecipeExecution.
     * @param {RecipeExecutionUpsertArgs} args - Arguments to update or create a RecipeExecution.
     * @example
     * // Update or create a RecipeExecution
     * const recipeExecution = await prisma.recipeExecution.upsert({
     *   create: {
     *     // ... data to create a RecipeExecution
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RecipeExecution we want to update
     *   }
     * })
     */
    upsert<T extends RecipeExecutionUpsertArgs>(args: SelectSubset<T, RecipeExecutionUpsertArgs<ExtArgs>>): Prisma__RecipeExecutionClient<$Result.GetResult<Prisma.$RecipeExecutionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RecipeExecutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeExecutionCountArgs} args - Arguments to filter RecipeExecutions to count.
     * @example
     * // Count the number of RecipeExecutions
     * const count = await prisma.recipeExecution.count({
     *   where: {
     *     // ... the filter for the RecipeExecutions we want to count
     *   }
     * })
    **/
    count<T extends RecipeExecutionCountArgs>(
      args?: Subset<T, RecipeExecutionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecipeExecutionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RecipeExecution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeExecutionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecipeExecutionAggregateArgs>(args: Subset<T, RecipeExecutionAggregateArgs>): Prisma.PrismaPromise<GetRecipeExecutionAggregateType<T>>

    /**
     * Group by RecipeExecution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeExecutionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecipeExecutionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecipeExecutionGroupByArgs['orderBy'] }
        : { orderBy?: RecipeExecutionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecipeExecutionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecipeExecutionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RecipeExecution model
   */
  readonly fields: RecipeExecutionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RecipeExecution.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecipeExecutionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    recipe<T extends RecipeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RecipeDefaultArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    experiment<T extends RecipeExecution$experimentArgs<ExtArgs> = {}>(args?: Subset<T, RecipeExecution$experimentArgs<ExtArgs>>): Prisma__ExperimentClient<$Result.GetResult<Prisma.$ExperimentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RecipeExecution model
   */ 
  interface RecipeExecutionFieldRefs {
    readonly id: FieldRef<"RecipeExecution", 'String'>
    readonly recipeId: FieldRef<"RecipeExecution", 'String'>
    readonly experimentId: FieldRef<"RecipeExecution", 'String'>
    readonly status: FieldRef<"RecipeExecution", 'String'>
    readonly startDate: FieldRef<"RecipeExecution", 'DateTime'>
    readonly endDate: FieldRef<"RecipeExecution", 'DateTime'>
    readonly notes: FieldRef<"RecipeExecution", 'String'>
    readonly completedSteps: FieldRef<"RecipeExecution", 'String'>
    readonly createdAt: FieldRef<"RecipeExecution", 'DateTime'>
    readonly updatedAt: FieldRef<"RecipeExecution", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RecipeExecution findUnique
   */
  export type RecipeExecutionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeExecution
     */
    select?: RecipeExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeExecutionInclude<ExtArgs> | null
    /**
     * Filter, which RecipeExecution to fetch.
     */
    where: RecipeExecutionWhereUniqueInput
  }

  /**
   * RecipeExecution findUniqueOrThrow
   */
  export type RecipeExecutionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeExecution
     */
    select?: RecipeExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeExecutionInclude<ExtArgs> | null
    /**
     * Filter, which RecipeExecution to fetch.
     */
    where: RecipeExecutionWhereUniqueInput
  }

  /**
   * RecipeExecution findFirst
   */
  export type RecipeExecutionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeExecution
     */
    select?: RecipeExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeExecutionInclude<ExtArgs> | null
    /**
     * Filter, which RecipeExecution to fetch.
     */
    where?: RecipeExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipeExecutions to fetch.
     */
    orderBy?: RecipeExecutionOrderByWithRelationInput | RecipeExecutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RecipeExecutions.
     */
    cursor?: RecipeExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipeExecutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipeExecutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RecipeExecutions.
     */
    distinct?: RecipeExecutionScalarFieldEnum | RecipeExecutionScalarFieldEnum[]
  }

  /**
   * RecipeExecution findFirstOrThrow
   */
  export type RecipeExecutionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeExecution
     */
    select?: RecipeExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeExecutionInclude<ExtArgs> | null
    /**
     * Filter, which RecipeExecution to fetch.
     */
    where?: RecipeExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipeExecutions to fetch.
     */
    orderBy?: RecipeExecutionOrderByWithRelationInput | RecipeExecutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RecipeExecutions.
     */
    cursor?: RecipeExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipeExecutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipeExecutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RecipeExecutions.
     */
    distinct?: RecipeExecutionScalarFieldEnum | RecipeExecutionScalarFieldEnum[]
  }

  /**
   * RecipeExecution findMany
   */
  export type RecipeExecutionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeExecution
     */
    select?: RecipeExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeExecutionInclude<ExtArgs> | null
    /**
     * Filter, which RecipeExecutions to fetch.
     */
    where?: RecipeExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipeExecutions to fetch.
     */
    orderBy?: RecipeExecutionOrderByWithRelationInput | RecipeExecutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RecipeExecutions.
     */
    cursor?: RecipeExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipeExecutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipeExecutions.
     */
    skip?: number
    distinct?: RecipeExecutionScalarFieldEnum | RecipeExecutionScalarFieldEnum[]
  }

  /**
   * RecipeExecution create
   */
  export type RecipeExecutionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeExecution
     */
    select?: RecipeExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeExecutionInclude<ExtArgs> | null
    /**
     * The data needed to create a RecipeExecution.
     */
    data: XOR<RecipeExecutionCreateInput, RecipeExecutionUncheckedCreateInput>
  }

  /**
   * RecipeExecution createMany
   */
  export type RecipeExecutionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RecipeExecutions.
     */
    data: RecipeExecutionCreateManyInput | RecipeExecutionCreateManyInput[]
  }

  /**
   * RecipeExecution createManyAndReturn
   */
  export type RecipeExecutionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeExecution
     */
    select?: RecipeExecutionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RecipeExecutions.
     */
    data: RecipeExecutionCreateManyInput | RecipeExecutionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeExecutionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RecipeExecution update
   */
  export type RecipeExecutionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeExecution
     */
    select?: RecipeExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeExecutionInclude<ExtArgs> | null
    /**
     * The data needed to update a RecipeExecution.
     */
    data: XOR<RecipeExecutionUpdateInput, RecipeExecutionUncheckedUpdateInput>
    /**
     * Choose, which RecipeExecution to update.
     */
    where: RecipeExecutionWhereUniqueInput
  }

  /**
   * RecipeExecution updateMany
   */
  export type RecipeExecutionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RecipeExecutions.
     */
    data: XOR<RecipeExecutionUpdateManyMutationInput, RecipeExecutionUncheckedUpdateManyInput>
    /**
     * Filter which RecipeExecutions to update
     */
    where?: RecipeExecutionWhereInput
  }

  /**
   * RecipeExecution upsert
   */
  export type RecipeExecutionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeExecution
     */
    select?: RecipeExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeExecutionInclude<ExtArgs> | null
    /**
     * The filter to search for the RecipeExecution to update in case it exists.
     */
    where: RecipeExecutionWhereUniqueInput
    /**
     * In case the RecipeExecution found by the `where` argument doesn't exist, create a new RecipeExecution with this data.
     */
    create: XOR<RecipeExecutionCreateInput, RecipeExecutionUncheckedCreateInput>
    /**
     * In case the RecipeExecution was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecipeExecutionUpdateInput, RecipeExecutionUncheckedUpdateInput>
  }

  /**
   * RecipeExecution delete
   */
  export type RecipeExecutionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeExecution
     */
    select?: RecipeExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeExecutionInclude<ExtArgs> | null
    /**
     * Filter which RecipeExecution to delete.
     */
    where: RecipeExecutionWhereUniqueInput
  }

  /**
   * RecipeExecution deleteMany
   */
  export type RecipeExecutionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RecipeExecutions to delete
     */
    where?: RecipeExecutionWhereInput
  }

  /**
   * RecipeExecution.experiment
   */
  export type RecipeExecution$experimentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experiment
     */
    select?: ExperimentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExperimentInclude<ExtArgs> | null
    where?: ExperimentWhereInput
  }

  /**
   * RecipeExecution without action
   */
  export type RecipeExecutionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeExecution
     */
    select?: RecipeExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeExecutionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    status: 'status',
    startDate: 'startDate',
    lastActivity: 'lastActivity',
    createdAt: 'createdAt'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const ExperimentScalarFieldEnum: {
    id: 'id',
    projectId: 'projectId',
    name: 'name',
    description: 'description',
    createdAt: 'createdAt'
  };

  export type ExperimentScalarFieldEnum = (typeof ExperimentScalarFieldEnum)[keyof typeof ExperimentScalarFieldEnum]


  export const NoteScalarFieldEnum: {
    id: 'id',
    experimentId: 'experimentId',
    title: 'title',
    content: 'content',
    date: 'date',
    type: 'type',
    createdAt: 'createdAt'
  };

  export type NoteScalarFieldEnum = (typeof NoteScalarFieldEnum)[keyof typeof NoteScalarFieldEnum]


  export const DailyNoteScalarFieldEnum: {
    id: 'id',
    date: 'date',
    content: 'content',
    createdAt: 'createdAt'
  };

  export type DailyNoteScalarFieldEnum = (typeof DailyNoteScalarFieldEnum)[keyof typeof DailyNoteScalarFieldEnum]


  export const PDFScalarFieldEnum: {
    id: 'id',
    filePath: 'filePath',
    title: 'title',
    uploadedAt: 'uploadedAt'
  };

  export type PDFScalarFieldEnum = (typeof PDFScalarFieldEnum)[keyof typeof PDFScalarFieldEnum]


  export const HighlightScalarFieldEnum: {
    id: 'id',
    pdfId: 'pdfId',
    page: 'page',
    text: 'text',
    coords: 'coords',
    createdAt: 'createdAt'
  };

  export type HighlightScalarFieldEnum = (typeof HighlightScalarFieldEnum)[keyof typeof HighlightScalarFieldEnum]


  export const LiteratureNoteScalarFieldEnum: {
    id: 'id',
    title: 'title',
    authors: 'authors',
    year: 'year',
    journal: 'journal',
    doi: 'doi',
    abstract: 'abstract',
    tags: 'tags',
    citation: 'citation',
    synonyms: 'synonyms',
    userNote: 'userNote',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LiteratureNoteScalarFieldEnum = (typeof LiteratureNoteScalarFieldEnum)[keyof typeof LiteratureNoteScalarFieldEnum]


  export const DatabaseEntryScalarFieldEnum: {
    id: 'id',
    type: 'type',
    name: 'name',
    description: 'description',
    properties: 'properties',
    molecularWeight: 'molecularWeight',
    concentration: 'concentration',
    storage: 'storage',
    supplier: 'supplier',
    catalogNumber: 'catalogNumber',
    purity: 'purity',
    sequence: 'sequence',
    organism: 'organism',
    function: 'function',
    protocol: 'protocol',
    equipment: 'equipment',
    duration: 'duration',
    temperature: 'temperature',
    pH: 'pH',
    createdAt: 'createdAt',
    metadata: 'metadata',
    relatedResearch: 'relatedResearch'
  };

  export type DatabaseEntryScalarFieldEnum = (typeof DatabaseEntryScalarFieldEnum)[keyof typeof DatabaseEntryScalarFieldEnum]


  export const TableScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    experimentId: 'experimentId',
    columns: 'columns',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TableScalarFieldEnum = (typeof TableScalarFieldEnum)[keyof typeof TableScalarFieldEnum]


  export const TableRowScalarFieldEnum: {
    id: 'id',
    tableId: 'tableId',
    data: 'data',
    rowNumber: 'rowNumber',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TableRowScalarFieldEnum = (typeof TableRowScalarFieldEnum)[keyof typeof TableRowScalarFieldEnum]


  export const ProtocolScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    category: 'category',
    version: 'version',
    steps: 'steps',
    equipment: 'equipment',
    reagents: 'reagents',
    safetyNotes: 'safetyNotes',
    expectedDuration: 'expectedDuration',
    difficulty: 'difficulty',
    successRate: 'successRate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProtocolScalarFieldEnum = (typeof ProtocolScalarFieldEnum)[keyof typeof ProtocolScalarFieldEnum]


  export const ProtocolExecutionScalarFieldEnum: {
    id: 'id',
    protocolId: 'protocolId',
    experimentId: 'experimentId',
    status: 'status',
    startDate: 'startDate',
    endDate: 'endDate',
    notes: 'notes',
    modifications: 'modifications',
    results: 'results',
    issues: 'issues',
    nextSteps: 'nextSteps',
    executedBy: 'executedBy',
    completedSteps: 'completedSteps',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProtocolExecutionScalarFieldEnum = (typeof ProtocolExecutionScalarFieldEnum)[keyof typeof ProtocolExecutionScalarFieldEnum]


  export const LinkScalarFieldEnum: {
    id: 'id',
    sourceType: 'sourceType',
    sourceId: 'sourceId',
    targetType: 'targetType',
    targetId: 'targetId',
    createdAt: 'createdAt'
  };

  export type LinkScalarFieldEnum = (typeof LinkScalarFieldEnum)[keyof typeof LinkScalarFieldEnum]


  export const RecipeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    category: 'category',
    type: 'type',
    steps: 'steps',
    instructions: 'instructions',
    notes: 'notes',
    pH: 'pH',
    osmolarity: 'osmolarity',
    storage: 'storage',
    shelfLife: 'shelfLife',
    source: 'source',
    version: 'version',
    isPublic: 'isPublic',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RecipeScalarFieldEnum = (typeof RecipeScalarFieldEnum)[keyof typeof RecipeScalarFieldEnum]


  export const RecipeIngredientScalarFieldEnum: {
    id: 'id',
    recipeId: 'recipeId',
    name: 'name',
    amount: 'amount',
    unit: 'unit',
    concentration: 'concentration',
    supplier: 'supplier',
    catalogNumber: 'catalogNumber',
    notes: 'notes'
  };

  export type RecipeIngredientScalarFieldEnum = (typeof RecipeIngredientScalarFieldEnum)[keyof typeof RecipeIngredientScalarFieldEnum]


  export const CalendarEventScalarFieldEnum: {
    id: 'id',
    type: 'type',
    title: 'title',
    description: 'description',
    start: 'start',
    end: 'end',
    allDay: 'allDay',
    relatedId: 'relatedId',
    createdAt: 'createdAt',
    metadata: 'metadata'
  };

  export type CalendarEventScalarFieldEnum = (typeof CalendarEventScalarFieldEnum)[keyof typeof CalendarEventScalarFieldEnum]


  export const TaskScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    status: 'status',
    priority: 'priority',
    deadline: 'deadline',
    createdAt: 'createdAt',
    completedAt: 'completedAt',
    autoGenerated: 'autoGenerated',
    projectId: 'projectId',
    experimentId: 'experimentId'
  };

  export type TaskScalarFieldEnum = (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum]


  export const RecipeExecutionScalarFieldEnum: {
    id: 'id',
    recipeId: 'recipeId',
    experimentId: 'experimentId',
    status: 'status',
    startDate: 'startDate',
    endDate: 'endDate',
    notes: 'notes',
    completedSteps: 'completedSteps',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RecipeExecutionScalarFieldEnum = (typeof RecipeExecutionScalarFieldEnum)[keyof typeof RecipeExecutionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type ProjectWhereInput = {
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    id?: StringFilter<"Project"> | string
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    status?: StringFilter<"Project"> | string
    startDate?: DateTimeNullableFilter<"Project"> | Date | string | null
    lastActivity?: DateTimeNullableFilter<"Project"> | Date | string | null
    createdAt?: DateTimeFilter<"Project"> | Date | string
    experiments?: ExperimentListRelationFilter
    tasks?: TaskListRelationFilter
  }

  export type ProjectOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    startDate?: SortOrderInput | SortOrder
    lastActivity?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    experiments?: ExperimentOrderByRelationAggregateInput
    tasks?: TaskOrderByRelationAggregateInput
  }

  export type ProjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    status?: StringFilter<"Project"> | string
    startDate?: DateTimeNullableFilter<"Project"> | Date | string | null
    lastActivity?: DateTimeNullableFilter<"Project"> | Date | string | null
    createdAt?: DateTimeFilter<"Project"> | Date | string
    experiments?: ExperimentListRelationFilter
    tasks?: TaskListRelationFilter
  }, "id">

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    startDate?: SortOrderInput | SortOrder
    lastActivity?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    OR?: ProjectScalarWhereWithAggregatesInput[]
    NOT?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Project"> | string
    name?: StringWithAggregatesFilter<"Project"> | string
    description?: StringNullableWithAggregatesFilter<"Project"> | string | null
    status?: StringWithAggregatesFilter<"Project"> | string
    startDate?: DateTimeNullableWithAggregatesFilter<"Project"> | Date | string | null
    lastActivity?: DateTimeNullableWithAggregatesFilter<"Project"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
  }

  export type ExperimentWhereInput = {
    AND?: ExperimentWhereInput | ExperimentWhereInput[]
    OR?: ExperimentWhereInput[]
    NOT?: ExperimentWhereInput | ExperimentWhereInput[]
    id?: StringFilter<"Experiment"> | string
    projectId?: StringFilter<"Experiment"> | string
    name?: StringFilter<"Experiment"> | string
    description?: StringNullableFilter<"Experiment"> | string | null
    createdAt?: DateTimeFilter<"Experiment"> | Date | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    notes?: NoteListRelationFilter
    tables?: TableListRelationFilter
    protocolExecutions?: ProtocolExecutionListRelationFilter
    tasks?: TaskListRelationFilter
    recipeExecutions?: RecipeExecutionListRelationFilter
  }

  export type ExperimentOrderByWithRelationInput = {
    id?: SortOrder
    projectId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    project?: ProjectOrderByWithRelationInput
    notes?: NoteOrderByRelationAggregateInput
    tables?: TableOrderByRelationAggregateInput
    protocolExecutions?: ProtocolExecutionOrderByRelationAggregateInput
    tasks?: TaskOrderByRelationAggregateInput
    recipeExecutions?: RecipeExecutionOrderByRelationAggregateInput
  }

  export type ExperimentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ExperimentWhereInput | ExperimentWhereInput[]
    OR?: ExperimentWhereInput[]
    NOT?: ExperimentWhereInput | ExperimentWhereInput[]
    projectId?: StringFilter<"Experiment"> | string
    name?: StringFilter<"Experiment"> | string
    description?: StringNullableFilter<"Experiment"> | string | null
    createdAt?: DateTimeFilter<"Experiment"> | Date | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    notes?: NoteListRelationFilter
    tables?: TableListRelationFilter
    protocolExecutions?: ProtocolExecutionListRelationFilter
    tasks?: TaskListRelationFilter
    recipeExecutions?: RecipeExecutionListRelationFilter
  }, "id">

  export type ExperimentOrderByWithAggregationInput = {
    id?: SortOrder
    projectId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ExperimentCountOrderByAggregateInput
    _max?: ExperimentMaxOrderByAggregateInput
    _min?: ExperimentMinOrderByAggregateInput
  }

  export type ExperimentScalarWhereWithAggregatesInput = {
    AND?: ExperimentScalarWhereWithAggregatesInput | ExperimentScalarWhereWithAggregatesInput[]
    OR?: ExperimentScalarWhereWithAggregatesInput[]
    NOT?: ExperimentScalarWhereWithAggregatesInput | ExperimentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Experiment"> | string
    projectId?: StringWithAggregatesFilter<"Experiment"> | string
    name?: StringWithAggregatesFilter<"Experiment"> | string
    description?: StringNullableWithAggregatesFilter<"Experiment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Experiment"> | Date | string
  }

  export type NoteWhereInput = {
    AND?: NoteWhereInput | NoteWhereInput[]
    OR?: NoteWhereInput[]
    NOT?: NoteWhereInput | NoteWhereInput[]
    id?: StringFilter<"Note"> | string
    experimentId?: StringNullableFilter<"Note"> | string | null
    title?: StringFilter<"Note"> | string
    content?: StringFilter<"Note"> | string
    date?: DateTimeNullableFilter<"Note"> | Date | string | null
    type?: StringFilter<"Note"> | string
    createdAt?: DateTimeFilter<"Note"> | Date | string
    experiment?: XOR<ExperimentNullableRelationFilter, ExperimentWhereInput> | null
    links?: LinkListRelationFilter
  }

  export type NoteOrderByWithRelationInput = {
    id?: SortOrder
    experimentId?: SortOrderInput | SortOrder
    title?: SortOrder
    content?: SortOrder
    date?: SortOrderInput | SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    experiment?: ExperimentOrderByWithRelationInput
    links?: LinkOrderByRelationAggregateInput
  }

  export type NoteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NoteWhereInput | NoteWhereInput[]
    OR?: NoteWhereInput[]
    NOT?: NoteWhereInput | NoteWhereInput[]
    experimentId?: StringNullableFilter<"Note"> | string | null
    title?: StringFilter<"Note"> | string
    content?: StringFilter<"Note"> | string
    date?: DateTimeNullableFilter<"Note"> | Date | string | null
    type?: StringFilter<"Note"> | string
    createdAt?: DateTimeFilter<"Note"> | Date | string
    experiment?: XOR<ExperimentNullableRelationFilter, ExperimentWhereInput> | null
    links?: LinkListRelationFilter
  }, "id">

  export type NoteOrderByWithAggregationInput = {
    id?: SortOrder
    experimentId?: SortOrderInput | SortOrder
    title?: SortOrder
    content?: SortOrder
    date?: SortOrderInput | SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    _count?: NoteCountOrderByAggregateInput
    _max?: NoteMaxOrderByAggregateInput
    _min?: NoteMinOrderByAggregateInput
  }

  export type NoteScalarWhereWithAggregatesInput = {
    AND?: NoteScalarWhereWithAggregatesInput | NoteScalarWhereWithAggregatesInput[]
    OR?: NoteScalarWhereWithAggregatesInput[]
    NOT?: NoteScalarWhereWithAggregatesInput | NoteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Note"> | string
    experimentId?: StringNullableWithAggregatesFilter<"Note"> | string | null
    title?: StringWithAggregatesFilter<"Note"> | string
    content?: StringWithAggregatesFilter<"Note"> | string
    date?: DateTimeNullableWithAggregatesFilter<"Note"> | Date | string | null
    type?: StringWithAggregatesFilter<"Note"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Note"> | Date | string
  }

  export type DailyNoteWhereInput = {
    AND?: DailyNoteWhereInput | DailyNoteWhereInput[]
    OR?: DailyNoteWhereInput[]
    NOT?: DailyNoteWhereInput | DailyNoteWhereInput[]
    id?: StringFilter<"DailyNote"> | string
    date?: DateTimeFilter<"DailyNote"> | Date | string
    content?: StringFilter<"DailyNote"> | string
    createdAt?: DateTimeFilter<"DailyNote"> | Date | string
  }

  export type DailyNoteOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type DailyNoteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    date?: Date | string
    AND?: DailyNoteWhereInput | DailyNoteWhereInput[]
    OR?: DailyNoteWhereInput[]
    NOT?: DailyNoteWhereInput | DailyNoteWhereInput[]
    content?: StringFilter<"DailyNote"> | string
    createdAt?: DateTimeFilter<"DailyNote"> | Date | string
  }, "id" | "date">

  export type DailyNoteOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    _count?: DailyNoteCountOrderByAggregateInput
    _max?: DailyNoteMaxOrderByAggregateInput
    _min?: DailyNoteMinOrderByAggregateInput
  }

  export type DailyNoteScalarWhereWithAggregatesInput = {
    AND?: DailyNoteScalarWhereWithAggregatesInput | DailyNoteScalarWhereWithAggregatesInput[]
    OR?: DailyNoteScalarWhereWithAggregatesInput[]
    NOT?: DailyNoteScalarWhereWithAggregatesInput | DailyNoteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DailyNote"> | string
    date?: DateTimeWithAggregatesFilter<"DailyNote"> | Date | string
    content?: StringWithAggregatesFilter<"DailyNote"> | string
    createdAt?: DateTimeWithAggregatesFilter<"DailyNote"> | Date | string
  }

  export type PDFWhereInput = {
    AND?: PDFWhereInput | PDFWhereInput[]
    OR?: PDFWhereInput[]
    NOT?: PDFWhereInput | PDFWhereInput[]
    id?: StringFilter<"PDF"> | string
    filePath?: StringFilter<"PDF"> | string
    title?: StringFilter<"PDF"> | string
    uploadedAt?: DateTimeFilter<"PDF"> | Date | string
    highlights?: HighlightListRelationFilter
  }

  export type PDFOrderByWithRelationInput = {
    id?: SortOrder
    filePath?: SortOrder
    title?: SortOrder
    uploadedAt?: SortOrder
    highlights?: HighlightOrderByRelationAggregateInput
  }

  export type PDFWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PDFWhereInput | PDFWhereInput[]
    OR?: PDFWhereInput[]
    NOT?: PDFWhereInput | PDFWhereInput[]
    filePath?: StringFilter<"PDF"> | string
    title?: StringFilter<"PDF"> | string
    uploadedAt?: DateTimeFilter<"PDF"> | Date | string
    highlights?: HighlightListRelationFilter
  }, "id">

  export type PDFOrderByWithAggregationInput = {
    id?: SortOrder
    filePath?: SortOrder
    title?: SortOrder
    uploadedAt?: SortOrder
    _count?: PDFCountOrderByAggregateInput
    _max?: PDFMaxOrderByAggregateInput
    _min?: PDFMinOrderByAggregateInput
  }

  export type PDFScalarWhereWithAggregatesInput = {
    AND?: PDFScalarWhereWithAggregatesInput | PDFScalarWhereWithAggregatesInput[]
    OR?: PDFScalarWhereWithAggregatesInput[]
    NOT?: PDFScalarWhereWithAggregatesInput | PDFScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PDF"> | string
    filePath?: StringWithAggregatesFilter<"PDF"> | string
    title?: StringWithAggregatesFilter<"PDF"> | string
    uploadedAt?: DateTimeWithAggregatesFilter<"PDF"> | Date | string
  }

  export type HighlightWhereInput = {
    AND?: HighlightWhereInput | HighlightWhereInput[]
    OR?: HighlightWhereInput[]
    NOT?: HighlightWhereInput | HighlightWhereInput[]
    id?: StringFilter<"Highlight"> | string
    pdfId?: StringFilter<"Highlight"> | string
    page?: IntFilter<"Highlight"> | number
    text?: StringFilter<"Highlight"> | string
    coords?: StringNullableFilter<"Highlight"> | string | null
    createdAt?: DateTimeFilter<"Highlight"> | Date | string
    pdf?: XOR<PDFRelationFilter, PDFWhereInput>
    links?: LinkListRelationFilter
  }

  export type HighlightOrderByWithRelationInput = {
    id?: SortOrder
    pdfId?: SortOrder
    page?: SortOrder
    text?: SortOrder
    coords?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    pdf?: PDFOrderByWithRelationInput
    links?: LinkOrderByRelationAggregateInput
  }

  export type HighlightWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: HighlightWhereInput | HighlightWhereInput[]
    OR?: HighlightWhereInput[]
    NOT?: HighlightWhereInput | HighlightWhereInput[]
    pdfId?: StringFilter<"Highlight"> | string
    page?: IntFilter<"Highlight"> | number
    text?: StringFilter<"Highlight"> | string
    coords?: StringNullableFilter<"Highlight"> | string | null
    createdAt?: DateTimeFilter<"Highlight"> | Date | string
    pdf?: XOR<PDFRelationFilter, PDFWhereInput>
    links?: LinkListRelationFilter
  }, "id">

  export type HighlightOrderByWithAggregationInput = {
    id?: SortOrder
    pdfId?: SortOrder
    page?: SortOrder
    text?: SortOrder
    coords?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: HighlightCountOrderByAggregateInput
    _avg?: HighlightAvgOrderByAggregateInput
    _max?: HighlightMaxOrderByAggregateInput
    _min?: HighlightMinOrderByAggregateInput
    _sum?: HighlightSumOrderByAggregateInput
  }

  export type HighlightScalarWhereWithAggregatesInput = {
    AND?: HighlightScalarWhereWithAggregatesInput | HighlightScalarWhereWithAggregatesInput[]
    OR?: HighlightScalarWhereWithAggregatesInput[]
    NOT?: HighlightScalarWhereWithAggregatesInput | HighlightScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Highlight"> | string
    pdfId?: StringWithAggregatesFilter<"Highlight"> | string
    page?: IntWithAggregatesFilter<"Highlight"> | number
    text?: StringWithAggregatesFilter<"Highlight"> | string
    coords?: StringNullableWithAggregatesFilter<"Highlight"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Highlight"> | Date | string
  }

  export type LiteratureNoteWhereInput = {
    AND?: LiteratureNoteWhereInput | LiteratureNoteWhereInput[]
    OR?: LiteratureNoteWhereInput[]
    NOT?: LiteratureNoteWhereInput | LiteratureNoteWhereInput[]
    id?: StringFilter<"LiteratureNote"> | string
    title?: StringFilter<"LiteratureNote"> | string
    authors?: StringNullableFilter<"LiteratureNote"> | string | null
    year?: StringNullableFilter<"LiteratureNote"> | string | null
    journal?: StringNullableFilter<"LiteratureNote"> | string | null
    doi?: StringNullableFilter<"LiteratureNote"> | string | null
    abstract?: StringNullableFilter<"LiteratureNote"> | string | null
    tags?: StringNullableFilter<"LiteratureNote"> | string | null
    citation?: StringNullableFilter<"LiteratureNote"> | string | null
    synonyms?: StringNullableFilter<"LiteratureNote"> | string | null
    userNote?: StringNullableFilter<"LiteratureNote"> | string | null
    createdAt?: DateTimeFilter<"LiteratureNote"> | Date | string
    updatedAt?: DateTimeFilter<"LiteratureNote"> | Date | string
    relatedEntries?: DatabaseEntryListRelationFilter
  }

  export type LiteratureNoteOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    authors?: SortOrderInput | SortOrder
    year?: SortOrderInput | SortOrder
    journal?: SortOrderInput | SortOrder
    doi?: SortOrderInput | SortOrder
    abstract?: SortOrderInput | SortOrder
    tags?: SortOrderInput | SortOrder
    citation?: SortOrderInput | SortOrder
    synonyms?: SortOrderInput | SortOrder
    userNote?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    relatedEntries?: DatabaseEntryOrderByRelationAggregateInput
  }

  export type LiteratureNoteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LiteratureNoteWhereInput | LiteratureNoteWhereInput[]
    OR?: LiteratureNoteWhereInput[]
    NOT?: LiteratureNoteWhereInput | LiteratureNoteWhereInput[]
    title?: StringFilter<"LiteratureNote"> | string
    authors?: StringNullableFilter<"LiteratureNote"> | string | null
    year?: StringNullableFilter<"LiteratureNote"> | string | null
    journal?: StringNullableFilter<"LiteratureNote"> | string | null
    doi?: StringNullableFilter<"LiteratureNote"> | string | null
    abstract?: StringNullableFilter<"LiteratureNote"> | string | null
    tags?: StringNullableFilter<"LiteratureNote"> | string | null
    citation?: StringNullableFilter<"LiteratureNote"> | string | null
    synonyms?: StringNullableFilter<"LiteratureNote"> | string | null
    userNote?: StringNullableFilter<"LiteratureNote"> | string | null
    createdAt?: DateTimeFilter<"LiteratureNote"> | Date | string
    updatedAt?: DateTimeFilter<"LiteratureNote"> | Date | string
    relatedEntries?: DatabaseEntryListRelationFilter
  }, "id">

  export type LiteratureNoteOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    authors?: SortOrderInput | SortOrder
    year?: SortOrderInput | SortOrder
    journal?: SortOrderInput | SortOrder
    doi?: SortOrderInput | SortOrder
    abstract?: SortOrderInput | SortOrder
    tags?: SortOrderInput | SortOrder
    citation?: SortOrderInput | SortOrder
    synonyms?: SortOrderInput | SortOrder
    userNote?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LiteratureNoteCountOrderByAggregateInput
    _max?: LiteratureNoteMaxOrderByAggregateInput
    _min?: LiteratureNoteMinOrderByAggregateInput
  }

  export type LiteratureNoteScalarWhereWithAggregatesInput = {
    AND?: LiteratureNoteScalarWhereWithAggregatesInput | LiteratureNoteScalarWhereWithAggregatesInput[]
    OR?: LiteratureNoteScalarWhereWithAggregatesInput[]
    NOT?: LiteratureNoteScalarWhereWithAggregatesInput | LiteratureNoteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LiteratureNote"> | string
    title?: StringWithAggregatesFilter<"LiteratureNote"> | string
    authors?: StringNullableWithAggregatesFilter<"LiteratureNote"> | string | null
    year?: StringNullableWithAggregatesFilter<"LiteratureNote"> | string | null
    journal?: StringNullableWithAggregatesFilter<"LiteratureNote"> | string | null
    doi?: StringNullableWithAggregatesFilter<"LiteratureNote"> | string | null
    abstract?: StringNullableWithAggregatesFilter<"LiteratureNote"> | string | null
    tags?: StringNullableWithAggregatesFilter<"LiteratureNote"> | string | null
    citation?: StringNullableWithAggregatesFilter<"LiteratureNote"> | string | null
    synonyms?: StringNullableWithAggregatesFilter<"LiteratureNote"> | string | null
    userNote?: StringNullableWithAggregatesFilter<"LiteratureNote"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"LiteratureNote"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"LiteratureNote"> | Date | string
  }

  export type DatabaseEntryWhereInput = {
    AND?: DatabaseEntryWhereInput | DatabaseEntryWhereInput[]
    OR?: DatabaseEntryWhereInput[]
    NOT?: DatabaseEntryWhereInput | DatabaseEntryWhereInput[]
    id?: StringFilter<"DatabaseEntry"> | string
    type?: StringFilter<"DatabaseEntry"> | string
    name?: StringFilter<"DatabaseEntry"> | string
    description?: StringNullableFilter<"DatabaseEntry"> | string | null
    properties?: StringNullableFilter<"DatabaseEntry"> | string | null
    molecularWeight?: FloatNullableFilter<"DatabaseEntry"> | number | null
    concentration?: StringNullableFilter<"DatabaseEntry"> | string | null
    storage?: StringNullableFilter<"DatabaseEntry"> | string | null
    supplier?: StringNullableFilter<"DatabaseEntry"> | string | null
    catalogNumber?: StringNullableFilter<"DatabaseEntry"> | string | null
    purity?: StringNullableFilter<"DatabaseEntry"> | string | null
    sequence?: StringNullableFilter<"DatabaseEntry"> | string | null
    organism?: StringNullableFilter<"DatabaseEntry"> | string | null
    function?: StringNullableFilter<"DatabaseEntry"> | string | null
    protocol?: StringNullableFilter<"DatabaseEntry"> | string | null
    equipment?: StringNullableFilter<"DatabaseEntry"> | string | null
    duration?: StringNullableFilter<"DatabaseEntry"> | string | null
    temperature?: StringNullableFilter<"DatabaseEntry"> | string | null
    pH?: StringNullableFilter<"DatabaseEntry"> | string | null
    createdAt?: DateTimeFilter<"DatabaseEntry"> | Date | string
    metadata?: StringNullableFilter<"DatabaseEntry"> | string | null
    relatedResearch?: StringNullableFilter<"DatabaseEntry"> | string | null
    relatedLitNotes?: LiteratureNoteListRelationFilter
    links?: LinkListRelationFilter
  }

  export type DatabaseEntryOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    properties?: SortOrderInput | SortOrder
    molecularWeight?: SortOrderInput | SortOrder
    concentration?: SortOrderInput | SortOrder
    storage?: SortOrderInput | SortOrder
    supplier?: SortOrderInput | SortOrder
    catalogNumber?: SortOrderInput | SortOrder
    purity?: SortOrderInput | SortOrder
    sequence?: SortOrderInput | SortOrder
    organism?: SortOrderInput | SortOrder
    function?: SortOrderInput | SortOrder
    protocol?: SortOrderInput | SortOrder
    equipment?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    temperature?: SortOrderInput | SortOrder
    pH?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    metadata?: SortOrderInput | SortOrder
    relatedResearch?: SortOrderInput | SortOrder
    relatedLitNotes?: LiteratureNoteOrderByRelationAggregateInput
    links?: LinkOrderByRelationAggregateInput
  }

  export type DatabaseEntryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DatabaseEntryWhereInput | DatabaseEntryWhereInput[]
    OR?: DatabaseEntryWhereInput[]
    NOT?: DatabaseEntryWhereInput | DatabaseEntryWhereInput[]
    type?: StringFilter<"DatabaseEntry"> | string
    name?: StringFilter<"DatabaseEntry"> | string
    description?: StringNullableFilter<"DatabaseEntry"> | string | null
    properties?: StringNullableFilter<"DatabaseEntry"> | string | null
    molecularWeight?: FloatNullableFilter<"DatabaseEntry"> | number | null
    concentration?: StringNullableFilter<"DatabaseEntry"> | string | null
    storage?: StringNullableFilter<"DatabaseEntry"> | string | null
    supplier?: StringNullableFilter<"DatabaseEntry"> | string | null
    catalogNumber?: StringNullableFilter<"DatabaseEntry"> | string | null
    purity?: StringNullableFilter<"DatabaseEntry"> | string | null
    sequence?: StringNullableFilter<"DatabaseEntry"> | string | null
    organism?: StringNullableFilter<"DatabaseEntry"> | string | null
    function?: StringNullableFilter<"DatabaseEntry"> | string | null
    protocol?: StringNullableFilter<"DatabaseEntry"> | string | null
    equipment?: StringNullableFilter<"DatabaseEntry"> | string | null
    duration?: StringNullableFilter<"DatabaseEntry"> | string | null
    temperature?: StringNullableFilter<"DatabaseEntry"> | string | null
    pH?: StringNullableFilter<"DatabaseEntry"> | string | null
    createdAt?: DateTimeFilter<"DatabaseEntry"> | Date | string
    metadata?: StringNullableFilter<"DatabaseEntry"> | string | null
    relatedResearch?: StringNullableFilter<"DatabaseEntry"> | string | null
    relatedLitNotes?: LiteratureNoteListRelationFilter
    links?: LinkListRelationFilter
  }, "id">

  export type DatabaseEntryOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    properties?: SortOrderInput | SortOrder
    molecularWeight?: SortOrderInput | SortOrder
    concentration?: SortOrderInput | SortOrder
    storage?: SortOrderInput | SortOrder
    supplier?: SortOrderInput | SortOrder
    catalogNumber?: SortOrderInput | SortOrder
    purity?: SortOrderInput | SortOrder
    sequence?: SortOrderInput | SortOrder
    organism?: SortOrderInput | SortOrder
    function?: SortOrderInput | SortOrder
    protocol?: SortOrderInput | SortOrder
    equipment?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    temperature?: SortOrderInput | SortOrder
    pH?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    metadata?: SortOrderInput | SortOrder
    relatedResearch?: SortOrderInput | SortOrder
    _count?: DatabaseEntryCountOrderByAggregateInput
    _avg?: DatabaseEntryAvgOrderByAggregateInput
    _max?: DatabaseEntryMaxOrderByAggregateInput
    _min?: DatabaseEntryMinOrderByAggregateInput
    _sum?: DatabaseEntrySumOrderByAggregateInput
  }

  export type DatabaseEntryScalarWhereWithAggregatesInput = {
    AND?: DatabaseEntryScalarWhereWithAggregatesInput | DatabaseEntryScalarWhereWithAggregatesInput[]
    OR?: DatabaseEntryScalarWhereWithAggregatesInput[]
    NOT?: DatabaseEntryScalarWhereWithAggregatesInput | DatabaseEntryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DatabaseEntry"> | string
    type?: StringWithAggregatesFilter<"DatabaseEntry"> | string
    name?: StringWithAggregatesFilter<"DatabaseEntry"> | string
    description?: StringNullableWithAggregatesFilter<"DatabaseEntry"> | string | null
    properties?: StringNullableWithAggregatesFilter<"DatabaseEntry"> | string | null
    molecularWeight?: FloatNullableWithAggregatesFilter<"DatabaseEntry"> | number | null
    concentration?: StringNullableWithAggregatesFilter<"DatabaseEntry"> | string | null
    storage?: StringNullableWithAggregatesFilter<"DatabaseEntry"> | string | null
    supplier?: StringNullableWithAggregatesFilter<"DatabaseEntry"> | string | null
    catalogNumber?: StringNullableWithAggregatesFilter<"DatabaseEntry"> | string | null
    purity?: StringNullableWithAggregatesFilter<"DatabaseEntry"> | string | null
    sequence?: StringNullableWithAggregatesFilter<"DatabaseEntry"> | string | null
    organism?: StringNullableWithAggregatesFilter<"DatabaseEntry"> | string | null
    function?: StringNullableWithAggregatesFilter<"DatabaseEntry"> | string | null
    protocol?: StringNullableWithAggregatesFilter<"DatabaseEntry"> | string | null
    equipment?: StringNullableWithAggregatesFilter<"DatabaseEntry"> | string | null
    duration?: StringNullableWithAggregatesFilter<"DatabaseEntry"> | string | null
    temperature?: StringNullableWithAggregatesFilter<"DatabaseEntry"> | string | null
    pH?: StringNullableWithAggregatesFilter<"DatabaseEntry"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"DatabaseEntry"> | Date | string
    metadata?: StringNullableWithAggregatesFilter<"DatabaseEntry"> | string | null
    relatedResearch?: StringNullableWithAggregatesFilter<"DatabaseEntry"> | string | null
  }

  export type TableWhereInput = {
    AND?: TableWhereInput | TableWhereInput[]
    OR?: TableWhereInput[]
    NOT?: TableWhereInput | TableWhereInput[]
    id?: StringFilter<"Table"> | string
    name?: StringFilter<"Table"> | string
    description?: StringNullableFilter<"Table"> | string | null
    experimentId?: StringNullableFilter<"Table"> | string | null
    columns?: StringFilter<"Table"> | string
    createdAt?: DateTimeFilter<"Table"> | Date | string
    updatedAt?: DateTimeFilter<"Table"> | Date | string
    experiment?: XOR<ExperimentNullableRelationFilter, ExperimentWhereInput> | null
    rows?: TableRowListRelationFilter
    links?: LinkListRelationFilter
  }

  export type TableOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    experimentId?: SortOrderInput | SortOrder
    columns?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    experiment?: ExperimentOrderByWithRelationInput
    rows?: TableRowOrderByRelationAggregateInput
    links?: LinkOrderByRelationAggregateInput
  }

  export type TableWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TableWhereInput | TableWhereInput[]
    OR?: TableWhereInput[]
    NOT?: TableWhereInput | TableWhereInput[]
    name?: StringFilter<"Table"> | string
    description?: StringNullableFilter<"Table"> | string | null
    experimentId?: StringNullableFilter<"Table"> | string | null
    columns?: StringFilter<"Table"> | string
    createdAt?: DateTimeFilter<"Table"> | Date | string
    updatedAt?: DateTimeFilter<"Table"> | Date | string
    experiment?: XOR<ExperimentNullableRelationFilter, ExperimentWhereInput> | null
    rows?: TableRowListRelationFilter
    links?: LinkListRelationFilter
  }, "id">

  export type TableOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    experimentId?: SortOrderInput | SortOrder
    columns?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TableCountOrderByAggregateInput
    _max?: TableMaxOrderByAggregateInput
    _min?: TableMinOrderByAggregateInput
  }

  export type TableScalarWhereWithAggregatesInput = {
    AND?: TableScalarWhereWithAggregatesInput | TableScalarWhereWithAggregatesInput[]
    OR?: TableScalarWhereWithAggregatesInput[]
    NOT?: TableScalarWhereWithAggregatesInput | TableScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Table"> | string
    name?: StringWithAggregatesFilter<"Table"> | string
    description?: StringNullableWithAggregatesFilter<"Table"> | string | null
    experimentId?: StringNullableWithAggregatesFilter<"Table"> | string | null
    columns?: StringWithAggregatesFilter<"Table"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Table"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Table"> | Date | string
  }

  export type TableRowWhereInput = {
    AND?: TableRowWhereInput | TableRowWhereInput[]
    OR?: TableRowWhereInput[]
    NOT?: TableRowWhereInput | TableRowWhereInput[]
    id?: StringFilter<"TableRow"> | string
    tableId?: StringFilter<"TableRow"> | string
    data?: StringFilter<"TableRow"> | string
    rowNumber?: IntFilter<"TableRow"> | number
    createdAt?: DateTimeFilter<"TableRow"> | Date | string
    updatedAt?: DateTimeFilter<"TableRow"> | Date | string
    table?: XOR<TableRelationFilter, TableWhereInput>
  }

  export type TableRowOrderByWithRelationInput = {
    id?: SortOrder
    tableId?: SortOrder
    data?: SortOrder
    rowNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    table?: TableOrderByWithRelationInput
  }

  export type TableRowWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TableRowWhereInput | TableRowWhereInput[]
    OR?: TableRowWhereInput[]
    NOT?: TableRowWhereInput | TableRowWhereInput[]
    tableId?: StringFilter<"TableRow"> | string
    data?: StringFilter<"TableRow"> | string
    rowNumber?: IntFilter<"TableRow"> | number
    createdAt?: DateTimeFilter<"TableRow"> | Date | string
    updatedAt?: DateTimeFilter<"TableRow"> | Date | string
    table?: XOR<TableRelationFilter, TableWhereInput>
  }, "id">

  export type TableRowOrderByWithAggregationInput = {
    id?: SortOrder
    tableId?: SortOrder
    data?: SortOrder
    rowNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TableRowCountOrderByAggregateInput
    _avg?: TableRowAvgOrderByAggregateInput
    _max?: TableRowMaxOrderByAggregateInput
    _min?: TableRowMinOrderByAggregateInput
    _sum?: TableRowSumOrderByAggregateInput
  }

  export type TableRowScalarWhereWithAggregatesInput = {
    AND?: TableRowScalarWhereWithAggregatesInput | TableRowScalarWhereWithAggregatesInput[]
    OR?: TableRowScalarWhereWithAggregatesInput[]
    NOT?: TableRowScalarWhereWithAggregatesInput | TableRowScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TableRow"> | string
    tableId?: StringWithAggregatesFilter<"TableRow"> | string
    data?: StringWithAggregatesFilter<"TableRow"> | string
    rowNumber?: IntWithAggregatesFilter<"TableRow"> | number
    createdAt?: DateTimeWithAggregatesFilter<"TableRow"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TableRow"> | Date | string
  }

  export type ProtocolWhereInput = {
    AND?: ProtocolWhereInput | ProtocolWhereInput[]
    OR?: ProtocolWhereInput[]
    NOT?: ProtocolWhereInput | ProtocolWhereInput[]
    id?: StringFilter<"Protocol"> | string
    name?: StringFilter<"Protocol"> | string
    description?: StringNullableFilter<"Protocol"> | string | null
    category?: StringFilter<"Protocol"> | string
    version?: StringFilter<"Protocol"> | string
    steps?: StringFilter<"Protocol"> | string
    equipment?: StringNullableFilter<"Protocol"> | string | null
    reagents?: StringNullableFilter<"Protocol"> | string | null
    safetyNotes?: StringNullableFilter<"Protocol"> | string | null
    expectedDuration?: StringNullableFilter<"Protocol"> | string | null
    difficulty?: StringNullableFilter<"Protocol"> | string | null
    successRate?: FloatNullableFilter<"Protocol"> | number | null
    createdAt?: DateTimeFilter<"Protocol"> | Date | string
    updatedAt?: DateTimeFilter<"Protocol"> | Date | string
    executions?: ProtocolExecutionListRelationFilter
    links?: LinkListRelationFilter
  }

  export type ProtocolOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrder
    version?: SortOrder
    steps?: SortOrder
    equipment?: SortOrderInput | SortOrder
    reagents?: SortOrderInput | SortOrder
    safetyNotes?: SortOrderInput | SortOrder
    expectedDuration?: SortOrderInput | SortOrder
    difficulty?: SortOrderInput | SortOrder
    successRate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    executions?: ProtocolExecutionOrderByRelationAggregateInput
    links?: LinkOrderByRelationAggregateInput
  }

  export type ProtocolWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProtocolWhereInput | ProtocolWhereInput[]
    OR?: ProtocolWhereInput[]
    NOT?: ProtocolWhereInput | ProtocolWhereInput[]
    name?: StringFilter<"Protocol"> | string
    description?: StringNullableFilter<"Protocol"> | string | null
    category?: StringFilter<"Protocol"> | string
    version?: StringFilter<"Protocol"> | string
    steps?: StringFilter<"Protocol"> | string
    equipment?: StringNullableFilter<"Protocol"> | string | null
    reagents?: StringNullableFilter<"Protocol"> | string | null
    safetyNotes?: StringNullableFilter<"Protocol"> | string | null
    expectedDuration?: StringNullableFilter<"Protocol"> | string | null
    difficulty?: StringNullableFilter<"Protocol"> | string | null
    successRate?: FloatNullableFilter<"Protocol"> | number | null
    createdAt?: DateTimeFilter<"Protocol"> | Date | string
    updatedAt?: DateTimeFilter<"Protocol"> | Date | string
    executions?: ProtocolExecutionListRelationFilter
    links?: LinkListRelationFilter
  }, "id">

  export type ProtocolOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrder
    version?: SortOrder
    steps?: SortOrder
    equipment?: SortOrderInput | SortOrder
    reagents?: SortOrderInput | SortOrder
    safetyNotes?: SortOrderInput | SortOrder
    expectedDuration?: SortOrderInput | SortOrder
    difficulty?: SortOrderInput | SortOrder
    successRate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProtocolCountOrderByAggregateInput
    _avg?: ProtocolAvgOrderByAggregateInput
    _max?: ProtocolMaxOrderByAggregateInput
    _min?: ProtocolMinOrderByAggregateInput
    _sum?: ProtocolSumOrderByAggregateInput
  }

  export type ProtocolScalarWhereWithAggregatesInput = {
    AND?: ProtocolScalarWhereWithAggregatesInput | ProtocolScalarWhereWithAggregatesInput[]
    OR?: ProtocolScalarWhereWithAggregatesInput[]
    NOT?: ProtocolScalarWhereWithAggregatesInput | ProtocolScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Protocol"> | string
    name?: StringWithAggregatesFilter<"Protocol"> | string
    description?: StringNullableWithAggregatesFilter<"Protocol"> | string | null
    category?: StringWithAggregatesFilter<"Protocol"> | string
    version?: StringWithAggregatesFilter<"Protocol"> | string
    steps?: StringWithAggregatesFilter<"Protocol"> | string
    equipment?: StringNullableWithAggregatesFilter<"Protocol"> | string | null
    reagents?: StringNullableWithAggregatesFilter<"Protocol"> | string | null
    safetyNotes?: StringNullableWithAggregatesFilter<"Protocol"> | string | null
    expectedDuration?: StringNullableWithAggregatesFilter<"Protocol"> | string | null
    difficulty?: StringNullableWithAggregatesFilter<"Protocol"> | string | null
    successRate?: FloatNullableWithAggregatesFilter<"Protocol"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Protocol"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Protocol"> | Date | string
  }

  export type ProtocolExecutionWhereInput = {
    AND?: ProtocolExecutionWhereInput | ProtocolExecutionWhereInput[]
    OR?: ProtocolExecutionWhereInput[]
    NOT?: ProtocolExecutionWhereInput | ProtocolExecutionWhereInput[]
    id?: StringFilter<"ProtocolExecution"> | string
    protocolId?: StringFilter<"ProtocolExecution"> | string
    experimentId?: StringNullableFilter<"ProtocolExecution"> | string | null
    status?: StringFilter<"ProtocolExecution"> | string
    startDate?: DateTimeNullableFilter<"ProtocolExecution"> | Date | string | null
    endDate?: DateTimeNullableFilter<"ProtocolExecution"> | Date | string | null
    notes?: StringNullableFilter<"ProtocolExecution"> | string | null
    modifications?: StringNullableFilter<"ProtocolExecution"> | string | null
    results?: StringNullableFilter<"ProtocolExecution"> | string | null
    issues?: StringNullableFilter<"ProtocolExecution"> | string | null
    nextSteps?: StringNullableFilter<"ProtocolExecution"> | string | null
    executedBy?: StringNullableFilter<"ProtocolExecution"> | string | null
    completedSteps?: StringNullableFilter<"ProtocolExecution"> | string | null
    createdAt?: DateTimeFilter<"ProtocolExecution"> | Date | string
    updatedAt?: DateTimeFilter<"ProtocolExecution"> | Date | string
    protocol?: XOR<ProtocolRelationFilter, ProtocolWhereInput>
    experiment?: XOR<ExperimentNullableRelationFilter, ExperimentWhereInput> | null
    links?: LinkListRelationFilter
  }

  export type ProtocolExecutionOrderByWithRelationInput = {
    id?: SortOrder
    protocolId?: SortOrder
    experimentId?: SortOrderInput | SortOrder
    status?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    modifications?: SortOrderInput | SortOrder
    results?: SortOrderInput | SortOrder
    issues?: SortOrderInput | SortOrder
    nextSteps?: SortOrderInput | SortOrder
    executedBy?: SortOrderInput | SortOrder
    completedSteps?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    protocol?: ProtocolOrderByWithRelationInput
    experiment?: ExperimentOrderByWithRelationInput
    links?: LinkOrderByRelationAggregateInput
  }

  export type ProtocolExecutionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProtocolExecutionWhereInput | ProtocolExecutionWhereInput[]
    OR?: ProtocolExecutionWhereInput[]
    NOT?: ProtocolExecutionWhereInput | ProtocolExecutionWhereInput[]
    protocolId?: StringFilter<"ProtocolExecution"> | string
    experimentId?: StringNullableFilter<"ProtocolExecution"> | string | null
    status?: StringFilter<"ProtocolExecution"> | string
    startDate?: DateTimeNullableFilter<"ProtocolExecution"> | Date | string | null
    endDate?: DateTimeNullableFilter<"ProtocolExecution"> | Date | string | null
    notes?: StringNullableFilter<"ProtocolExecution"> | string | null
    modifications?: StringNullableFilter<"ProtocolExecution"> | string | null
    results?: StringNullableFilter<"ProtocolExecution"> | string | null
    issues?: StringNullableFilter<"ProtocolExecution"> | string | null
    nextSteps?: StringNullableFilter<"ProtocolExecution"> | string | null
    executedBy?: StringNullableFilter<"ProtocolExecution"> | string | null
    completedSteps?: StringNullableFilter<"ProtocolExecution"> | string | null
    createdAt?: DateTimeFilter<"ProtocolExecution"> | Date | string
    updatedAt?: DateTimeFilter<"ProtocolExecution"> | Date | string
    protocol?: XOR<ProtocolRelationFilter, ProtocolWhereInput>
    experiment?: XOR<ExperimentNullableRelationFilter, ExperimentWhereInput> | null
    links?: LinkListRelationFilter
  }, "id">

  export type ProtocolExecutionOrderByWithAggregationInput = {
    id?: SortOrder
    protocolId?: SortOrder
    experimentId?: SortOrderInput | SortOrder
    status?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    modifications?: SortOrderInput | SortOrder
    results?: SortOrderInput | SortOrder
    issues?: SortOrderInput | SortOrder
    nextSteps?: SortOrderInput | SortOrder
    executedBy?: SortOrderInput | SortOrder
    completedSteps?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProtocolExecutionCountOrderByAggregateInput
    _max?: ProtocolExecutionMaxOrderByAggregateInput
    _min?: ProtocolExecutionMinOrderByAggregateInput
  }

  export type ProtocolExecutionScalarWhereWithAggregatesInput = {
    AND?: ProtocolExecutionScalarWhereWithAggregatesInput | ProtocolExecutionScalarWhereWithAggregatesInput[]
    OR?: ProtocolExecutionScalarWhereWithAggregatesInput[]
    NOT?: ProtocolExecutionScalarWhereWithAggregatesInput | ProtocolExecutionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProtocolExecution"> | string
    protocolId?: StringWithAggregatesFilter<"ProtocolExecution"> | string
    experimentId?: StringNullableWithAggregatesFilter<"ProtocolExecution"> | string | null
    status?: StringWithAggregatesFilter<"ProtocolExecution"> | string
    startDate?: DateTimeNullableWithAggregatesFilter<"ProtocolExecution"> | Date | string | null
    endDate?: DateTimeNullableWithAggregatesFilter<"ProtocolExecution"> | Date | string | null
    notes?: StringNullableWithAggregatesFilter<"ProtocolExecution"> | string | null
    modifications?: StringNullableWithAggregatesFilter<"ProtocolExecution"> | string | null
    results?: StringNullableWithAggregatesFilter<"ProtocolExecution"> | string | null
    issues?: StringNullableWithAggregatesFilter<"ProtocolExecution"> | string | null
    nextSteps?: StringNullableWithAggregatesFilter<"ProtocolExecution"> | string | null
    executedBy?: StringNullableWithAggregatesFilter<"ProtocolExecution"> | string | null
    completedSteps?: StringNullableWithAggregatesFilter<"ProtocolExecution"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ProtocolExecution"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProtocolExecution"> | Date | string
  }

  export type LinkWhereInput = {
    AND?: LinkWhereInput | LinkWhereInput[]
    OR?: LinkWhereInput[]
    NOT?: LinkWhereInput | LinkWhereInput[]
    id?: StringFilter<"Link"> | string
    sourceType?: StringFilter<"Link"> | string
    sourceId?: StringFilter<"Link"> | string
    targetType?: StringFilter<"Link"> | string
    targetId?: StringFilter<"Link"> | string
    createdAt?: DateTimeFilter<"Link"> | Date | string
    note?: XOR<NoteNullableRelationFilter, NoteWhereInput> | null
    highlight?: XOR<HighlightNullableRelationFilter, HighlightWhereInput> | null
    databaseEntry?: XOR<DatabaseEntryNullableRelationFilter, DatabaseEntryWhereInput> | null
    table?: XOR<TableNullableRelationFilter, TableWhereInput> | null
    protocol?: XOR<ProtocolNullableRelationFilter, ProtocolWhereInput> | null
    protocolExecution?: XOR<ProtocolExecutionNullableRelationFilter, ProtocolExecutionWhereInput> | null
  }

  export type LinkOrderByWithRelationInput = {
    id?: SortOrder
    sourceType?: SortOrder
    sourceId?: SortOrder
    targetType?: SortOrder
    targetId?: SortOrder
    createdAt?: SortOrder
    note?: NoteOrderByWithRelationInput
    highlight?: HighlightOrderByWithRelationInput
    databaseEntry?: DatabaseEntryOrderByWithRelationInput
    table?: TableOrderByWithRelationInput
    protocol?: ProtocolOrderByWithRelationInput
    protocolExecution?: ProtocolExecutionOrderByWithRelationInput
  }

  export type LinkWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LinkWhereInput | LinkWhereInput[]
    OR?: LinkWhereInput[]
    NOT?: LinkWhereInput | LinkWhereInput[]
    sourceType?: StringFilter<"Link"> | string
    sourceId?: StringFilter<"Link"> | string
    targetType?: StringFilter<"Link"> | string
    targetId?: StringFilter<"Link"> | string
    createdAt?: DateTimeFilter<"Link"> | Date | string
    note?: XOR<NoteNullableRelationFilter, NoteWhereInput> | null
    highlight?: XOR<HighlightNullableRelationFilter, HighlightWhereInput> | null
    databaseEntry?: XOR<DatabaseEntryNullableRelationFilter, DatabaseEntryWhereInput> | null
    table?: XOR<TableNullableRelationFilter, TableWhereInput> | null
    protocol?: XOR<ProtocolNullableRelationFilter, ProtocolWhereInput> | null
    protocolExecution?: XOR<ProtocolExecutionNullableRelationFilter, ProtocolExecutionWhereInput> | null
  }, "id">

  export type LinkOrderByWithAggregationInput = {
    id?: SortOrder
    sourceType?: SortOrder
    sourceId?: SortOrder
    targetType?: SortOrder
    targetId?: SortOrder
    createdAt?: SortOrder
    _count?: LinkCountOrderByAggregateInput
    _max?: LinkMaxOrderByAggregateInput
    _min?: LinkMinOrderByAggregateInput
  }

  export type LinkScalarWhereWithAggregatesInput = {
    AND?: LinkScalarWhereWithAggregatesInput | LinkScalarWhereWithAggregatesInput[]
    OR?: LinkScalarWhereWithAggregatesInput[]
    NOT?: LinkScalarWhereWithAggregatesInput | LinkScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Link"> | string
    sourceType?: StringWithAggregatesFilter<"Link"> | string
    sourceId?: StringWithAggregatesFilter<"Link"> | string
    targetType?: StringWithAggregatesFilter<"Link"> | string
    targetId?: StringWithAggregatesFilter<"Link"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Link"> | Date | string
  }

  export type RecipeWhereInput = {
    AND?: RecipeWhereInput | RecipeWhereInput[]
    OR?: RecipeWhereInput[]
    NOT?: RecipeWhereInput | RecipeWhereInput[]
    id?: StringFilter<"Recipe"> | string
    name?: StringFilter<"Recipe"> | string
    description?: StringNullableFilter<"Recipe"> | string | null
    category?: StringFilter<"Recipe"> | string
    type?: StringFilter<"Recipe"> | string
    steps?: StringNullableFilter<"Recipe"> | string | null
    instructions?: StringNullableFilter<"Recipe"> | string | null
    notes?: StringNullableFilter<"Recipe"> | string | null
    pH?: FloatNullableFilter<"Recipe"> | number | null
    osmolarity?: StringNullableFilter<"Recipe"> | string | null
    storage?: StringNullableFilter<"Recipe"> | string | null
    shelfLife?: StringNullableFilter<"Recipe"> | string | null
    source?: StringNullableFilter<"Recipe"> | string | null
    version?: StringFilter<"Recipe"> | string
    isPublic?: BoolFilter<"Recipe"> | boolean
    createdBy?: StringNullableFilter<"Recipe"> | string | null
    createdAt?: DateTimeFilter<"Recipe"> | Date | string
    updatedAt?: DateTimeFilter<"Recipe"> | Date | string
    ingredients?: RecipeIngredientListRelationFilter
    recipeExecutions?: RecipeExecutionListRelationFilter
  }

  export type RecipeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrder
    type?: SortOrder
    steps?: SortOrderInput | SortOrder
    instructions?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    pH?: SortOrderInput | SortOrder
    osmolarity?: SortOrderInput | SortOrder
    storage?: SortOrderInput | SortOrder
    shelfLife?: SortOrderInput | SortOrder
    source?: SortOrderInput | SortOrder
    version?: SortOrder
    isPublic?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ingredients?: RecipeIngredientOrderByRelationAggregateInput
    recipeExecutions?: RecipeExecutionOrderByRelationAggregateInput
  }

  export type RecipeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RecipeWhereInput | RecipeWhereInput[]
    OR?: RecipeWhereInput[]
    NOT?: RecipeWhereInput | RecipeWhereInput[]
    name?: StringFilter<"Recipe"> | string
    description?: StringNullableFilter<"Recipe"> | string | null
    category?: StringFilter<"Recipe"> | string
    type?: StringFilter<"Recipe"> | string
    steps?: StringNullableFilter<"Recipe"> | string | null
    instructions?: StringNullableFilter<"Recipe"> | string | null
    notes?: StringNullableFilter<"Recipe"> | string | null
    pH?: FloatNullableFilter<"Recipe"> | number | null
    osmolarity?: StringNullableFilter<"Recipe"> | string | null
    storage?: StringNullableFilter<"Recipe"> | string | null
    shelfLife?: StringNullableFilter<"Recipe"> | string | null
    source?: StringNullableFilter<"Recipe"> | string | null
    version?: StringFilter<"Recipe"> | string
    isPublic?: BoolFilter<"Recipe"> | boolean
    createdBy?: StringNullableFilter<"Recipe"> | string | null
    createdAt?: DateTimeFilter<"Recipe"> | Date | string
    updatedAt?: DateTimeFilter<"Recipe"> | Date | string
    ingredients?: RecipeIngredientListRelationFilter
    recipeExecutions?: RecipeExecutionListRelationFilter
  }, "id">

  export type RecipeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrder
    type?: SortOrder
    steps?: SortOrderInput | SortOrder
    instructions?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    pH?: SortOrderInput | SortOrder
    osmolarity?: SortOrderInput | SortOrder
    storage?: SortOrderInput | SortOrder
    shelfLife?: SortOrderInput | SortOrder
    source?: SortOrderInput | SortOrder
    version?: SortOrder
    isPublic?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RecipeCountOrderByAggregateInput
    _avg?: RecipeAvgOrderByAggregateInput
    _max?: RecipeMaxOrderByAggregateInput
    _min?: RecipeMinOrderByAggregateInput
    _sum?: RecipeSumOrderByAggregateInput
  }

  export type RecipeScalarWhereWithAggregatesInput = {
    AND?: RecipeScalarWhereWithAggregatesInput | RecipeScalarWhereWithAggregatesInput[]
    OR?: RecipeScalarWhereWithAggregatesInput[]
    NOT?: RecipeScalarWhereWithAggregatesInput | RecipeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Recipe"> | string
    name?: StringWithAggregatesFilter<"Recipe"> | string
    description?: StringNullableWithAggregatesFilter<"Recipe"> | string | null
    category?: StringWithAggregatesFilter<"Recipe"> | string
    type?: StringWithAggregatesFilter<"Recipe"> | string
    steps?: StringNullableWithAggregatesFilter<"Recipe"> | string | null
    instructions?: StringNullableWithAggregatesFilter<"Recipe"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Recipe"> | string | null
    pH?: FloatNullableWithAggregatesFilter<"Recipe"> | number | null
    osmolarity?: StringNullableWithAggregatesFilter<"Recipe"> | string | null
    storage?: StringNullableWithAggregatesFilter<"Recipe"> | string | null
    shelfLife?: StringNullableWithAggregatesFilter<"Recipe"> | string | null
    source?: StringNullableWithAggregatesFilter<"Recipe"> | string | null
    version?: StringWithAggregatesFilter<"Recipe"> | string
    isPublic?: BoolWithAggregatesFilter<"Recipe"> | boolean
    createdBy?: StringNullableWithAggregatesFilter<"Recipe"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Recipe"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Recipe"> | Date | string
  }

  export type RecipeIngredientWhereInput = {
    AND?: RecipeIngredientWhereInput | RecipeIngredientWhereInput[]
    OR?: RecipeIngredientWhereInput[]
    NOT?: RecipeIngredientWhereInput | RecipeIngredientWhereInput[]
    id?: StringFilter<"RecipeIngredient"> | string
    recipeId?: StringFilter<"RecipeIngredient"> | string
    name?: StringFilter<"RecipeIngredient"> | string
    amount?: FloatFilter<"RecipeIngredient"> | number
    unit?: StringFilter<"RecipeIngredient"> | string
    concentration?: StringNullableFilter<"RecipeIngredient"> | string | null
    supplier?: StringNullableFilter<"RecipeIngredient"> | string | null
    catalogNumber?: StringNullableFilter<"RecipeIngredient"> | string | null
    notes?: StringNullableFilter<"RecipeIngredient"> | string | null
    recipe?: XOR<RecipeRelationFilter, RecipeWhereInput>
  }

  export type RecipeIngredientOrderByWithRelationInput = {
    id?: SortOrder
    recipeId?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    concentration?: SortOrderInput | SortOrder
    supplier?: SortOrderInput | SortOrder
    catalogNumber?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    recipe?: RecipeOrderByWithRelationInput
  }

  export type RecipeIngredientWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RecipeIngredientWhereInput | RecipeIngredientWhereInput[]
    OR?: RecipeIngredientWhereInput[]
    NOT?: RecipeIngredientWhereInput | RecipeIngredientWhereInput[]
    recipeId?: StringFilter<"RecipeIngredient"> | string
    name?: StringFilter<"RecipeIngredient"> | string
    amount?: FloatFilter<"RecipeIngredient"> | number
    unit?: StringFilter<"RecipeIngredient"> | string
    concentration?: StringNullableFilter<"RecipeIngredient"> | string | null
    supplier?: StringNullableFilter<"RecipeIngredient"> | string | null
    catalogNumber?: StringNullableFilter<"RecipeIngredient"> | string | null
    notes?: StringNullableFilter<"RecipeIngredient"> | string | null
    recipe?: XOR<RecipeRelationFilter, RecipeWhereInput>
  }, "id">

  export type RecipeIngredientOrderByWithAggregationInput = {
    id?: SortOrder
    recipeId?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    concentration?: SortOrderInput | SortOrder
    supplier?: SortOrderInput | SortOrder
    catalogNumber?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: RecipeIngredientCountOrderByAggregateInput
    _avg?: RecipeIngredientAvgOrderByAggregateInput
    _max?: RecipeIngredientMaxOrderByAggregateInput
    _min?: RecipeIngredientMinOrderByAggregateInput
    _sum?: RecipeIngredientSumOrderByAggregateInput
  }

  export type RecipeIngredientScalarWhereWithAggregatesInput = {
    AND?: RecipeIngredientScalarWhereWithAggregatesInput | RecipeIngredientScalarWhereWithAggregatesInput[]
    OR?: RecipeIngredientScalarWhereWithAggregatesInput[]
    NOT?: RecipeIngredientScalarWhereWithAggregatesInput | RecipeIngredientScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RecipeIngredient"> | string
    recipeId?: StringWithAggregatesFilter<"RecipeIngredient"> | string
    name?: StringWithAggregatesFilter<"RecipeIngredient"> | string
    amount?: FloatWithAggregatesFilter<"RecipeIngredient"> | number
    unit?: StringWithAggregatesFilter<"RecipeIngredient"> | string
    concentration?: StringNullableWithAggregatesFilter<"RecipeIngredient"> | string | null
    supplier?: StringNullableWithAggregatesFilter<"RecipeIngredient"> | string | null
    catalogNumber?: StringNullableWithAggregatesFilter<"RecipeIngredient"> | string | null
    notes?: StringNullableWithAggregatesFilter<"RecipeIngredient"> | string | null
  }

  export type CalendarEventWhereInput = {
    AND?: CalendarEventWhereInput | CalendarEventWhereInput[]
    OR?: CalendarEventWhereInput[]
    NOT?: CalendarEventWhereInput | CalendarEventWhereInput[]
    id?: StringFilter<"CalendarEvent"> | string
    type?: StringFilter<"CalendarEvent"> | string
    title?: StringFilter<"CalendarEvent"> | string
    description?: StringNullableFilter<"CalendarEvent"> | string | null
    start?: DateTimeFilter<"CalendarEvent"> | Date | string
    end?: DateTimeNullableFilter<"CalendarEvent"> | Date | string | null
    allDay?: BoolNullableFilter<"CalendarEvent"> | boolean | null
    relatedId?: StringNullableFilter<"CalendarEvent"> | string | null
    createdAt?: DateTimeFilter<"CalendarEvent"> | Date | string
    metadata?: StringNullableFilter<"CalendarEvent"> | string | null
  }

  export type CalendarEventOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    start?: SortOrder
    end?: SortOrderInput | SortOrder
    allDay?: SortOrderInput | SortOrder
    relatedId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    metadata?: SortOrderInput | SortOrder
  }

  export type CalendarEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CalendarEventWhereInput | CalendarEventWhereInput[]
    OR?: CalendarEventWhereInput[]
    NOT?: CalendarEventWhereInput | CalendarEventWhereInput[]
    type?: StringFilter<"CalendarEvent"> | string
    title?: StringFilter<"CalendarEvent"> | string
    description?: StringNullableFilter<"CalendarEvent"> | string | null
    start?: DateTimeFilter<"CalendarEvent"> | Date | string
    end?: DateTimeNullableFilter<"CalendarEvent"> | Date | string | null
    allDay?: BoolNullableFilter<"CalendarEvent"> | boolean | null
    relatedId?: StringNullableFilter<"CalendarEvent"> | string | null
    createdAt?: DateTimeFilter<"CalendarEvent"> | Date | string
    metadata?: StringNullableFilter<"CalendarEvent"> | string | null
  }, "id">

  export type CalendarEventOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    start?: SortOrder
    end?: SortOrderInput | SortOrder
    allDay?: SortOrderInput | SortOrder
    relatedId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    metadata?: SortOrderInput | SortOrder
    _count?: CalendarEventCountOrderByAggregateInput
    _max?: CalendarEventMaxOrderByAggregateInput
    _min?: CalendarEventMinOrderByAggregateInput
  }

  export type CalendarEventScalarWhereWithAggregatesInput = {
    AND?: CalendarEventScalarWhereWithAggregatesInput | CalendarEventScalarWhereWithAggregatesInput[]
    OR?: CalendarEventScalarWhereWithAggregatesInput[]
    NOT?: CalendarEventScalarWhereWithAggregatesInput | CalendarEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CalendarEvent"> | string
    type?: StringWithAggregatesFilter<"CalendarEvent"> | string
    title?: StringWithAggregatesFilter<"CalendarEvent"> | string
    description?: StringNullableWithAggregatesFilter<"CalendarEvent"> | string | null
    start?: DateTimeWithAggregatesFilter<"CalendarEvent"> | Date | string
    end?: DateTimeNullableWithAggregatesFilter<"CalendarEvent"> | Date | string | null
    allDay?: BoolNullableWithAggregatesFilter<"CalendarEvent"> | boolean | null
    relatedId?: StringNullableWithAggregatesFilter<"CalendarEvent"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CalendarEvent"> | Date | string
    metadata?: StringNullableWithAggregatesFilter<"CalendarEvent"> | string | null
  }

  export type TaskWhereInput = {
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    id?: StringFilter<"Task"> | string
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    status?: StringFilter<"Task"> | string
    priority?: StringFilter<"Task"> | string
    deadline?: DateTimeNullableFilter<"Task"> | Date | string | null
    createdAt?: DateTimeFilter<"Task"> | Date | string
    completedAt?: DateTimeNullableFilter<"Task"> | Date | string | null
    autoGenerated?: BoolFilter<"Task"> | boolean
    projectId?: StringFilter<"Task"> | string
    experimentId?: StringNullableFilter<"Task"> | string | null
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    experiment?: XOR<ExperimentNullableRelationFilter, ExperimentWhereInput> | null
  }

  export type TaskOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    deadline?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    autoGenerated?: SortOrder
    projectId?: SortOrder
    experimentId?: SortOrderInput | SortOrder
    project?: ProjectOrderByWithRelationInput
    experiment?: ExperimentOrderByWithRelationInput
  }

  export type TaskWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    status?: StringFilter<"Task"> | string
    priority?: StringFilter<"Task"> | string
    deadline?: DateTimeNullableFilter<"Task"> | Date | string | null
    createdAt?: DateTimeFilter<"Task"> | Date | string
    completedAt?: DateTimeNullableFilter<"Task"> | Date | string | null
    autoGenerated?: BoolFilter<"Task"> | boolean
    projectId?: StringFilter<"Task"> | string
    experimentId?: StringNullableFilter<"Task"> | string | null
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    experiment?: XOR<ExperimentNullableRelationFilter, ExperimentWhereInput> | null
  }, "id">

  export type TaskOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    deadline?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    autoGenerated?: SortOrder
    projectId?: SortOrder
    experimentId?: SortOrderInput | SortOrder
    _count?: TaskCountOrderByAggregateInput
    _max?: TaskMaxOrderByAggregateInput
    _min?: TaskMinOrderByAggregateInput
  }

  export type TaskScalarWhereWithAggregatesInput = {
    AND?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    OR?: TaskScalarWhereWithAggregatesInput[]
    NOT?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Task"> | string
    title?: StringWithAggregatesFilter<"Task"> | string
    description?: StringNullableWithAggregatesFilter<"Task"> | string | null
    status?: StringWithAggregatesFilter<"Task"> | string
    priority?: StringWithAggregatesFilter<"Task"> | string
    deadline?: DateTimeNullableWithAggregatesFilter<"Task"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Task"> | Date | string
    completedAt?: DateTimeNullableWithAggregatesFilter<"Task"> | Date | string | null
    autoGenerated?: BoolWithAggregatesFilter<"Task"> | boolean
    projectId?: StringWithAggregatesFilter<"Task"> | string
    experimentId?: StringNullableWithAggregatesFilter<"Task"> | string | null
  }

  export type RecipeExecutionWhereInput = {
    AND?: RecipeExecutionWhereInput | RecipeExecutionWhereInput[]
    OR?: RecipeExecutionWhereInput[]
    NOT?: RecipeExecutionWhereInput | RecipeExecutionWhereInput[]
    id?: StringFilter<"RecipeExecution"> | string
    recipeId?: StringFilter<"RecipeExecution"> | string
    experimentId?: StringNullableFilter<"RecipeExecution"> | string | null
    status?: StringFilter<"RecipeExecution"> | string
    startDate?: DateTimeNullableFilter<"RecipeExecution"> | Date | string | null
    endDate?: DateTimeNullableFilter<"RecipeExecution"> | Date | string | null
    notes?: StringNullableFilter<"RecipeExecution"> | string | null
    completedSteps?: StringNullableFilter<"RecipeExecution"> | string | null
    createdAt?: DateTimeFilter<"RecipeExecution"> | Date | string
    updatedAt?: DateTimeFilter<"RecipeExecution"> | Date | string
    recipe?: XOR<RecipeRelationFilter, RecipeWhereInput>
    experiment?: XOR<ExperimentNullableRelationFilter, ExperimentWhereInput> | null
  }

  export type RecipeExecutionOrderByWithRelationInput = {
    id?: SortOrder
    recipeId?: SortOrder
    experimentId?: SortOrderInput | SortOrder
    status?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    completedSteps?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    recipe?: RecipeOrderByWithRelationInput
    experiment?: ExperimentOrderByWithRelationInput
  }

  export type RecipeExecutionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RecipeExecutionWhereInput | RecipeExecutionWhereInput[]
    OR?: RecipeExecutionWhereInput[]
    NOT?: RecipeExecutionWhereInput | RecipeExecutionWhereInput[]
    recipeId?: StringFilter<"RecipeExecution"> | string
    experimentId?: StringNullableFilter<"RecipeExecution"> | string | null
    status?: StringFilter<"RecipeExecution"> | string
    startDate?: DateTimeNullableFilter<"RecipeExecution"> | Date | string | null
    endDate?: DateTimeNullableFilter<"RecipeExecution"> | Date | string | null
    notes?: StringNullableFilter<"RecipeExecution"> | string | null
    completedSteps?: StringNullableFilter<"RecipeExecution"> | string | null
    createdAt?: DateTimeFilter<"RecipeExecution"> | Date | string
    updatedAt?: DateTimeFilter<"RecipeExecution"> | Date | string
    recipe?: XOR<RecipeRelationFilter, RecipeWhereInput>
    experiment?: XOR<ExperimentNullableRelationFilter, ExperimentWhereInput> | null
  }, "id">

  export type RecipeExecutionOrderByWithAggregationInput = {
    id?: SortOrder
    recipeId?: SortOrder
    experimentId?: SortOrderInput | SortOrder
    status?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    completedSteps?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RecipeExecutionCountOrderByAggregateInput
    _max?: RecipeExecutionMaxOrderByAggregateInput
    _min?: RecipeExecutionMinOrderByAggregateInput
  }

  export type RecipeExecutionScalarWhereWithAggregatesInput = {
    AND?: RecipeExecutionScalarWhereWithAggregatesInput | RecipeExecutionScalarWhereWithAggregatesInput[]
    OR?: RecipeExecutionScalarWhereWithAggregatesInput[]
    NOT?: RecipeExecutionScalarWhereWithAggregatesInput | RecipeExecutionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RecipeExecution"> | string
    recipeId?: StringWithAggregatesFilter<"RecipeExecution"> | string
    experimentId?: StringNullableWithAggregatesFilter<"RecipeExecution"> | string | null
    status?: StringWithAggregatesFilter<"RecipeExecution"> | string
    startDate?: DateTimeNullableWithAggregatesFilter<"RecipeExecution"> | Date | string | null
    endDate?: DateTimeNullableWithAggregatesFilter<"RecipeExecution"> | Date | string | null
    notes?: StringNullableWithAggregatesFilter<"RecipeExecution"> | string | null
    completedSteps?: StringNullableWithAggregatesFilter<"RecipeExecution"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"RecipeExecution"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RecipeExecution"> | Date | string
  }

  export type ProjectCreateInput = {
    id?: string
    name: string
    description?: string | null
    status?: string
    startDate?: Date | string | null
    lastActivity?: Date | string | null
    createdAt?: Date | string
    experiments?: ExperimentCreateNestedManyWithoutProjectInput
    tasks?: TaskCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    status?: string
    startDate?: Date | string | null
    lastActivity?: Date | string | null
    createdAt?: Date | string
    experiments?: ExperimentUncheckedCreateNestedManyWithoutProjectInput
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experiments?: ExperimentUpdateManyWithoutProjectNestedInput
    tasks?: TaskUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experiments?: ExperimentUncheckedUpdateManyWithoutProjectNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    status?: string
    startDate?: Date | string | null
    lastActivity?: Date | string | null
    createdAt?: Date | string
  }

  export type ProjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExperimentCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    project: ProjectCreateNestedOneWithoutExperimentsInput
    notes?: NoteCreateNestedManyWithoutExperimentInput
    tables?: TableCreateNestedManyWithoutExperimentInput
    protocolExecutions?: ProtocolExecutionCreateNestedManyWithoutExperimentInput
    tasks?: TaskCreateNestedManyWithoutExperimentInput
    recipeExecutions?: RecipeExecutionCreateNestedManyWithoutExperimentInput
  }

  export type ExperimentUncheckedCreateInput = {
    id?: string
    projectId: string
    name: string
    description?: string | null
    createdAt?: Date | string
    notes?: NoteUncheckedCreateNestedManyWithoutExperimentInput
    tables?: TableUncheckedCreateNestedManyWithoutExperimentInput
    protocolExecutions?: ProtocolExecutionUncheckedCreateNestedManyWithoutExperimentInput
    tasks?: TaskUncheckedCreateNestedManyWithoutExperimentInput
    recipeExecutions?: RecipeExecutionUncheckedCreateNestedManyWithoutExperimentInput
  }

  export type ExperimentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutExperimentsNestedInput
    notes?: NoteUpdateManyWithoutExperimentNestedInput
    tables?: TableUpdateManyWithoutExperimentNestedInput
    protocolExecutions?: ProtocolExecutionUpdateManyWithoutExperimentNestedInput
    tasks?: TaskUpdateManyWithoutExperimentNestedInput
    recipeExecutions?: RecipeExecutionUpdateManyWithoutExperimentNestedInput
  }

  export type ExperimentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NoteUncheckedUpdateManyWithoutExperimentNestedInput
    tables?: TableUncheckedUpdateManyWithoutExperimentNestedInput
    protocolExecutions?: ProtocolExecutionUncheckedUpdateManyWithoutExperimentNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutExperimentNestedInput
    recipeExecutions?: RecipeExecutionUncheckedUpdateManyWithoutExperimentNestedInput
  }

  export type ExperimentCreateManyInput = {
    id?: string
    projectId: string
    name: string
    description?: string | null
    createdAt?: Date | string
  }

  export type ExperimentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExperimentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoteCreateInput = {
    id?: string
    title: string
    content: string
    date?: Date | string | null
    type: string
    createdAt?: Date | string
    experiment?: ExperimentCreateNestedOneWithoutNotesInput
    links?: LinkCreateNestedManyWithoutNoteInput
  }

  export type NoteUncheckedCreateInput = {
    id?: string
    experimentId?: string | null
    title: string
    content: string
    date?: Date | string | null
    type: string
    createdAt?: Date | string
    links?: LinkUncheckedCreateNestedManyWithoutNoteInput
  }

  export type NoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experiment?: ExperimentUpdateOneWithoutNotesNestedInput
    links?: LinkUpdateManyWithoutNoteNestedInput
  }

  export type NoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    links?: LinkUncheckedUpdateManyWithoutNoteNestedInput
  }

  export type NoteCreateManyInput = {
    id?: string
    experimentId?: string | null
    title: string
    content: string
    date?: Date | string | null
    type: string
    createdAt?: Date | string
  }

  export type NoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyNoteCreateInput = {
    id?: string
    date: Date | string
    content: string
    createdAt?: Date | string
  }

  export type DailyNoteUncheckedCreateInput = {
    id?: string
    date: Date | string
    content: string
    createdAt?: Date | string
  }

  export type DailyNoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyNoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyNoteCreateManyInput = {
    id?: string
    date: Date | string
    content: string
    createdAt?: Date | string
  }

  export type DailyNoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyNoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PDFCreateInput = {
    id?: string
    filePath: string
    title: string
    uploadedAt?: Date | string
    highlights?: HighlightCreateNestedManyWithoutPdfInput
  }

  export type PDFUncheckedCreateInput = {
    id?: string
    filePath: string
    title: string
    uploadedAt?: Date | string
    highlights?: HighlightUncheckedCreateNestedManyWithoutPdfInput
  }

  export type PDFUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    highlights?: HighlightUpdateManyWithoutPdfNestedInput
  }

  export type PDFUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    highlights?: HighlightUncheckedUpdateManyWithoutPdfNestedInput
  }

  export type PDFCreateManyInput = {
    id?: string
    filePath: string
    title: string
    uploadedAt?: Date | string
  }

  export type PDFUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PDFUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HighlightCreateInput = {
    id?: string
    page: number
    text: string
    coords?: string | null
    createdAt?: Date | string
    pdf: PDFCreateNestedOneWithoutHighlightsInput
    links?: LinkCreateNestedManyWithoutHighlightInput
  }

  export type HighlightUncheckedCreateInput = {
    id?: string
    pdfId: string
    page: number
    text: string
    coords?: string | null
    createdAt?: Date | string
    links?: LinkUncheckedCreateNestedManyWithoutHighlightInput
  }

  export type HighlightUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    page?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    coords?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pdf?: PDFUpdateOneRequiredWithoutHighlightsNestedInput
    links?: LinkUpdateManyWithoutHighlightNestedInput
  }

  export type HighlightUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pdfId?: StringFieldUpdateOperationsInput | string
    page?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    coords?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    links?: LinkUncheckedUpdateManyWithoutHighlightNestedInput
  }

  export type HighlightCreateManyInput = {
    id?: string
    pdfId: string
    page: number
    text: string
    coords?: string | null
    createdAt?: Date | string
  }

  export type HighlightUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    page?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    coords?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HighlightUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    pdfId?: StringFieldUpdateOperationsInput | string
    page?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    coords?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LiteratureNoteCreateInput = {
    id?: string
    title: string
    authors?: string | null
    year?: string | null
    journal?: string | null
    doi?: string | null
    abstract?: string | null
    tags?: string | null
    citation?: string | null
    synonyms?: string | null
    userNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    relatedEntries?: DatabaseEntryCreateNestedManyWithoutRelatedLitNotesInput
  }

  export type LiteratureNoteUncheckedCreateInput = {
    id?: string
    title: string
    authors?: string | null
    year?: string | null
    journal?: string | null
    doi?: string | null
    abstract?: string | null
    tags?: string | null
    citation?: string | null
    synonyms?: string | null
    userNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    relatedEntries?: DatabaseEntryUncheckedCreateNestedManyWithoutRelatedLitNotesInput
  }

  export type LiteratureNoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    authors?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    journal?: NullableStringFieldUpdateOperationsInput | string | null
    doi?: NullableStringFieldUpdateOperationsInput | string | null
    abstract?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    citation?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: NullableStringFieldUpdateOperationsInput | string | null
    userNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relatedEntries?: DatabaseEntryUpdateManyWithoutRelatedLitNotesNestedInput
  }

  export type LiteratureNoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    authors?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    journal?: NullableStringFieldUpdateOperationsInput | string | null
    doi?: NullableStringFieldUpdateOperationsInput | string | null
    abstract?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    citation?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: NullableStringFieldUpdateOperationsInput | string | null
    userNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relatedEntries?: DatabaseEntryUncheckedUpdateManyWithoutRelatedLitNotesNestedInput
  }

  export type LiteratureNoteCreateManyInput = {
    id?: string
    title: string
    authors?: string | null
    year?: string | null
    journal?: string | null
    doi?: string | null
    abstract?: string | null
    tags?: string | null
    citation?: string | null
    synonyms?: string | null
    userNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LiteratureNoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    authors?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    journal?: NullableStringFieldUpdateOperationsInput | string | null
    doi?: NullableStringFieldUpdateOperationsInput | string | null
    abstract?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    citation?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: NullableStringFieldUpdateOperationsInput | string | null
    userNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LiteratureNoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    authors?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    journal?: NullableStringFieldUpdateOperationsInput | string | null
    doi?: NullableStringFieldUpdateOperationsInput | string | null
    abstract?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    citation?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: NullableStringFieldUpdateOperationsInput | string | null
    userNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DatabaseEntryCreateInput = {
    id?: string
    type: string
    name: string
    description?: string | null
    properties?: string | null
    molecularWeight?: number | null
    concentration?: string | null
    storage?: string | null
    supplier?: string | null
    catalogNumber?: string | null
    purity?: string | null
    sequence?: string | null
    organism?: string | null
    function?: string | null
    protocol?: string | null
    equipment?: string | null
    duration?: string | null
    temperature?: string | null
    pH?: string | null
    createdAt?: Date | string
    metadata?: string | null
    relatedResearch?: string | null
    relatedLitNotes?: LiteratureNoteCreateNestedManyWithoutRelatedEntriesInput
    links?: LinkCreateNestedManyWithoutDatabaseEntryInput
  }

  export type DatabaseEntryUncheckedCreateInput = {
    id?: string
    type: string
    name: string
    description?: string | null
    properties?: string | null
    molecularWeight?: number | null
    concentration?: string | null
    storage?: string | null
    supplier?: string | null
    catalogNumber?: string | null
    purity?: string | null
    sequence?: string | null
    organism?: string | null
    function?: string | null
    protocol?: string | null
    equipment?: string | null
    duration?: string | null
    temperature?: string | null
    pH?: string | null
    createdAt?: Date | string
    metadata?: string | null
    relatedResearch?: string | null
    relatedLitNotes?: LiteratureNoteUncheckedCreateNestedManyWithoutRelatedEntriesInput
    links?: LinkUncheckedCreateNestedManyWithoutDatabaseEntryInput
  }

  export type DatabaseEntryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    properties?: NullableStringFieldUpdateOperationsInput | string | null
    molecularWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    storage?: NullableStringFieldUpdateOperationsInput | string | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    catalogNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purity?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: NullableStringFieldUpdateOperationsInput | string | null
    organism?: NullableStringFieldUpdateOperationsInput | string | null
    function?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableStringFieldUpdateOperationsInput | string | null
    equipment?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    pH?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    relatedResearch?: NullableStringFieldUpdateOperationsInput | string | null
    relatedLitNotes?: LiteratureNoteUpdateManyWithoutRelatedEntriesNestedInput
    links?: LinkUpdateManyWithoutDatabaseEntryNestedInput
  }

  export type DatabaseEntryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    properties?: NullableStringFieldUpdateOperationsInput | string | null
    molecularWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    storage?: NullableStringFieldUpdateOperationsInput | string | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    catalogNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purity?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: NullableStringFieldUpdateOperationsInput | string | null
    organism?: NullableStringFieldUpdateOperationsInput | string | null
    function?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableStringFieldUpdateOperationsInput | string | null
    equipment?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    pH?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    relatedResearch?: NullableStringFieldUpdateOperationsInput | string | null
    relatedLitNotes?: LiteratureNoteUncheckedUpdateManyWithoutRelatedEntriesNestedInput
    links?: LinkUncheckedUpdateManyWithoutDatabaseEntryNestedInput
  }

  export type DatabaseEntryCreateManyInput = {
    id?: string
    type: string
    name: string
    description?: string | null
    properties?: string | null
    molecularWeight?: number | null
    concentration?: string | null
    storage?: string | null
    supplier?: string | null
    catalogNumber?: string | null
    purity?: string | null
    sequence?: string | null
    organism?: string | null
    function?: string | null
    protocol?: string | null
    equipment?: string | null
    duration?: string | null
    temperature?: string | null
    pH?: string | null
    createdAt?: Date | string
    metadata?: string | null
    relatedResearch?: string | null
  }

  export type DatabaseEntryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    properties?: NullableStringFieldUpdateOperationsInput | string | null
    molecularWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    storage?: NullableStringFieldUpdateOperationsInput | string | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    catalogNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purity?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: NullableStringFieldUpdateOperationsInput | string | null
    organism?: NullableStringFieldUpdateOperationsInput | string | null
    function?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableStringFieldUpdateOperationsInput | string | null
    equipment?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    pH?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    relatedResearch?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DatabaseEntryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    properties?: NullableStringFieldUpdateOperationsInput | string | null
    molecularWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    storage?: NullableStringFieldUpdateOperationsInput | string | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    catalogNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purity?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: NullableStringFieldUpdateOperationsInput | string | null
    organism?: NullableStringFieldUpdateOperationsInput | string | null
    function?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableStringFieldUpdateOperationsInput | string | null
    equipment?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    pH?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    relatedResearch?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TableCreateInput = {
    id?: string
    name: string
    description?: string | null
    columns: string
    createdAt?: Date | string
    updatedAt?: Date | string
    experiment?: ExperimentCreateNestedOneWithoutTablesInput
    rows?: TableRowCreateNestedManyWithoutTableInput
    links?: LinkCreateNestedManyWithoutTableInput
  }

  export type TableUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    experimentId?: string | null
    columns: string
    createdAt?: Date | string
    updatedAt?: Date | string
    rows?: TableRowUncheckedCreateNestedManyWithoutTableInput
    links?: LinkUncheckedCreateNestedManyWithoutTableInput
  }

  export type TableUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    columns?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experiment?: ExperimentUpdateOneWithoutTablesNestedInput
    rows?: TableRowUpdateManyWithoutTableNestedInput
    links?: LinkUpdateManyWithoutTableNestedInput
  }

  export type TableUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    columns?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rows?: TableRowUncheckedUpdateManyWithoutTableNestedInput
    links?: LinkUncheckedUpdateManyWithoutTableNestedInput
  }

  export type TableCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    experimentId?: string | null
    columns: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TableUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    columns?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TableUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    columns?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TableRowCreateInput = {
    id?: string
    data: string
    rowNumber: number
    createdAt?: Date | string
    updatedAt?: Date | string
    table: TableCreateNestedOneWithoutRowsInput
  }

  export type TableRowUncheckedCreateInput = {
    id?: string
    tableId: string
    data: string
    rowNumber: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TableRowUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    rowNumber?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    table?: TableUpdateOneRequiredWithoutRowsNestedInput
  }

  export type TableRowUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tableId?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    rowNumber?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TableRowCreateManyInput = {
    id?: string
    tableId: string
    data: string
    rowNumber: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TableRowUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    rowNumber?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TableRowUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tableId?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    rowNumber?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProtocolCreateInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    version?: string
    steps: string
    equipment?: string | null
    reagents?: string | null
    safetyNotes?: string | null
    expectedDuration?: string | null
    difficulty?: string | null
    successRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    executions?: ProtocolExecutionCreateNestedManyWithoutProtocolInput
    links?: LinkCreateNestedManyWithoutProtocolInput
  }

  export type ProtocolUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    version?: string
    steps: string
    equipment?: string | null
    reagents?: string | null
    safetyNotes?: string | null
    expectedDuration?: string | null
    difficulty?: string | null
    successRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    executions?: ProtocolExecutionUncheckedCreateNestedManyWithoutProtocolInput
    links?: LinkUncheckedCreateNestedManyWithoutProtocolInput
  }

  export type ProtocolUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    equipment?: NullableStringFieldUpdateOperationsInput | string | null
    reagents?: NullableStringFieldUpdateOperationsInput | string | null
    safetyNotes?: NullableStringFieldUpdateOperationsInput | string | null
    expectedDuration?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    successRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    executions?: ProtocolExecutionUpdateManyWithoutProtocolNestedInput
    links?: LinkUpdateManyWithoutProtocolNestedInput
  }

  export type ProtocolUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    equipment?: NullableStringFieldUpdateOperationsInput | string | null
    reagents?: NullableStringFieldUpdateOperationsInput | string | null
    safetyNotes?: NullableStringFieldUpdateOperationsInput | string | null
    expectedDuration?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    successRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    executions?: ProtocolExecutionUncheckedUpdateManyWithoutProtocolNestedInput
    links?: LinkUncheckedUpdateManyWithoutProtocolNestedInput
  }

  export type ProtocolCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    version?: string
    steps: string
    equipment?: string | null
    reagents?: string | null
    safetyNotes?: string | null
    expectedDuration?: string | null
    difficulty?: string | null
    successRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProtocolUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    equipment?: NullableStringFieldUpdateOperationsInput | string | null
    reagents?: NullableStringFieldUpdateOperationsInput | string | null
    safetyNotes?: NullableStringFieldUpdateOperationsInput | string | null
    expectedDuration?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    successRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProtocolUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    equipment?: NullableStringFieldUpdateOperationsInput | string | null
    reagents?: NullableStringFieldUpdateOperationsInput | string | null
    safetyNotes?: NullableStringFieldUpdateOperationsInput | string | null
    expectedDuration?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    successRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProtocolExecutionCreateInput = {
    id?: string
    status: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    notes?: string | null
    modifications?: string | null
    results?: string | null
    issues?: string | null
    nextSteps?: string | null
    executedBy?: string | null
    completedSteps?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    protocol: ProtocolCreateNestedOneWithoutExecutionsInput
    experiment?: ExperimentCreateNestedOneWithoutProtocolExecutionsInput
    links?: LinkCreateNestedManyWithoutProtocolExecutionInput
  }

  export type ProtocolExecutionUncheckedCreateInput = {
    id?: string
    protocolId: string
    experimentId?: string | null
    status: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    notes?: string | null
    modifications?: string | null
    results?: string | null
    issues?: string | null
    nextSteps?: string | null
    executedBy?: string | null
    completedSteps?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    links?: LinkUncheckedCreateNestedManyWithoutProtocolExecutionInput
  }

  export type ProtocolExecutionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    modifications?: NullableStringFieldUpdateOperationsInput | string | null
    results?: NullableStringFieldUpdateOperationsInput | string | null
    issues?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: NullableStringFieldUpdateOperationsInput | string | null
    executedBy?: NullableStringFieldUpdateOperationsInput | string | null
    completedSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    protocol?: ProtocolUpdateOneRequiredWithoutExecutionsNestedInput
    experiment?: ExperimentUpdateOneWithoutProtocolExecutionsNestedInput
    links?: LinkUpdateManyWithoutProtocolExecutionNestedInput
  }

  export type ProtocolExecutionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    protocolId?: StringFieldUpdateOperationsInput | string
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    modifications?: NullableStringFieldUpdateOperationsInput | string | null
    results?: NullableStringFieldUpdateOperationsInput | string | null
    issues?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: NullableStringFieldUpdateOperationsInput | string | null
    executedBy?: NullableStringFieldUpdateOperationsInput | string | null
    completedSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    links?: LinkUncheckedUpdateManyWithoutProtocolExecutionNestedInput
  }

  export type ProtocolExecutionCreateManyInput = {
    id?: string
    protocolId: string
    experimentId?: string | null
    status: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    notes?: string | null
    modifications?: string | null
    results?: string | null
    issues?: string | null
    nextSteps?: string | null
    executedBy?: string | null
    completedSteps?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProtocolExecutionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    modifications?: NullableStringFieldUpdateOperationsInput | string | null
    results?: NullableStringFieldUpdateOperationsInput | string | null
    issues?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: NullableStringFieldUpdateOperationsInput | string | null
    executedBy?: NullableStringFieldUpdateOperationsInput | string | null
    completedSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProtocolExecutionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    protocolId?: StringFieldUpdateOperationsInput | string
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    modifications?: NullableStringFieldUpdateOperationsInput | string | null
    results?: NullableStringFieldUpdateOperationsInput | string | null
    issues?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: NullableStringFieldUpdateOperationsInput | string | null
    executedBy?: NullableStringFieldUpdateOperationsInput | string | null
    completedSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LinkCreateInput = {
    id?: string
    sourceType: string
    targetType: string
    targetId: string
    createdAt?: Date | string
    note?: NoteCreateNestedOneWithoutLinksInput
    highlight?: HighlightCreateNestedOneWithoutLinksInput
    databaseEntry?: DatabaseEntryCreateNestedOneWithoutLinksInput
    table?: TableCreateNestedOneWithoutLinksInput
    protocol?: ProtocolCreateNestedOneWithoutLinksInput
    protocolExecution?: ProtocolExecutionCreateNestedOneWithoutLinksInput
  }

  export type LinkUncheckedCreateInput = {
    id?: string
    sourceType: string
    sourceId: string
    targetType: string
    targetId: string
    createdAt?: Date | string
  }

  export type LinkUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NoteUpdateOneWithoutLinksNestedInput
    highlight?: HighlightUpdateOneWithoutLinksNestedInput
    databaseEntry?: DatabaseEntryUpdateOneWithoutLinksNestedInput
    table?: TableUpdateOneWithoutLinksNestedInput
    protocol?: ProtocolUpdateOneWithoutLinksNestedInput
    protocolExecution?: ProtocolExecutionUpdateOneWithoutLinksNestedInput
  }

  export type LinkUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    sourceId?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LinkCreateManyInput = {
    id?: string
    sourceType: string
    sourceId: string
    targetType: string
    targetId: string
    createdAt?: Date | string
  }

  export type LinkUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LinkUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    sourceId?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecipeCreateInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    type: string
    steps?: string | null
    instructions?: string | null
    notes?: string | null
    pH?: number | null
    osmolarity?: string | null
    storage?: string | null
    shelfLife?: string | null
    source?: string | null
    version?: string
    isPublic?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ingredients?: RecipeIngredientCreateNestedManyWithoutRecipeInput
    recipeExecutions?: RecipeExecutionCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    type: string
    steps?: string | null
    instructions?: string | null
    notes?: string | null
    pH?: number | null
    osmolarity?: string | null
    storage?: string | null
    shelfLife?: string | null
    source?: string | null
    version?: string
    isPublic?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ingredients?: RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInput
    recipeExecutions?: RecipeExecutionUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    steps?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    pH?: NullableFloatFieldUpdateOperationsInput | number | null
    osmolarity?: NullableStringFieldUpdateOperationsInput | string | null
    storage?: NullableStringFieldUpdateOperationsInput | string | null
    shelfLife?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    version?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ingredients?: RecipeIngredientUpdateManyWithoutRecipeNestedInput
    recipeExecutions?: RecipeExecutionUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    steps?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    pH?: NullableFloatFieldUpdateOperationsInput | number | null
    osmolarity?: NullableStringFieldUpdateOperationsInput | string | null
    storage?: NullableStringFieldUpdateOperationsInput | string | null
    shelfLife?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    version?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ingredients?: RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInput
    recipeExecutions?: RecipeExecutionUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    type: string
    steps?: string | null
    instructions?: string | null
    notes?: string | null
    pH?: number | null
    osmolarity?: string | null
    storage?: string | null
    shelfLife?: string | null
    source?: string | null
    version?: string
    isPublic?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecipeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    steps?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    pH?: NullableFloatFieldUpdateOperationsInput | number | null
    osmolarity?: NullableStringFieldUpdateOperationsInput | string | null
    storage?: NullableStringFieldUpdateOperationsInput | string | null
    shelfLife?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    version?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecipeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    steps?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    pH?: NullableFloatFieldUpdateOperationsInput | number | null
    osmolarity?: NullableStringFieldUpdateOperationsInput | string | null
    storage?: NullableStringFieldUpdateOperationsInput | string | null
    shelfLife?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    version?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecipeIngredientCreateInput = {
    id?: string
    name: string
    amount: number
    unit: string
    concentration?: string | null
    supplier?: string | null
    catalogNumber?: string | null
    notes?: string | null
    recipe: RecipeCreateNestedOneWithoutIngredientsInput
  }

  export type RecipeIngredientUncheckedCreateInput = {
    id?: string
    recipeId: string
    name: string
    amount: number
    unit: string
    concentration?: string | null
    supplier?: string | null
    catalogNumber?: string | null
    notes?: string | null
  }

  export type RecipeIngredientUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    catalogNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    recipe?: RecipeUpdateOneRequiredWithoutIngredientsNestedInput
  }

  export type RecipeIngredientUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    catalogNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecipeIngredientCreateManyInput = {
    id?: string
    recipeId: string
    name: string
    amount: number
    unit: string
    concentration?: string | null
    supplier?: string | null
    catalogNumber?: string | null
    notes?: string | null
  }

  export type RecipeIngredientUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    catalogNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecipeIngredientUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    catalogNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CalendarEventCreateInput = {
    id?: string
    type: string
    title: string
    description?: string | null
    start: Date | string
    end?: Date | string | null
    allDay?: boolean | null
    relatedId?: string | null
    createdAt?: Date | string
    metadata?: string | null
  }

  export type CalendarEventUncheckedCreateInput = {
    id?: string
    type: string
    title: string
    description?: string | null
    start: Date | string
    end?: Date | string | null
    allDay?: boolean | null
    relatedId?: string | null
    createdAt?: Date | string
    metadata?: string | null
  }

  export type CalendarEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allDay?: NullableBoolFieldUpdateOperationsInput | boolean | null
    relatedId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CalendarEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allDay?: NullableBoolFieldUpdateOperationsInput | boolean | null
    relatedId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CalendarEventCreateManyInput = {
    id?: string
    type: string
    title: string
    description?: string | null
    start: Date | string
    end?: Date | string | null
    allDay?: boolean | null
    relatedId?: string | null
    createdAt?: Date | string
    metadata?: string | null
  }

  export type CalendarEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allDay?: NullableBoolFieldUpdateOperationsInput | boolean | null
    relatedId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CalendarEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allDay?: NullableBoolFieldUpdateOperationsInput | boolean | null
    relatedId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TaskCreateInput = {
    id?: string
    title: string
    description?: string | null
    status: string
    priority: string
    deadline?: Date | string | null
    createdAt?: Date | string
    completedAt?: Date | string | null
    autoGenerated?: boolean
    project: ProjectCreateNestedOneWithoutTasksInput
    experiment?: ExperimentCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    status: string
    priority: string
    deadline?: Date | string | null
    createdAt?: Date | string
    completedAt?: Date | string | null
    autoGenerated?: boolean
    projectId: string
    experimentId?: string | null
  }

  export type TaskUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoGenerated?: BoolFieldUpdateOperationsInput | boolean
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput
    experiment?: ExperimentUpdateOneWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoGenerated?: BoolFieldUpdateOperationsInput | boolean
    projectId?: StringFieldUpdateOperationsInput | string
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TaskCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    status: string
    priority: string
    deadline?: Date | string | null
    createdAt?: Date | string
    completedAt?: Date | string | null
    autoGenerated?: boolean
    projectId: string
    experimentId?: string | null
  }

  export type TaskUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoGenerated?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TaskUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoGenerated?: BoolFieldUpdateOperationsInput | boolean
    projectId?: StringFieldUpdateOperationsInput | string
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecipeExecutionCreateInput = {
    id?: string
    status: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    notes?: string | null
    completedSteps?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    recipe: RecipeCreateNestedOneWithoutRecipeExecutionsInput
    experiment?: ExperimentCreateNestedOneWithoutRecipeExecutionsInput
  }

  export type RecipeExecutionUncheckedCreateInput = {
    id?: string
    recipeId: string
    experimentId?: string | null
    status: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    notes?: string | null
    completedSteps?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecipeExecutionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    completedSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recipe?: RecipeUpdateOneRequiredWithoutRecipeExecutionsNestedInput
    experiment?: ExperimentUpdateOneWithoutRecipeExecutionsNestedInput
  }

  export type RecipeExecutionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    completedSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecipeExecutionCreateManyInput = {
    id?: string
    recipeId: string
    experimentId?: string | null
    status: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    notes?: string | null
    completedSteps?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecipeExecutionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    completedSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecipeExecutionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    completedSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ExperimentListRelationFilter = {
    every?: ExperimentWhereInput
    some?: ExperimentWhereInput
    none?: ExperimentWhereInput
  }

  export type TaskListRelationFilter = {
    every?: TaskWhereInput
    some?: TaskWhereInput
    none?: TaskWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ExperimentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    lastActivity?: SortOrder
    createdAt?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    lastActivity?: SortOrder
    createdAt?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    lastActivity?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ProjectRelationFilter = {
    is?: ProjectWhereInput
    isNot?: ProjectWhereInput
  }

  export type NoteListRelationFilter = {
    every?: NoteWhereInput
    some?: NoteWhereInput
    none?: NoteWhereInput
  }

  export type TableListRelationFilter = {
    every?: TableWhereInput
    some?: TableWhereInput
    none?: TableWhereInput
  }

  export type ProtocolExecutionListRelationFilter = {
    every?: ProtocolExecutionWhereInput
    some?: ProtocolExecutionWhereInput
    none?: ProtocolExecutionWhereInput
  }

  export type RecipeExecutionListRelationFilter = {
    every?: RecipeExecutionWhereInput
    some?: RecipeExecutionWhereInput
    none?: RecipeExecutionWhereInput
  }

  export type NoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TableOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProtocolExecutionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RecipeExecutionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExperimentCountOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type ExperimentMaxOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type ExperimentMinOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type ExperimentNullableRelationFilter = {
    is?: ExperimentWhereInput | null
    isNot?: ExperimentWhereInput | null
  }

  export type LinkListRelationFilter = {
    every?: LinkWhereInput
    some?: LinkWhereInput
    none?: LinkWhereInput
  }

  export type LinkOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NoteCountOrderByAggregateInput = {
    id?: SortOrder
    experimentId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    date?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
  }

  export type NoteMaxOrderByAggregateInput = {
    id?: SortOrder
    experimentId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    date?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
  }

  export type NoteMinOrderByAggregateInput = {
    id?: SortOrder
    experimentId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    date?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
  }

  export type DailyNoteCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type DailyNoteMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type DailyNoteMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type HighlightListRelationFilter = {
    every?: HighlightWhereInput
    some?: HighlightWhereInput
    none?: HighlightWhereInput
  }

  export type HighlightOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PDFCountOrderByAggregateInput = {
    id?: SortOrder
    filePath?: SortOrder
    title?: SortOrder
    uploadedAt?: SortOrder
  }

  export type PDFMaxOrderByAggregateInput = {
    id?: SortOrder
    filePath?: SortOrder
    title?: SortOrder
    uploadedAt?: SortOrder
  }

  export type PDFMinOrderByAggregateInput = {
    id?: SortOrder
    filePath?: SortOrder
    title?: SortOrder
    uploadedAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type PDFRelationFilter = {
    is?: PDFWhereInput
    isNot?: PDFWhereInput
  }

  export type HighlightCountOrderByAggregateInput = {
    id?: SortOrder
    pdfId?: SortOrder
    page?: SortOrder
    text?: SortOrder
    coords?: SortOrder
    createdAt?: SortOrder
  }

  export type HighlightAvgOrderByAggregateInput = {
    page?: SortOrder
  }

  export type HighlightMaxOrderByAggregateInput = {
    id?: SortOrder
    pdfId?: SortOrder
    page?: SortOrder
    text?: SortOrder
    coords?: SortOrder
    createdAt?: SortOrder
  }

  export type HighlightMinOrderByAggregateInput = {
    id?: SortOrder
    pdfId?: SortOrder
    page?: SortOrder
    text?: SortOrder
    coords?: SortOrder
    createdAt?: SortOrder
  }

  export type HighlightSumOrderByAggregateInput = {
    page?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DatabaseEntryListRelationFilter = {
    every?: DatabaseEntryWhereInput
    some?: DatabaseEntryWhereInput
    none?: DatabaseEntryWhereInput
  }

  export type DatabaseEntryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LiteratureNoteCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    authors?: SortOrder
    year?: SortOrder
    journal?: SortOrder
    doi?: SortOrder
    abstract?: SortOrder
    tags?: SortOrder
    citation?: SortOrder
    synonyms?: SortOrder
    userNote?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LiteratureNoteMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    authors?: SortOrder
    year?: SortOrder
    journal?: SortOrder
    doi?: SortOrder
    abstract?: SortOrder
    tags?: SortOrder
    citation?: SortOrder
    synonyms?: SortOrder
    userNote?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LiteratureNoteMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    authors?: SortOrder
    year?: SortOrder
    journal?: SortOrder
    doi?: SortOrder
    abstract?: SortOrder
    tags?: SortOrder
    citation?: SortOrder
    synonyms?: SortOrder
    userNote?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type LiteratureNoteListRelationFilter = {
    every?: LiteratureNoteWhereInput
    some?: LiteratureNoteWhereInput
    none?: LiteratureNoteWhereInput
  }

  export type LiteratureNoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DatabaseEntryCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    description?: SortOrder
    properties?: SortOrder
    molecularWeight?: SortOrder
    concentration?: SortOrder
    storage?: SortOrder
    supplier?: SortOrder
    catalogNumber?: SortOrder
    purity?: SortOrder
    sequence?: SortOrder
    organism?: SortOrder
    function?: SortOrder
    protocol?: SortOrder
    equipment?: SortOrder
    duration?: SortOrder
    temperature?: SortOrder
    pH?: SortOrder
    createdAt?: SortOrder
    metadata?: SortOrder
    relatedResearch?: SortOrder
  }

  export type DatabaseEntryAvgOrderByAggregateInput = {
    molecularWeight?: SortOrder
  }

  export type DatabaseEntryMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    description?: SortOrder
    properties?: SortOrder
    molecularWeight?: SortOrder
    concentration?: SortOrder
    storage?: SortOrder
    supplier?: SortOrder
    catalogNumber?: SortOrder
    purity?: SortOrder
    sequence?: SortOrder
    organism?: SortOrder
    function?: SortOrder
    protocol?: SortOrder
    equipment?: SortOrder
    duration?: SortOrder
    temperature?: SortOrder
    pH?: SortOrder
    createdAt?: SortOrder
    metadata?: SortOrder
    relatedResearch?: SortOrder
  }

  export type DatabaseEntryMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    description?: SortOrder
    properties?: SortOrder
    molecularWeight?: SortOrder
    concentration?: SortOrder
    storage?: SortOrder
    supplier?: SortOrder
    catalogNumber?: SortOrder
    purity?: SortOrder
    sequence?: SortOrder
    organism?: SortOrder
    function?: SortOrder
    protocol?: SortOrder
    equipment?: SortOrder
    duration?: SortOrder
    temperature?: SortOrder
    pH?: SortOrder
    createdAt?: SortOrder
    metadata?: SortOrder
    relatedResearch?: SortOrder
  }

  export type DatabaseEntrySumOrderByAggregateInput = {
    molecularWeight?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type TableRowListRelationFilter = {
    every?: TableRowWhereInput
    some?: TableRowWhereInput
    none?: TableRowWhereInput
  }

  export type TableRowOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TableCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    experimentId?: SortOrder
    columns?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TableMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    experimentId?: SortOrder
    columns?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TableMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    experimentId?: SortOrder
    columns?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TableRelationFilter = {
    is?: TableWhereInput
    isNot?: TableWhereInput
  }

  export type TableRowCountOrderByAggregateInput = {
    id?: SortOrder
    tableId?: SortOrder
    data?: SortOrder
    rowNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TableRowAvgOrderByAggregateInput = {
    rowNumber?: SortOrder
  }

  export type TableRowMaxOrderByAggregateInput = {
    id?: SortOrder
    tableId?: SortOrder
    data?: SortOrder
    rowNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TableRowMinOrderByAggregateInput = {
    id?: SortOrder
    tableId?: SortOrder
    data?: SortOrder
    rowNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TableRowSumOrderByAggregateInput = {
    rowNumber?: SortOrder
  }

  export type ProtocolCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    version?: SortOrder
    steps?: SortOrder
    equipment?: SortOrder
    reagents?: SortOrder
    safetyNotes?: SortOrder
    expectedDuration?: SortOrder
    difficulty?: SortOrder
    successRate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProtocolAvgOrderByAggregateInput = {
    successRate?: SortOrder
  }

  export type ProtocolMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    version?: SortOrder
    steps?: SortOrder
    equipment?: SortOrder
    reagents?: SortOrder
    safetyNotes?: SortOrder
    expectedDuration?: SortOrder
    difficulty?: SortOrder
    successRate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProtocolMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    version?: SortOrder
    steps?: SortOrder
    equipment?: SortOrder
    reagents?: SortOrder
    safetyNotes?: SortOrder
    expectedDuration?: SortOrder
    difficulty?: SortOrder
    successRate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProtocolSumOrderByAggregateInput = {
    successRate?: SortOrder
  }

  export type ProtocolRelationFilter = {
    is?: ProtocolWhereInput
    isNot?: ProtocolWhereInput
  }

  export type ProtocolExecutionCountOrderByAggregateInput = {
    id?: SortOrder
    protocolId?: SortOrder
    experimentId?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    notes?: SortOrder
    modifications?: SortOrder
    results?: SortOrder
    issues?: SortOrder
    nextSteps?: SortOrder
    executedBy?: SortOrder
    completedSteps?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProtocolExecutionMaxOrderByAggregateInput = {
    id?: SortOrder
    protocolId?: SortOrder
    experimentId?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    notes?: SortOrder
    modifications?: SortOrder
    results?: SortOrder
    issues?: SortOrder
    nextSteps?: SortOrder
    executedBy?: SortOrder
    completedSteps?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProtocolExecutionMinOrderByAggregateInput = {
    id?: SortOrder
    protocolId?: SortOrder
    experimentId?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    notes?: SortOrder
    modifications?: SortOrder
    results?: SortOrder
    issues?: SortOrder
    nextSteps?: SortOrder
    executedBy?: SortOrder
    completedSteps?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NoteNullableRelationFilter = {
    is?: NoteWhereInput | null
    isNot?: NoteWhereInput | null
  }

  export type HighlightNullableRelationFilter = {
    is?: HighlightWhereInput | null
    isNot?: HighlightWhereInput | null
  }

  export type DatabaseEntryNullableRelationFilter = {
    is?: DatabaseEntryWhereInput | null
    isNot?: DatabaseEntryWhereInput | null
  }

  export type TableNullableRelationFilter = {
    is?: TableWhereInput | null
    isNot?: TableWhereInput | null
  }

  export type ProtocolNullableRelationFilter = {
    is?: ProtocolWhereInput | null
    isNot?: ProtocolWhereInput | null
  }

  export type ProtocolExecutionNullableRelationFilter = {
    is?: ProtocolExecutionWhereInput | null
    isNot?: ProtocolExecutionWhereInput | null
  }

  export type LinkCountOrderByAggregateInput = {
    id?: SortOrder
    sourceType?: SortOrder
    sourceId?: SortOrder
    targetType?: SortOrder
    targetId?: SortOrder
    createdAt?: SortOrder
  }

  export type LinkMaxOrderByAggregateInput = {
    id?: SortOrder
    sourceType?: SortOrder
    sourceId?: SortOrder
    targetType?: SortOrder
    targetId?: SortOrder
    createdAt?: SortOrder
  }

  export type LinkMinOrderByAggregateInput = {
    id?: SortOrder
    sourceType?: SortOrder
    sourceId?: SortOrder
    targetType?: SortOrder
    targetId?: SortOrder
    createdAt?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type RecipeIngredientListRelationFilter = {
    every?: RecipeIngredientWhereInput
    some?: RecipeIngredientWhereInput
    none?: RecipeIngredientWhereInput
  }

  export type RecipeIngredientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RecipeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    type?: SortOrder
    steps?: SortOrder
    instructions?: SortOrder
    notes?: SortOrder
    pH?: SortOrder
    osmolarity?: SortOrder
    storage?: SortOrder
    shelfLife?: SortOrder
    source?: SortOrder
    version?: SortOrder
    isPublic?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RecipeAvgOrderByAggregateInput = {
    pH?: SortOrder
  }

  export type RecipeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    type?: SortOrder
    steps?: SortOrder
    instructions?: SortOrder
    notes?: SortOrder
    pH?: SortOrder
    osmolarity?: SortOrder
    storage?: SortOrder
    shelfLife?: SortOrder
    source?: SortOrder
    version?: SortOrder
    isPublic?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RecipeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    type?: SortOrder
    steps?: SortOrder
    instructions?: SortOrder
    notes?: SortOrder
    pH?: SortOrder
    osmolarity?: SortOrder
    storage?: SortOrder
    shelfLife?: SortOrder
    source?: SortOrder
    version?: SortOrder
    isPublic?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RecipeSumOrderByAggregateInput = {
    pH?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type RecipeRelationFilter = {
    is?: RecipeWhereInput
    isNot?: RecipeWhereInput
  }

  export type RecipeIngredientCountOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    concentration?: SortOrder
    supplier?: SortOrder
    catalogNumber?: SortOrder
    notes?: SortOrder
  }

  export type RecipeIngredientAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type RecipeIngredientMaxOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    concentration?: SortOrder
    supplier?: SortOrder
    catalogNumber?: SortOrder
    notes?: SortOrder
  }

  export type RecipeIngredientMinOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    name?: SortOrder
    amount?: SortOrder
    unit?: SortOrder
    concentration?: SortOrder
    supplier?: SortOrder
    catalogNumber?: SortOrder
    notes?: SortOrder
  }

  export type RecipeIngredientSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type CalendarEventCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    start?: SortOrder
    end?: SortOrder
    allDay?: SortOrder
    relatedId?: SortOrder
    createdAt?: SortOrder
    metadata?: SortOrder
  }

  export type CalendarEventMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    start?: SortOrder
    end?: SortOrder
    allDay?: SortOrder
    relatedId?: SortOrder
    createdAt?: SortOrder
    metadata?: SortOrder
  }

  export type CalendarEventMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    start?: SortOrder
    end?: SortOrder
    allDay?: SortOrder
    relatedId?: SortOrder
    createdAt?: SortOrder
    metadata?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type TaskCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    deadline?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
    autoGenerated?: SortOrder
    projectId?: SortOrder
    experimentId?: SortOrder
  }

  export type TaskMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    deadline?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
    autoGenerated?: SortOrder
    projectId?: SortOrder
    experimentId?: SortOrder
  }

  export type TaskMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    deadline?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
    autoGenerated?: SortOrder
    projectId?: SortOrder
    experimentId?: SortOrder
  }

  export type RecipeExecutionCountOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    experimentId?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    notes?: SortOrder
    completedSteps?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RecipeExecutionMaxOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    experimentId?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    notes?: SortOrder
    completedSteps?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RecipeExecutionMinOrderByAggregateInput = {
    id?: SortOrder
    recipeId?: SortOrder
    experimentId?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    notes?: SortOrder
    completedSteps?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExperimentCreateNestedManyWithoutProjectInput = {
    create?: XOR<ExperimentCreateWithoutProjectInput, ExperimentUncheckedCreateWithoutProjectInput> | ExperimentCreateWithoutProjectInput[] | ExperimentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ExperimentCreateOrConnectWithoutProjectInput | ExperimentCreateOrConnectWithoutProjectInput[]
    createMany?: ExperimentCreateManyProjectInputEnvelope
    connect?: ExperimentWhereUniqueInput | ExperimentWhereUniqueInput[]
  }

  export type TaskCreateNestedManyWithoutProjectInput = {
    create?: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput> | TaskCreateWithoutProjectInput[] | TaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutProjectInput | TaskCreateOrConnectWithoutProjectInput[]
    createMany?: TaskCreateManyProjectInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type ExperimentUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ExperimentCreateWithoutProjectInput, ExperimentUncheckedCreateWithoutProjectInput> | ExperimentCreateWithoutProjectInput[] | ExperimentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ExperimentCreateOrConnectWithoutProjectInput | ExperimentCreateOrConnectWithoutProjectInput[]
    createMany?: ExperimentCreateManyProjectInputEnvelope
    connect?: ExperimentWhereUniqueInput | ExperimentWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput> | TaskCreateWithoutProjectInput[] | TaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutProjectInput | TaskCreateOrConnectWithoutProjectInput[]
    createMany?: TaskCreateManyProjectInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ExperimentUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ExperimentCreateWithoutProjectInput, ExperimentUncheckedCreateWithoutProjectInput> | ExperimentCreateWithoutProjectInput[] | ExperimentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ExperimentCreateOrConnectWithoutProjectInput | ExperimentCreateOrConnectWithoutProjectInput[]
    upsert?: ExperimentUpsertWithWhereUniqueWithoutProjectInput | ExperimentUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ExperimentCreateManyProjectInputEnvelope
    set?: ExperimentWhereUniqueInput | ExperimentWhereUniqueInput[]
    disconnect?: ExperimentWhereUniqueInput | ExperimentWhereUniqueInput[]
    delete?: ExperimentWhereUniqueInput | ExperimentWhereUniqueInput[]
    connect?: ExperimentWhereUniqueInput | ExperimentWhereUniqueInput[]
    update?: ExperimentUpdateWithWhereUniqueWithoutProjectInput | ExperimentUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ExperimentUpdateManyWithWhereWithoutProjectInput | ExperimentUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ExperimentScalarWhereInput | ExperimentScalarWhereInput[]
  }

  export type TaskUpdateManyWithoutProjectNestedInput = {
    create?: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput> | TaskCreateWithoutProjectInput[] | TaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutProjectInput | TaskCreateOrConnectWithoutProjectInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutProjectInput | TaskUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: TaskCreateManyProjectInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutProjectInput | TaskUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutProjectInput | TaskUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type ExperimentUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ExperimentCreateWithoutProjectInput, ExperimentUncheckedCreateWithoutProjectInput> | ExperimentCreateWithoutProjectInput[] | ExperimentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ExperimentCreateOrConnectWithoutProjectInput | ExperimentCreateOrConnectWithoutProjectInput[]
    upsert?: ExperimentUpsertWithWhereUniqueWithoutProjectInput | ExperimentUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ExperimentCreateManyProjectInputEnvelope
    set?: ExperimentWhereUniqueInput | ExperimentWhereUniqueInput[]
    disconnect?: ExperimentWhereUniqueInput | ExperimentWhereUniqueInput[]
    delete?: ExperimentWhereUniqueInput | ExperimentWhereUniqueInput[]
    connect?: ExperimentWhereUniqueInput | ExperimentWhereUniqueInput[]
    update?: ExperimentUpdateWithWhereUniqueWithoutProjectInput | ExperimentUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ExperimentUpdateManyWithWhereWithoutProjectInput | ExperimentUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ExperimentScalarWhereInput | ExperimentScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput> | TaskCreateWithoutProjectInput[] | TaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutProjectInput | TaskCreateOrConnectWithoutProjectInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutProjectInput | TaskUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: TaskCreateManyProjectInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutProjectInput | TaskUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutProjectInput | TaskUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type ProjectCreateNestedOneWithoutExperimentsInput = {
    create?: XOR<ProjectCreateWithoutExperimentsInput, ProjectUncheckedCreateWithoutExperimentsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutExperimentsInput
    connect?: ProjectWhereUniqueInput
  }

  export type NoteCreateNestedManyWithoutExperimentInput = {
    create?: XOR<NoteCreateWithoutExperimentInput, NoteUncheckedCreateWithoutExperimentInput> | NoteCreateWithoutExperimentInput[] | NoteUncheckedCreateWithoutExperimentInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutExperimentInput | NoteCreateOrConnectWithoutExperimentInput[]
    createMany?: NoteCreateManyExperimentInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type TableCreateNestedManyWithoutExperimentInput = {
    create?: XOR<TableCreateWithoutExperimentInput, TableUncheckedCreateWithoutExperimentInput> | TableCreateWithoutExperimentInput[] | TableUncheckedCreateWithoutExperimentInput[]
    connectOrCreate?: TableCreateOrConnectWithoutExperimentInput | TableCreateOrConnectWithoutExperimentInput[]
    createMany?: TableCreateManyExperimentInputEnvelope
    connect?: TableWhereUniqueInput | TableWhereUniqueInput[]
  }

  export type ProtocolExecutionCreateNestedManyWithoutExperimentInput = {
    create?: XOR<ProtocolExecutionCreateWithoutExperimentInput, ProtocolExecutionUncheckedCreateWithoutExperimentInput> | ProtocolExecutionCreateWithoutExperimentInput[] | ProtocolExecutionUncheckedCreateWithoutExperimentInput[]
    connectOrCreate?: ProtocolExecutionCreateOrConnectWithoutExperimentInput | ProtocolExecutionCreateOrConnectWithoutExperimentInput[]
    createMany?: ProtocolExecutionCreateManyExperimentInputEnvelope
    connect?: ProtocolExecutionWhereUniqueInput | ProtocolExecutionWhereUniqueInput[]
  }

  export type TaskCreateNestedManyWithoutExperimentInput = {
    create?: XOR<TaskCreateWithoutExperimentInput, TaskUncheckedCreateWithoutExperimentInput> | TaskCreateWithoutExperimentInput[] | TaskUncheckedCreateWithoutExperimentInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutExperimentInput | TaskCreateOrConnectWithoutExperimentInput[]
    createMany?: TaskCreateManyExperimentInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type RecipeExecutionCreateNestedManyWithoutExperimentInput = {
    create?: XOR<RecipeExecutionCreateWithoutExperimentInput, RecipeExecutionUncheckedCreateWithoutExperimentInput> | RecipeExecutionCreateWithoutExperimentInput[] | RecipeExecutionUncheckedCreateWithoutExperimentInput[]
    connectOrCreate?: RecipeExecutionCreateOrConnectWithoutExperimentInput | RecipeExecutionCreateOrConnectWithoutExperimentInput[]
    createMany?: RecipeExecutionCreateManyExperimentInputEnvelope
    connect?: RecipeExecutionWhereUniqueInput | RecipeExecutionWhereUniqueInput[]
  }

  export type NoteUncheckedCreateNestedManyWithoutExperimentInput = {
    create?: XOR<NoteCreateWithoutExperimentInput, NoteUncheckedCreateWithoutExperimentInput> | NoteCreateWithoutExperimentInput[] | NoteUncheckedCreateWithoutExperimentInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutExperimentInput | NoteCreateOrConnectWithoutExperimentInput[]
    createMany?: NoteCreateManyExperimentInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type TableUncheckedCreateNestedManyWithoutExperimentInput = {
    create?: XOR<TableCreateWithoutExperimentInput, TableUncheckedCreateWithoutExperimentInput> | TableCreateWithoutExperimentInput[] | TableUncheckedCreateWithoutExperimentInput[]
    connectOrCreate?: TableCreateOrConnectWithoutExperimentInput | TableCreateOrConnectWithoutExperimentInput[]
    createMany?: TableCreateManyExperimentInputEnvelope
    connect?: TableWhereUniqueInput | TableWhereUniqueInput[]
  }

  export type ProtocolExecutionUncheckedCreateNestedManyWithoutExperimentInput = {
    create?: XOR<ProtocolExecutionCreateWithoutExperimentInput, ProtocolExecutionUncheckedCreateWithoutExperimentInput> | ProtocolExecutionCreateWithoutExperimentInput[] | ProtocolExecutionUncheckedCreateWithoutExperimentInput[]
    connectOrCreate?: ProtocolExecutionCreateOrConnectWithoutExperimentInput | ProtocolExecutionCreateOrConnectWithoutExperimentInput[]
    createMany?: ProtocolExecutionCreateManyExperimentInputEnvelope
    connect?: ProtocolExecutionWhereUniqueInput | ProtocolExecutionWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutExperimentInput = {
    create?: XOR<TaskCreateWithoutExperimentInput, TaskUncheckedCreateWithoutExperimentInput> | TaskCreateWithoutExperimentInput[] | TaskUncheckedCreateWithoutExperimentInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutExperimentInput | TaskCreateOrConnectWithoutExperimentInput[]
    createMany?: TaskCreateManyExperimentInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type RecipeExecutionUncheckedCreateNestedManyWithoutExperimentInput = {
    create?: XOR<RecipeExecutionCreateWithoutExperimentInput, RecipeExecutionUncheckedCreateWithoutExperimentInput> | RecipeExecutionCreateWithoutExperimentInput[] | RecipeExecutionUncheckedCreateWithoutExperimentInput[]
    connectOrCreate?: RecipeExecutionCreateOrConnectWithoutExperimentInput | RecipeExecutionCreateOrConnectWithoutExperimentInput[]
    createMany?: RecipeExecutionCreateManyExperimentInputEnvelope
    connect?: RecipeExecutionWhereUniqueInput | RecipeExecutionWhereUniqueInput[]
  }

  export type ProjectUpdateOneRequiredWithoutExperimentsNestedInput = {
    create?: XOR<ProjectCreateWithoutExperimentsInput, ProjectUncheckedCreateWithoutExperimentsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutExperimentsInput
    upsert?: ProjectUpsertWithoutExperimentsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutExperimentsInput, ProjectUpdateWithoutExperimentsInput>, ProjectUncheckedUpdateWithoutExperimentsInput>
  }

  export type NoteUpdateManyWithoutExperimentNestedInput = {
    create?: XOR<NoteCreateWithoutExperimentInput, NoteUncheckedCreateWithoutExperimentInput> | NoteCreateWithoutExperimentInput[] | NoteUncheckedCreateWithoutExperimentInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutExperimentInput | NoteCreateOrConnectWithoutExperimentInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutExperimentInput | NoteUpsertWithWhereUniqueWithoutExperimentInput[]
    createMany?: NoteCreateManyExperimentInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutExperimentInput | NoteUpdateWithWhereUniqueWithoutExperimentInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutExperimentInput | NoteUpdateManyWithWhereWithoutExperimentInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type TableUpdateManyWithoutExperimentNestedInput = {
    create?: XOR<TableCreateWithoutExperimentInput, TableUncheckedCreateWithoutExperimentInput> | TableCreateWithoutExperimentInput[] | TableUncheckedCreateWithoutExperimentInput[]
    connectOrCreate?: TableCreateOrConnectWithoutExperimentInput | TableCreateOrConnectWithoutExperimentInput[]
    upsert?: TableUpsertWithWhereUniqueWithoutExperimentInput | TableUpsertWithWhereUniqueWithoutExperimentInput[]
    createMany?: TableCreateManyExperimentInputEnvelope
    set?: TableWhereUniqueInput | TableWhereUniqueInput[]
    disconnect?: TableWhereUniqueInput | TableWhereUniqueInput[]
    delete?: TableWhereUniqueInput | TableWhereUniqueInput[]
    connect?: TableWhereUniqueInput | TableWhereUniqueInput[]
    update?: TableUpdateWithWhereUniqueWithoutExperimentInput | TableUpdateWithWhereUniqueWithoutExperimentInput[]
    updateMany?: TableUpdateManyWithWhereWithoutExperimentInput | TableUpdateManyWithWhereWithoutExperimentInput[]
    deleteMany?: TableScalarWhereInput | TableScalarWhereInput[]
  }

  export type ProtocolExecutionUpdateManyWithoutExperimentNestedInput = {
    create?: XOR<ProtocolExecutionCreateWithoutExperimentInput, ProtocolExecutionUncheckedCreateWithoutExperimentInput> | ProtocolExecutionCreateWithoutExperimentInput[] | ProtocolExecutionUncheckedCreateWithoutExperimentInput[]
    connectOrCreate?: ProtocolExecutionCreateOrConnectWithoutExperimentInput | ProtocolExecutionCreateOrConnectWithoutExperimentInput[]
    upsert?: ProtocolExecutionUpsertWithWhereUniqueWithoutExperimentInput | ProtocolExecutionUpsertWithWhereUniqueWithoutExperimentInput[]
    createMany?: ProtocolExecutionCreateManyExperimentInputEnvelope
    set?: ProtocolExecutionWhereUniqueInput | ProtocolExecutionWhereUniqueInput[]
    disconnect?: ProtocolExecutionWhereUniqueInput | ProtocolExecutionWhereUniqueInput[]
    delete?: ProtocolExecutionWhereUniqueInput | ProtocolExecutionWhereUniqueInput[]
    connect?: ProtocolExecutionWhereUniqueInput | ProtocolExecutionWhereUniqueInput[]
    update?: ProtocolExecutionUpdateWithWhereUniqueWithoutExperimentInput | ProtocolExecutionUpdateWithWhereUniqueWithoutExperimentInput[]
    updateMany?: ProtocolExecutionUpdateManyWithWhereWithoutExperimentInput | ProtocolExecutionUpdateManyWithWhereWithoutExperimentInput[]
    deleteMany?: ProtocolExecutionScalarWhereInput | ProtocolExecutionScalarWhereInput[]
  }

  export type TaskUpdateManyWithoutExperimentNestedInput = {
    create?: XOR<TaskCreateWithoutExperimentInput, TaskUncheckedCreateWithoutExperimentInput> | TaskCreateWithoutExperimentInput[] | TaskUncheckedCreateWithoutExperimentInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutExperimentInput | TaskCreateOrConnectWithoutExperimentInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutExperimentInput | TaskUpsertWithWhereUniqueWithoutExperimentInput[]
    createMany?: TaskCreateManyExperimentInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutExperimentInput | TaskUpdateWithWhereUniqueWithoutExperimentInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutExperimentInput | TaskUpdateManyWithWhereWithoutExperimentInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type RecipeExecutionUpdateManyWithoutExperimentNestedInput = {
    create?: XOR<RecipeExecutionCreateWithoutExperimentInput, RecipeExecutionUncheckedCreateWithoutExperimentInput> | RecipeExecutionCreateWithoutExperimentInput[] | RecipeExecutionUncheckedCreateWithoutExperimentInput[]
    connectOrCreate?: RecipeExecutionCreateOrConnectWithoutExperimentInput | RecipeExecutionCreateOrConnectWithoutExperimentInput[]
    upsert?: RecipeExecutionUpsertWithWhereUniqueWithoutExperimentInput | RecipeExecutionUpsertWithWhereUniqueWithoutExperimentInput[]
    createMany?: RecipeExecutionCreateManyExperimentInputEnvelope
    set?: RecipeExecutionWhereUniqueInput | RecipeExecutionWhereUniqueInput[]
    disconnect?: RecipeExecutionWhereUniqueInput | RecipeExecutionWhereUniqueInput[]
    delete?: RecipeExecutionWhereUniqueInput | RecipeExecutionWhereUniqueInput[]
    connect?: RecipeExecutionWhereUniqueInput | RecipeExecutionWhereUniqueInput[]
    update?: RecipeExecutionUpdateWithWhereUniqueWithoutExperimentInput | RecipeExecutionUpdateWithWhereUniqueWithoutExperimentInput[]
    updateMany?: RecipeExecutionUpdateManyWithWhereWithoutExperimentInput | RecipeExecutionUpdateManyWithWhereWithoutExperimentInput[]
    deleteMany?: RecipeExecutionScalarWhereInput | RecipeExecutionScalarWhereInput[]
  }

  export type NoteUncheckedUpdateManyWithoutExperimentNestedInput = {
    create?: XOR<NoteCreateWithoutExperimentInput, NoteUncheckedCreateWithoutExperimentInput> | NoteCreateWithoutExperimentInput[] | NoteUncheckedCreateWithoutExperimentInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutExperimentInput | NoteCreateOrConnectWithoutExperimentInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutExperimentInput | NoteUpsertWithWhereUniqueWithoutExperimentInput[]
    createMany?: NoteCreateManyExperimentInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutExperimentInput | NoteUpdateWithWhereUniqueWithoutExperimentInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutExperimentInput | NoteUpdateManyWithWhereWithoutExperimentInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type TableUncheckedUpdateManyWithoutExperimentNestedInput = {
    create?: XOR<TableCreateWithoutExperimentInput, TableUncheckedCreateWithoutExperimentInput> | TableCreateWithoutExperimentInput[] | TableUncheckedCreateWithoutExperimentInput[]
    connectOrCreate?: TableCreateOrConnectWithoutExperimentInput | TableCreateOrConnectWithoutExperimentInput[]
    upsert?: TableUpsertWithWhereUniqueWithoutExperimentInput | TableUpsertWithWhereUniqueWithoutExperimentInput[]
    createMany?: TableCreateManyExperimentInputEnvelope
    set?: TableWhereUniqueInput | TableWhereUniqueInput[]
    disconnect?: TableWhereUniqueInput | TableWhereUniqueInput[]
    delete?: TableWhereUniqueInput | TableWhereUniqueInput[]
    connect?: TableWhereUniqueInput | TableWhereUniqueInput[]
    update?: TableUpdateWithWhereUniqueWithoutExperimentInput | TableUpdateWithWhereUniqueWithoutExperimentInput[]
    updateMany?: TableUpdateManyWithWhereWithoutExperimentInput | TableUpdateManyWithWhereWithoutExperimentInput[]
    deleteMany?: TableScalarWhereInput | TableScalarWhereInput[]
  }

  export type ProtocolExecutionUncheckedUpdateManyWithoutExperimentNestedInput = {
    create?: XOR<ProtocolExecutionCreateWithoutExperimentInput, ProtocolExecutionUncheckedCreateWithoutExperimentInput> | ProtocolExecutionCreateWithoutExperimentInput[] | ProtocolExecutionUncheckedCreateWithoutExperimentInput[]
    connectOrCreate?: ProtocolExecutionCreateOrConnectWithoutExperimentInput | ProtocolExecutionCreateOrConnectWithoutExperimentInput[]
    upsert?: ProtocolExecutionUpsertWithWhereUniqueWithoutExperimentInput | ProtocolExecutionUpsertWithWhereUniqueWithoutExperimentInput[]
    createMany?: ProtocolExecutionCreateManyExperimentInputEnvelope
    set?: ProtocolExecutionWhereUniqueInput | ProtocolExecutionWhereUniqueInput[]
    disconnect?: ProtocolExecutionWhereUniqueInput | ProtocolExecutionWhereUniqueInput[]
    delete?: ProtocolExecutionWhereUniqueInput | ProtocolExecutionWhereUniqueInput[]
    connect?: ProtocolExecutionWhereUniqueInput | ProtocolExecutionWhereUniqueInput[]
    update?: ProtocolExecutionUpdateWithWhereUniqueWithoutExperimentInput | ProtocolExecutionUpdateWithWhereUniqueWithoutExperimentInput[]
    updateMany?: ProtocolExecutionUpdateManyWithWhereWithoutExperimentInput | ProtocolExecutionUpdateManyWithWhereWithoutExperimentInput[]
    deleteMany?: ProtocolExecutionScalarWhereInput | ProtocolExecutionScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutExperimentNestedInput = {
    create?: XOR<TaskCreateWithoutExperimentInput, TaskUncheckedCreateWithoutExperimentInput> | TaskCreateWithoutExperimentInput[] | TaskUncheckedCreateWithoutExperimentInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutExperimentInput | TaskCreateOrConnectWithoutExperimentInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutExperimentInput | TaskUpsertWithWhereUniqueWithoutExperimentInput[]
    createMany?: TaskCreateManyExperimentInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutExperimentInput | TaskUpdateWithWhereUniqueWithoutExperimentInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutExperimentInput | TaskUpdateManyWithWhereWithoutExperimentInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type RecipeExecutionUncheckedUpdateManyWithoutExperimentNestedInput = {
    create?: XOR<RecipeExecutionCreateWithoutExperimentInput, RecipeExecutionUncheckedCreateWithoutExperimentInput> | RecipeExecutionCreateWithoutExperimentInput[] | RecipeExecutionUncheckedCreateWithoutExperimentInput[]
    connectOrCreate?: RecipeExecutionCreateOrConnectWithoutExperimentInput | RecipeExecutionCreateOrConnectWithoutExperimentInput[]
    upsert?: RecipeExecutionUpsertWithWhereUniqueWithoutExperimentInput | RecipeExecutionUpsertWithWhereUniqueWithoutExperimentInput[]
    createMany?: RecipeExecutionCreateManyExperimentInputEnvelope
    set?: RecipeExecutionWhereUniqueInput | RecipeExecutionWhereUniqueInput[]
    disconnect?: RecipeExecutionWhereUniqueInput | RecipeExecutionWhereUniqueInput[]
    delete?: RecipeExecutionWhereUniqueInput | RecipeExecutionWhereUniqueInput[]
    connect?: RecipeExecutionWhereUniqueInput | RecipeExecutionWhereUniqueInput[]
    update?: RecipeExecutionUpdateWithWhereUniqueWithoutExperimentInput | RecipeExecutionUpdateWithWhereUniqueWithoutExperimentInput[]
    updateMany?: RecipeExecutionUpdateManyWithWhereWithoutExperimentInput | RecipeExecutionUpdateManyWithWhereWithoutExperimentInput[]
    deleteMany?: RecipeExecutionScalarWhereInput | RecipeExecutionScalarWhereInput[]
  }

  export type ExperimentCreateNestedOneWithoutNotesInput = {
    create?: XOR<ExperimentCreateWithoutNotesInput, ExperimentUncheckedCreateWithoutNotesInput>
    connectOrCreate?: ExperimentCreateOrConnectWithoutNotesInput
    connect?: ExperimentWhereUniqueInput
  }

  export type LinkCreateNestedManyWithoutNoteInput = {
    create?: XOR<LinkCreateWithoutNoteInput, LinkUncheckedCreateWithoutNoteInput> | LinkCreateWithoutNoteInput[] | LinkUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: LinkCreateOrConnectWithoutNoteInput | LinkCreateOrConnectWithoutNoteInput[]
    createMany?: LinkCreateManyNoteInputEnvelope
    connect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
  }

  export type LinkUncheckedCreateNestedManyWithoutNoteInput = {
    create?: XOR<LinkCreateWithoutNoteInput, LinkUncheckedCreateWithoutNoteInput> | LinkCreateWithoutNoteInput[] | LinkUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: LinkCreateOrConnectWithoutNoteInput | LinkCreateOrConnectWithoutNoteInput[]
    createMany?: LinkCreateManyNoteInputEnvelope
    connect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
  }

  export type ExperimentUpdateOneWithoutNotesNestedInput = {
    create?: XOR<ExperimentCreateWithoutNotesInput, ExperimentUncheckedCreateWithoutNotesInput>
    connectOrCreate?: ExperimentCreateOrConnectWithoutNotesInput
    upsert?: ExperimentUpsertWithoutNotesInput
    disconnect?: ExperimentWhereInput | boolean
    delete?: ExperimentWhereInput | boolean
    connect?: ExperimentWhereUniqueInput
    update?: XOR<XOR<ExperimentUpdateToOneWithWhereWithoutNotesInput, ExperimentUpdateWithoutNotesInput>, ExperimentUncheckedUpdateWithoutNotesInput>
  }

  export type LinkUpdateManyWithoutNoteNestedInput = {
    create?: XOR<LinkCreateWithoutNoteInput, LinkUncheckedCreateWithoutNoteInput> | LinkCreateWithoutNoteInput[] | LinkUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: LinkCreateOrConnectWithoutNoteInput | LinkCreateOrConnectWithoutNoteInput[]
    upsert?: LinkUpsertWithWhereUniqueWithoutNoteInput | LinkUpsertWithWhereUniqueWithoutNoteInput[]
    createMany?: LinkCreateManyNoteInputEnvelope
    set?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    disconnect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    delete?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    connect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    update?: LinkUpdateWithWhereUniqueWithoutNoteInput | LinkUpdateWithWhereUniqueWithoutNoteInput[]
    updateMany?: LinkUpdateManyWithWhereWithoutNoteInput | LinkUpdateManyWithWhereWithoutNoteInput[]
    deleteMany?: LinkScalarWhereInput | LinkScalarWhereInput[]
  }

  export type LinkUncheckedUpdateManyWithoutNoteNestedInput = {
    create?: XOR<LinkCreateWithoutNoteInput, LinkUncheckedCreateWithoutNoteInput> | LinkCreateWithoutNoteInput[] | LinkUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: LinkCreateOrConnectWithoutNoteInput | LinkCreateOrConnectWithoutNoteInput[]
    upsert?: LinkUpsertWithWhereUniqueWithoutNoteInput | LinkUpsertWithWhereUniqueWithoutNoteInput[]
    createMany?: LinkCreateManyNoteInputEnvelope
    set?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    disconnect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    delete?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    connect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    update?: LinkUpdateWithWhereUniqueWithoutNoteInput | LinkUpdateWithWhereUniqueWithoutNoteInput[]
    updateMany?: LinkUpdateManyWithWhereWithoutNoteInput | LinkUpdateManyWithWhereWithoutNoteInput[]
    deleteMany?: LinkScalarWhereInput | LinkScalarWhereInput[]
  }

  export type HighlightCreateNestedManyWithoutPdfInput = {
    create?: XOR<HighlightCreateWithoutPdfInput, HighlightUncheckedCreateWithoutPdfInput> | HighlightCreateWithoutPdfInput[] | HighlightUncheckedCreateWithoutPdfInput[]
    connectOrCreate?: HighlightCreateOrConnectWithoutPdfInput | HighlightCreateOrConnectWithoutPdfInput[]
    createMany?: HighlightCreateManyPdfInputEnvelope
    connect?: HighlightWhereUniqueInput | HighlightWhereUniqueInput[]
  }

  export type HighlightUncheckedCreateNestedManyWithoutPdfInput = {
    create?: XOR<HighlightCreateWithoutPdfInput, HighlightUncheckedCreateWithoutPdfInput> | HighlightCreateWithoutPdfInput[] | HighlightUncheckedCreateWithoutPdfInput[]
    connectOrCreate?: HighlightCreateOrConnectWithoutPdfInput | HighlightCreateOrConnectWithoutPdfInput[]
    createMany?: HighlightCreateManyPdfInputEnvelope
    connect?: HighlightWhereUniqueInput | HighlightWhereUniqueInput[]
  }

  export type HighlightUpdateManyWithoutPdfNestedInput = {
    create?: XOR<HighlightCreateWithoutPdfInput, HighlightUncheckedCreateWithoutPdfInput> | HighlightCreateWithoutPdfInput[] | HighlightUncheckedCreateWithoutPdfInput[]
    connectOrCreate?: HighlightCreateOrConnectWithoutPdfInput | HighlightCreateOrConnectWithoutPdfInput[]
    upsert?: HighlightUpsertWithWhereUniqueWithoutPdfInput | HighlightUpsertWithWhereUniqueWithoutPdfInput[]
    createMany?: HighlightCreateManyPdfInputEnvelope
    set?: HighlightWhereUniqueInput | HighlightWhereUniqueInput[]
    disconnect?: HighlightWhereUniqueInput | HighlightWhereUniqueInput[]
    delete?: HighlightWhereUniqueInput | HighlightWhereUniqueInput[]
    connect?: HighlightWhereUniqueInput | HighlightWhereUniqueInput[]
    update?: HighlightUpdateWithWhereUniqueWithoutPdfInput | HighlightUpdateWithWhereUniqueWithoutPdfInput[]
    updateMany?: HighlightUpdateManyWithWhereWithoutPdfInput | HighlightUpdateManyWithWhereWithoutPdfInput[]
    deleteMany?: HighlightScalarWhereInput | HighlightScalarWhereInput[]
  }

  export type HighlightUncheckedUpdateManyWithoutPdfNestedInput = {
    create?: XOR<HighlightCreateWithoutPdfInput, HighlightUncheckedCreateWithoutPdfInput> | HighlightCreateWithoutPdfInput[] | HighlightUncheckedCreateWithoutPdfInput[]
    connectOrCreate?: HighlightCreateOrConnectWithoutPdfInput | HighlightCreateOrConnectWithoutPdfInput[]
    upsert?: HighlightUpsertWithWhereUniqueWithoutPdfInput | HighlightUpsertWithWhereUniqueWithoutPdfInput[]
    createMany?: HighlightCreateManyPdfInputEnvelope
    set?: HighlightWhereUniqueInput | HighlightWhereUniqueInput[]
    disconnect?: HighlightWhereUniqueInput | HighlightWhereUniqueInput[]
    delete?: HighlightWhereUniqueInput | HighlightWhereUniqueInput[]
    connect?: HighlightWhereUniqueInput | HighlightWhereUniqueInput[]
    update?: HighlightUpdateWithWhereUniqueWithoutPdfInput | HighlightUpdateWithWhereUniqueWithoutPdfInput[]
    updateMany?: HighlightUpdateManyWithWhereWithoutPdfInput | HighlightUpdateManyWithWhereWithoutPdfInput[]
    deleteMany?: HighlightScalarWhereInput | HighlightScalarWhereInput[]
  }

  export type PDFCreateNestedOneWithoutHighlightsInput = {
    create?: XOR<PDFCreateWithoutHighlightsInput, PDFUncheckedCreateWithoutHighlightsInput>
    connectOrCreate?: PDFCreateOrConnectWithoutHighlightsInput
    connect?: PDFWhereUniqueInput
  }

  export type LinkCreateNestedManyWithoutHighlightInput = {
    create?: XOR<LinkCreateWithoutHighlightInput, LinkUncheckedCreateWithoutHighlightInput> | LinkCreateWithoutHighlightInput[] | LinkUncheckedCreateWithoutHighlightInput[]
    connectOrCreate?: LinkCreateOrConnectWithoutHighlightInput | LinkCreateOrConnectWithoutHighlightInput[]
    createMany?: LinkCreateManyHighlightInputEnvelope
    connect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
  }

  export type LinkUncheckedCreateNestedManyWithoutHighlightInput = {
    create?: XOR<LinkCreateWithoutHighlightInput, LinkUncheckedCreateWithoutHighlightInput> | LinkCreateWithoutHighlightInput[] | LinkUncheckedCreateWithoutHighlightInput[]
    connectOrCreate?: LinkCreateOrConnectWithoutHighlightInput | LinkCreateOrConnectWithoutHighlightInput[]
    createMany?: LinkCreateManyHighlightInputEnvelope
    connect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PDFUpdateOneRequiredWithoutHighlightsNestedInput = {
    create?: XOR<PDFCreateWithoutHighlightsInput, PDFUncheckedCreateWithoutHighlightsInput>
    connectOrCreate?: PDFCreateOrConnectWithoutHighlightsInput
    upsert?: PDFUpsertWithoutHighlightsInput
    connect?: PDFWhereUniqueInput
    update?: XOR<XOR<PDFUpdateToOneWithWhereWithoutHighlightsInput, PDFUpdateWithoutHighlightsInput>, PDFUncheckedUpdateWithoutHighlightsInput>
  }

  export type LinkUpdateManyWithoutHighlightNestedInput = {
    create?: XOR<LinkCreateWithoutHighlightInput, LinkUncheckedCreateWithoutHighlightInput> | LinkCreateWithoutHighlightInput[] | LinkUncheckedCreateWithoutHighlightInput[]
    connectOrCreate?: LinkCreateOrConnectWithoutHighlightInput | LinkCreateOrConnectWithoutHighlightInput[]
    upsert?: LinkUpsertWithWhereUniqueWithoutHighlightInput | LinkUpsertWithWhereUniqueWithoutHighlightInput[]
    createMany?: LinkCreateManyHighlightInputEnvelope
    set?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    disconnect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    delete?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    connect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    update?: LinkUpdateWithWhereUniqueWithoutHighlightInput | LinkUpdateWithWhereUniqueWithoutHighlightInput[]
    updateMany?: LinkUpdateManyWithWhereWithoutHighlightInput | LinkUpdateManyWithWhereWithoutHighlightInput[]
    deleteMany?: LinkScalarWhereInput | LinkScalarWhereInput[]
  }

  export type LinkUncheckedUpdateManyWithoutHighlightNestedInput = {
    create?: XOR<LinkCreateWithoutHighlightInput, LinkUncheckedCreateWithoutHighlightInput> | LinkCreateWithoutHighlightInput[] | LinkUncheckedCreateWithoutHighlightInput[]
    connectOrCreate?: LinkCreateOrConnectWithoutHighlightInput | LinkCreateOrConnectWithoutHighlightInput[]
    upsert?: LinkUpsertWithWhereUniqueWithoutHighlightInput | LinkUpsertWithWhereUniqueWithoutHighlightInput[]
    createMany?: LinkCreateManyHighlightInputEnvelope
    set?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    disconnect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    delete?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    connect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    update?: LinkUpdateWithWhereUniqueWithoutHighlightInput | LinkUpdateWithWhereUniqueWithoutHighlightInput[]
    updateMany?: LinkUpdateManyWithWhereWithoutHighlightInput | LinkUpdateManyWithWhereWithoutHighlightInput[]
    deleteMany?: LinkScalarWhereInput | LinkScalarWhereInput[]
  }

  export type DatabaseEntryCreateNestedManyWithoutRelatedLitNotesInput = {
    create?: XOR<DatabaseEntryCreateWithoutRelatedLitNotesInput, DatabaseEntryUncheckedCreateWithoutRelatedLitNotesInput> | DatabaseEntryCreateWithoutRelatedLitNotesInput[] | DatabaseEntryUncheckedCreateWithoutRelatedLitNotesInput[]
    connectOrCreate?: DatabaseEntryCreateOrConnectWithoutRelatedLitNotesInput | DatabaseEntryCreateOrConnectWithoutRelatedLitNotesInput[]
    connect?: DatabaseEntryWhereUniqueInput | DatabaseEntryWhereUniqueInput[]
  }

  export type DatabaseEntryUncheckedCreateNestedManyWithoutRelatedLitNotesInput = {
    create?: XOR<DatabaseEntryCreateWithoutRelatedLitNotesInput, DatabaseEntryUncheckedCreateWithoutRelatedLitNotesInput> | DatabaseEntryCreateWithoutRelatedLitNotesInput[] | DatabaseEntryUncheckedCreateWithoutRelatedLitNotesInput[]
    connectOrCreate?: DatabaseEntryCreateOrConnectWithoutRelatedLitNotesInput | DatabaseEntryCreateOrConnectWithoutRelatedLitNotesInput[]
    connect?: DatabaseEntryWhereUniqueInput | DatabaseEntryWhereUniqueInput[]
  }

  export type DatabaseEntryUpdateManyWithoutRelatedLitNotesNestedInput = {
    create?: XOR<DatabaseEntryCreateWithoutRelatedLitNotesInput, DatabaseEntryUncheckedCreateWithoutRelatedLitNotesInput> | DatabaseEntryCreateWithoutRelatedLitNotesInput[] | DatabaseEntryUncheckedCreateWithoutRelatedLitNotesInput[]
    connectOrCreate?: DatabaseEntryCreateOrConnectWithoutRelatedLitNotesInput | DatabaseEntryCreateOrConnectWithoutRelatedLitNotesInput[]
    upsert?: DatabaseEntryUpsertWithWhereUniqueWithoutRelatedLitNotesInput | DatabaseEntryUpsertWithWhereUniqueWithoutRelatedLitNotesInput[]
    set?: DatabaseEntryWhereUniqueInput | DatabaseEntryWhereUniqueInput[]
    disconnect?: DatabaseEntryWhereUniqueInput | DatabaseEntryWhereUniqueInput[]
    delete?: DatabaseEntryWhereUniqueInput | DatabaseEntryWhereUniqueInput[]
    connect?: DatabaseEntryWhereUniqueInput | DatabaseEntryWhereUniqueInput[]
    update?: DatabaseEntryUpdateWithWhereUniqueWithoutRelatedLitNotesInput | DatabaseEntryUpdateWithWhereUniqueWithoutRelatedLitNotesInput[]
    updateMany?: DatabaseEntryUpdateManyWithWhereWithoutRelatedLitNotesInput | DatabaseEntryUpdateManyWithWhereWithoutRelatedLitNotesInput[]
    deleteMany?: DatabaseEntryScalarWhereInput | DatabaseEntryScalarWhereInput[]
  }

  export type DatabaseEntryUncheckedUpdateManyWithoutRelatedLitNotesNestedInput = {
    create?: XOR<DatabaseEntryCreateWithoutRelatedLitNotesInput, DatabaseEntryUncheckedCreateWithoutRelatedLitNotesInput> | DatabaseEntryCreateWithoutRelatedLitNotesInput[] | DatabaseEntryUncheckedCreateWithoutRelatedLitNotesInput[]
    connectOrCreate?: DatabaseEntryCreateOrConnectWithoutRelatedLitNotesInput | DatabaseEntryCreateOrConnectWithoutRelatedLitNotesInput[]
    upsert?: DatabaseEntryUpsertWithWhereUniqueWithoutRelatedLitNotesInput | DatabaseEntryUpsertWithWhereUniqueWithoutRelatedLitNotesInput[]
    set?: DatabaseEntryWhereUniqueInput | DatabaseEntryWhereUniqueInput[]
    disconnect?: DatabaseEntryWhereUniqueInput | DatabaseEntryWhereUniqueInput[]
    delete?: DatabaseEntryWhereUniqueInput | DatabaseEntryWhereUniqueInput[]
    connect?: DatabaseEntryWhereUniqueInput | DatabaseEntryWhereUniqueInput[]
    update?: DatabaseEntryUpdateWithWhereUniqueWithoutRelatedLitNotesInput | DatabaseEntryUpdateWithWhereUniqueWithoutRelatedLitNotesInput[]
    updateMany?: DatabaseEntryUpdateManyWithWhereWithoutRelatedLitNotesInput | DatabaseEntryUpdateManyWithWhereWithoutRelatedLitNotesInput[]
    deleteMany?: DatabaseEntryScalarWhereInput | DatabaseEntryScalarWhereInput[]
  }

  export type LiteratureNoteCreateNestedManyWithoutRelatedEntriesInput = {
    create?: XOR<LiteratureNoteCreateWithoutRelatedEntriesInput, LiteratureNoteUncheckedCreateWithoutRelatedEntriesInput> | LiteratureNoteCreateWithoutRelatedEntriesInput[] | LiteratureNoteUncheckedCreateWithoutRelatedEntriesInput[]
    connectOrCreate?: LiteratureNoteCreateOrConnectWithoutRelatedEntriesInput | LiteratureNoteCreateOrConnectWithoutRelatedEntriesInput[]
    connect?: LiteratureNoteWhereUniqueInput | LiteratureNoteWhereUniqueInput[]
  }

  export type LinkCreateNestedManyWithoutDatabaseEntryInput = {
    create?: XOR<LinkCreateWithoutDatabaseEntryInput, LinkUncheckedCreateWithoutDatabaseEntryInput> | LinkCreateWithoutDatabaseEntryInput[] | LinkUncheckedCreateWithoutDatabaseEntryInput[]
    connectOrCreate?: LinkCreateOrConnectWithoutDatabaseEntryInput | LinkCreateOrConnectWithoutDatabaseEntryInput[]
    createMany?: LinkCreateManyDatabaseEntryInputEnvelope
    connect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
  }

  export type LiteratureNoteUncheckedCreateNestedManyWithoutRelatedEntriesInput = {
    create?: XOR<LiteratureNoteCreateWithoutRelatedEntriesInput, LiteratureNoteUncheckedCreateWithoutRelatedEntriesInput> | LiteratureNoteCreateWithoutRelatedEntriesInput[] | LiteratureNoteUncheckedCreateWithoutRelatedEntriesInput[]
    connectOrCreate?: LiteratureNoteCreateOrConnectWithoutRelatedEntriesInput | LiteratureNoteCreateOrConnectWithoutRelatedEntriesInput[]
    connect?: LiteratureNoteWhereUniqueInput | LiteratureNoteWhereUniqueInput[]
  }

  export type LinkUncheckedCreateNestedManyWithoutDatabaseEntryInput = {
    create?: XOR<LinkCreateWithoutDatabaseEntryInput, LinkUncheckedCreateWithoutDatabaseEntryInput> | LinkCreateWithoutDatabaseEntryInput[] | LinkUncheckedCreateWithoutDatabaseEntryInput[]
    connectOrCreate?: LinkCreateOrConnectWithoutDatabaseEntryInput | LinkCreateOrConnectWithoutDatabaseEntryInput[]
    createMany?: LinkCreateManyDatabaseEntryInputEnvelope
    connect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LiteratureNoteUpdateManyWithoutRelatedEntriesNestedInput = {
    create?: XOR<LiteratureNoteCreateWithoutRelatedEntriesInput, LiteratureNoteUncheckedCreateWithoutRelatedEntriesInput> | LiteratureNoteCreateWithoutRelatedEntriesInput[] | LiteratureNoteUncheckedCreateWithoutRelatedEntriesInput[]
    connectOrCreate?: LiteratureNoteCreateOrConnectWithoutRelatedEntriesInput | LiteratureNoteCreateOrConnectWithoutRelatedEntriesInput[]
    upsert?: LiteratureNoteUpsertWithWhereUniqueWithoutRelatedEntriesInput | LiteratureNoteUpsertWithWhereUniqueWithoutRelatedEntriesInput[]
    set?: LiteratureNoteWhereUniqueInput | LiteratureNoteWhereUniqueInput[]
    disconnect?: LiteratureNoteWhereUniqueInput | LiteratureNoteWhereUniqueInput[]
    delete?: LiteratureNoteWhereUniqueInput | LiteratureNoteWhereUniqueInput[]
    connect?: LiteratureNoteWhereUniqueInput | LiteratureNoteWhereUniqueInput[]
    update?: LiteratureNoteUpdateWithWhereUniqueWithoutRelatedEntriesInput | LiteratureNoteUpdateWithWhereUniqueWithoutRelatedEntriesInput[]
    updateMany?: LiteratureNoteUpdateManyWithWhereWithoutRelatedEntriesInput | LiteratureNoteUpdateManyWithWhereWithoutRelatedEntriesInput[]
    deleteMany?: LiteratureNoteScalarWhereInput | LiteratureNoteScalarWhereInput[]
  }

  export type LinkUpdateManyWithoutDatabaseEntryNestedInput = {
    create?: XOR<LinkCreateWithoutDatabaseEntryInput, LinkUncheckedCreateWithoutDatabaseEntryInput> | LinkCreateWithoutDatabaseEntryInput[] | LinkUncheckedCreateWithoutDatabaseEntryInput[]
    connectOrCreate?: LinkCreateOrConnectWithoutDatabaseEntryInput | LinkCreateOrConnectWithoutDatabaseEntryInput[]
    upsert?: LinkUpsertWithWhereUniqueWithoutDatabaseEntryInput | LinkUpsertWithWhereUniqueWithoutDatabaseEntryInput[]
    createMany?: LinkCreateManyDatabaseEntryInputEnvelope
    set?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    disconnect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    delete?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    connect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    update?: LinkUpdateWithWhereUniqueWithoutDatabaseEntryInput | LinkUpdateWithWhereUniqueWithoutDatabaseEntryInput[]
    updateMany?: LinkUpdateManyWithWhereWithoutDatabaseEntryInput | LinkUpdateManyWithWhereWithoutDatabaseEntryInput[]
    deleteMany?: LinkScalarWhereInput | LinkScalarWhereInput[]
  }

  export type LiteratureNoteUncheckedUpdateManyWithoutRelatedEntriesNestedInput = {
    create?: XOR<LiteratureNoteCreateWithoutRelatedEntriesInput, LiteratureNoteUncheckedCreateWithoutRelatedEntriesInput> | LiteratureNoteCreateWithoutRelatedEntriesInput[] | LiteratureNoteUncheckedCreateWithoutRelatedEntriesInput[]
    connectOrCreate?: LiteratureNoteCreateOrConnectWithoutRelatedEntriesInput | LiteratureNoteCreateOrConnectWithoutRelatedEntriesInput[]
    upsert?: LiteratureNoteUpsertWithWhereUniqueWithoutRelatedEntriesInput | LiteratureNoteUpsertWithWhereUniqueWithoutRelatedEntriesInput[]
    set?: LiteratureNoteWhereUniqueInput | LiteratureNoteWhereUniqueInput[]
    disconnect?: LiteratureNoteWhereUniqueInput | LiteratureNoteWhereUniqueInput[]
    delete?: LiteratureNoteWhereUniqueInput | LiteratureNoteWhereUniqueInput[]
    connect?: LiteratureNoteWhereUniqueInput | LiteratureNoteWhereUniqueInput[]
    update?: LiteratureNoteUpdateWithWhereUniqueWithoutRelatedEntriesInput | LiteratureNoteUpdateWithWhereUniqueWithoutRelatedEntriesInput[]
    updateMany?: LiteratureNoteUpdateManyWithWhereWithoutRelatedEntriesInput | LiteratureNoteUpdateManyWithWhereWithoutRelatedEntriesInput[]
    deleteMany?: LiteratureNoteScalarWhereInput | LiteratureNoteScalarWhereInput[]
  }

  export type LinkUncheckedUpdateManyWithoutDatabaseEntryNestedInput = {
    create?: XOR<LinkCreateWithoutDatabaseEntryInput, LinkUncheckedCreateWithoutDatabaseEntryInput> | LinkCreateWithoutDatabaseEntryInput[] | LinkUncheckedCreateWithoutDatabaseEntryInput[]
    connectOrCreate?: LinkCreateOrConnectWithoutDatabaseEntryInput | LinkCreateOrConnectWithoutDatabaseEntryInput[]
    upsert?: LinkUpsertWithWhereUniqueWithoutDatabaseEntryInput | LinkUpsertWithWhereUniqueWithoutDatabaseEntryInput[]
    createMany?: LinkCreateManyDatabaseEntryInputEnvelope
    set?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    disconnect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    delete?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    connect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    update?: LinkUpdateWithWhereUniqueWithoutDatabaseEntryInput | LinkUpdateWithWhereUniqueWithoutDatabaseEntryInput[]
    updateMany?: LinkUpdateManyWithWhereWithoutDatabaseEntryInput | LinkUpdateManyWithWhereWithoutDatabaseEntryInput[]
    deleteMany?: LinkScalarWhereInput | LinkScalarWhereInput[]
  }

  export type ExperimentCreateNestedOneWithoutTablesInput = {
    create?: XOR<ExperimentCreateWithoutTablesInput, ExperimentUncheckedCreateWithoutTablesInput>
    connectOrCreate?: ExperimentCreateOrConnectWithoutTablesInput
    connect?: ExperimentWhereUniqueInput
  }

  export type TableRowCreateNestedManyWithoutTableInput = {
    create?: XOR<TableRowCreateWithoutTableInput, TableRowUncheckedCreateWithoutTableInput> | TableRowCreateWithoutTableInput[] | TableRowUncheckedCreateWithoutTableInput[]
    connectOrCreate?: TableRowCreateOrConnectWithoutTableInput | TableRowCreateOrConnectWithoutTableInput[]
    createMany?: TableRowCreateManyTableInputEnvelope
    connect?: TableRowWhereUniqueInput | TableRowWhereUniqueInput[]
  }

  export type LinkCreateNestedManyWithoutTableInput = {
    create?: XOR<LinkCreateWithoutTableInput, LinkUncheckedCreateWithoutTableInput> | LinkCreateWithoutTableInput[] | LinkUncheckedCreateWithoutTableInput[]
    connectOrCreate?: LinkCreateOrConnectWithoutTableInput | LinkCreateOrConnectWithoutTableInput[]
    createMany?: LinkCreateManyTableInputEnvelope
    connect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
  }

  export type TableRowUncheckedCreateNestedManyWithoutTableInput = {
    create?: XOR<TableRowCreateWithoutTableInput, TableRowUncheckedCreateWithoutTableInput> | TableRowCreateWithoutTableInput[] | TableRowUncheckedCreateWithoutTableInput[]
    connectOrCreate?: TableRowCreateOrConnectWithoutTableInput | TableRowCreateOrConnectWithoutTableInput[]
    createMany?: TableRowCreateManyTableInputEnvelope
    connect?: TableRowWhereUniqueInput | TableRowWhereUniqueInput[]
  }

  export type LinkUncheckedCreateNestedManyWithoutTableInput = {
    create?: XOR<LinkCreateWithoutTableInput, LinkUncheckedCreateWithoutTableInput> | LinkCreateWithoutTableInput[] | LinkUncheckedCreateWithoutTableInput[]
    connectOrCreate?: LinkCreateOrConnectWithoutTableInput | LinkCreateOrConnectWithoutTableInput[]
    createMany?: LinkCreateManyTableInputEnvelope
    connect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
  }

  export type ExperimentUpdateOneWithoutTablesNestedInput = {
    create?: XOR<ExperimentCreateWithoutTablesInput, ExperimentUncheckedCreateWithoutTablesInput>
    connectOrCreate?: ExperimentCreateOrConnectWithoutTablesInput
    upsert?: ExperimentUpsertWithoutTablesInput
    disconnect?: ExperimentWhereInput | boolean
    delete?: ExperimentWhereInput | boolean
    connect?: ExperimentWhereUniqueInput
    update?: XOR<XOR<ExperimentUpdateToOneWithWhereWithoutTablesInput, ExperimentUpdateWithoutTablesInput>, ExperimentUncheckedUpdateWithoutTablesInput>
  }

  export type TableRowUpdateManyWithoutTableNestedInput = {
    create?: XOR<TableRowCreateWithoutTableInput, TableRowUncheckedCreateWithoutTableInput> | TableRowCreateWithoutTableInput[] | TableRowUncheckedCreateWithoutTableInput[]
    connectOrCreate?: TableRowCreateOrConnectWithoutTableInput | TableRowCreateOrConnectWithoutTableInput[]
    upsert?: TableRowUpsertWithWhereUniqueWithoutTableInput | TableRowUpsertWithWhereUniqueWithoutTableInput[]
    createMany?: TableRowCreateManyTableInputEnvelope
    set?: TableRowWhereUniqueInput | TableRowWhereUniqueInput[]
    disconnect?: TableRowWhereUniqueInput | TableRowWhereUniqueInput[]
    delete?: TableRowWhereUniqueInput | TableRowWhereUniqueInput[]
    connect?: TableRowWhereUniqueInput | TableRowWhereUniqueInput[]
    update?: TableRowUpdateWithWhereUniqueWithoutTableInput | TableRowUpdateWithWhereUniqueWithoutTableInput[]
    updateMany?: TableRowUpdateManyWithWhereWithoutTableInput | TableRowUpdateManyWithWhereWithoutTableInput[]
    deleteMany?: TableRowScalarWhereInput | TableRowScalarWhereInput[]
  }

  export type LinkUpdateManyWithoutTableNestedInput = {
    create?: XOR<LinkCreateWithoutTableInput, LinkUncheckedCreateWithoutTableInput> | LinkCreateWithoutTableInput[] | LinkUncheckedCreateWithoutTableInput[]
    connectOrCreate?: LinkCreateOrConnectWithoutTableInput | LinkCreateOrConnectWithoutTableInput[]
    upsert?: LinkUpsertWithWhereUniqueWithoutTableInput | LinkUpsertWithWhereUniqueWithoutTableInput[]
    createMany?: LinkCreateManyTableInputEnvelope
    set?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    disconnect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    delete?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    connect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    update?: LinkUpdateWithWhereUniqueWithoutTableInput | LinkUpdateWithWhereUniqueWithoutTableInput[]
    updateMany?: LinkUpdateManyWithWhereWithoutTableInput | LinkUpdateManyWithWhereWithoutTableInput[]
    deleteMany?: LinkScalarWhereInput | LinkScalarWhereInput[]
  }

  export type TableRowUncheckedUpdateManyWithoutTableNestedInput = {
    create?: XOR<TableRowCreateWithoutTableInput, TableRowUncheckedCreateWithoutTableInput> | TableRowCreateWithoutTableInput[] | TableRowUncheckedCreateWithoutTableInput[]
    connectOrCreate?: TableRowCreateOrConnectWithoutTableInput | TableRowCreateOrConnectWithoutTableInput[]
    upsert?: TableRowUpsertWithWhereUniqueWithoutTableInput | TableRowUpsertWithWhereUniqueWithoutTableInput[]
    createMany?: TableRowCreateManyTableInputEnvelope
    set?: TableRowWhereUniqueInput | TableRowWhereUniqueInput[]
    disconnect?: TableRowWhereUniqueInput | TableRowWhereUniqueInput[]
    delete?: TableRowWhereUniqueInput | TableRowWhereUniqueInput[]
    connect?: TableRowWhereUniqueInput | TableRowWhereUniqueInput[]
    update?: TableRowUpdateWithWhereUniqueWithoutTableInput | TableRowUpdateWithWhereUniqueWithoutTableInput[]
    updateMany?: TableRowUpdateManyWithWhereWithoutTableInput | TableRowUpdateManyWithWhereWithoutTableInput[]
    deleteMany?: TableRowScalarWhereInput | TableRowScalarWhereInput[]
  }

  export type LinkUncheckedUpdateManyWithoutTableNestedInput = {
    create?: XOR<LinkCreateWithoutTableInput, LinkUncheckedCreateWithoutTableInput> | LinkCreateWithoutTableInput[] | LinkUncheckedCreateWithoutTableInput[]
    connectOrCreate?: LinkCreateOrConnectWithoutTableInput | LinkCreateOrConnectWithoutTableInput[]
    upsert?: LinkUpsertWithWhereUniqueWithoutTableInput | LinkUpsertWithWhereUniqueWithoutTableInput[]
    createMany?: LinkCreateManyTableInputEnvelope
    set?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    disconnect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    delete?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    connect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    update?: LinkUpdateWithWhereUniqueWithoutTableInput | LinkUpdateWithWhereUniqueWithoutTableInput[]
    updateMany?: LinkUpdateManyWithWhereWithoutTableInput | LinkUpdateManyWithWhereWithoutTableInput[]
    deleteMany?: LinkScalarWhereInput | LinkScalarWhereInput[]
  }

  export type TableCreateNestedOneWithoutRowsInput = {
    create?: XOR<TableCreateWithoutRowsInput, TableUncheckedCreateWithoutRowsInput>
    connectOrCreate?: TableCreateOrConnectWithoutRowsInput
    connect?: TableWhereUniqueInput
  }

  export type TableUpdateOneRequiredWithoutRowsNestedInput = {
    create?: XOR<TableCreateWithoutRowsInput, TableUncheckedCreateWithoutRowsInput>
    connectOrCreate?: TableCreateOrConnectWithoutRowsInput
    upsert?: TableUpsertWithoutRowsInput
    connect?: TableWhereUniqueInput
    update?: XOR<XOR<TableUpdateToOneWithWhereWithoutRowsInput, TableUpdateWithoutRowsInput>, TableUncheckedUpdateWithoutRowsInput>
  }

  export type ProtocolExecutionCreateNestedManyWithoutProtocolInput = {
    create?: XOR<ProtocolExecutionCreateWithoutProtocolInput, ProtocolExecutionUncheckedCreateWithoutProtocolInput> | ProtocolExecutionCreateWithoutProtocolInput[] | ProtocolExecutionUncheckedCreateWithoutProtocolInput[]
    connectOrCreate?: ProtocolExecutionCreateOrConnectWithoutProtocolInput | ProtocolExecutionCreateOrConnectWithoutProtocolInput[]
    createMany?: ProtocolExecutionCreateManyProtocolInputEnvelope
    connect?: ProtocolExecutionWhereUniqueInput | ProtocolExecutionWhereUniqueInput[]
  }

  export type LinkCreateNestedManyWithoutProtocolInput = {
    create?: XOR<LinkCreateWithoutProtocolInput, LinkUncheckedCreateWithoutProtocolInput> | LinkCreateWithoutProtocolInput[] | LinkUncheckedCreateWithoutProtocolInput[]
    connectOrCreate?: LinkCreateOrConnectWithoutProtocolInput | LinkCreateOrConnectWithoutProtocolInput[]
    createMany?: LinkCreateManyProtocolInputEnvelope
    connect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
  }

  export type ProtocolExecutionUncheckedCreateNestedManyWithoutProtocolInput = {
    create?: XOR<ProtocolExecutionCreateWithoutProtocolInput, ProtocolExecutionUncheckedCreateWithoutProtocolInput> | ProtocolExecutionCreateWithoutProtocolInput[] | ProtocolExecutionUncheckedCreateWithoutProtocolInput[]
    connectOrCreate?: ProtocolExecutionCreateOrConnectWithoutProtocolInput | ProtocolExecutionCreateOrConnectWithoutProtocolInput[]
    createMany?: ProtocolExecutionCreateManyProtocolInputEnvelope
    connect?: ProtocolExecutionWhereUniqueInput | ProtocolExecutionWhereUniqueInput[]
  }

  export type LinkUncheckedCreateNestedManyWithoutProtocolInput = {
    create?: XOR<LinkCreateWithoutProtocolInput, LinkUncheckedCreateWithoutProtocolInput> | LinkCreateWithoutProtocolInput[] | LinkUncheckedCreateWithoutProtocolInput[]
    connectOrCreate?: LinkCreateOrConnectWithoutProtocolInput | LinkCreateOrConnectWithoutProtocolInput[]
    createMany?: LinkCreateManyProtocolInputEnvelope
    connect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
  }

  export type ProtocolExecutionUpdateManyWithoutProtocolNestedInput = {
    create?: XOR<ProtocolExecutionCreateWithoutProtocolInput, ProtocolExecutionUncheckedCreateWithoutProtocolInput> | ProtocolExecutionCreateWithoutProtocolInput[] | ProtocolExecutionUncheckedCreateWithoutProtocolInput[]
    connectOrCreate?: ProtocolExecutionCreateOrConnectWithoutProtocolInput | ProtocolExecutionCreateOrConnectWithoutProtocolInput[]
    upsert?: ProtocolExecutionUpsertWithWhereUniqueWithoutProtocolInput | ProtocolExecutionUpsertWithWhereUniqueWithoutProtocolInput[]
    createMany?: ProtocolExecutionCreateManyProtocolInputEnvelope
    set?: ProtocolExecutionWhereUniqueInput | ProtocolExecutionWhereUniqueInput[]
    disconnect?: ProtocolExecutionWhereUniqueInput | ProtocolExecutionWhereUniqueInput[]
    delete?: ProtocolExecutionWhereUniqueInput | ProtocolExecutionWhereUniqueInput[]
    connect?: ProtocolExecutionWhereUniqueInput | ProtocolExecutionWhereUniqueInput[]
    update?: ProtocolExecutionUpdateWithWhereUniqueWithoutProtocolInput | ProtocolExecutionUpdateWithWhereUniqueWithoutProtocolInput[]
    updateMany?: ProtocolExecutionUpdateManyWithWhereWithoutProtocolInput | ProtocolExecutionUpdateManyWithWhereWithoutProtocolInput[]
    deleteMany?: ProtocolExecutionScalarWhereInput | ProtocolExecutionScalarWhereInput[]
  }

  export type LinkUpdateManyWithoutProtocolNestedInput = {
    create?: XOR<LinkCreateWithoutProtocolInput, LinkUncheckedCreateWithoutProtocolInput> | LinkCreateWithoutProtocolInput[] | LinkUncheckedCreateWithoutProtocolInput[]
    connectOrCreate?: LinkCreateOrConnectWithoutProtocolInput | LinkCreateOrConnectWithoutProtocolInput[]
    upsert?: LinkUpsertWithWhereUniqueWithoutProtocolInput | LinkUpsertWithWhereUniqueWithoutProtocolInput[]
    createMany?: LinkCreateManyProtocolInputEnvelope
    set?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    disconnect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    delete?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    connect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    update?: LinkUpdateWithWhereUniqueWithoutProtocolInput | LinkUpdateWithWhereUniqueWithoutProtocolInput[]
    updateMany?: LinkUpdateManyWithWhereWithoutProtocolInput | LinkUpdateManyWithWhereWithoutProtocolInput[]
    deleteMany?: LinkScalarWhereInput | LinkScalarWhereInput[]
  }

  export type ProtocolExecutionUncheckedUpdateManyWithoutProtocolNestedInput = {
    create?: XOR<ProtocolExecutionCreateWithoutProtocolInput, ProtocolExecutionUncheckedCreateWithoutProtocolInput> | ProtocolExecutionCreateWithoutProtocolInput[] | ProtocolExecutionUncheckedCreateWithoutProtocolInput[]
    connectOrCreate?: ProtocolExecutionCreateOrConnectWithoutProtocolInput | ProtocolExecutionCreateOrConnectWithoutProtocolInput[]
    upsert?: ProtocolExecutionUpsertWithWhereUniqueWithoutProtocolInput | ProtocolExecutionUpsertWithWhereUniqueWithoutProtocolInput[]
    createMany?: ProtocolExecutionCreateManyProtocolInputEnvelope
    set?: ProtocolExecutionWhereUniqueInput | ProtocolExecutionWhereUniqueInput[]
    disconnect?: ProtocolExecutionWhereUniqueInput | ProtocolExecutionWhereUniqueInput[]
    delete?: ProtocolExecutionWhereUniqueInput | ProtocolExecutionWhereUniqueInput[]
    connect?: ProtocolExecutionWhereUniqueInput | ProtocolExecutionWhereUniqueInput[]
    update?: ProtocolExecutionUpdateWithWhereUniqueWithoutProtocolInput | ProtocolExecutionUpdateWithWhereUniqueWithoutProtocolInput[]
    updateMany?: ProtocolExecutionUpdateManyWithWhereWithoutProtocolInput | ProtocolExecutionUpdateManyWithWhereWithoutProtocolInput[]
    deleteMany?: ProtocolExecutionScalarWhereInput | ProtocolExecutionScalarWhereInput[]
  }

  export type LinkUncheckedUpdateManyWithoutProtocolNestedInput = {
    create?: XOR<LinkCreateWithoutProtocolInput, LinkUncheckedCreateWithoutProtocolInput> | LinkCreateWithoutProtocolInput[] | LinkUncheckedCreateWithoutProtocolInput[]
    connectOrCreate?: LinkCreateOrConnectWithoutProtocolInput | LinkCreateOrConnectWithoutProtocolInput[]
    upsert?: LinkUpsertWithWhereUniqueWithoutProtocolInput | LinkUpsertWithWhereUniqueWithoutProtocolInput[]
    createMany?: LinkCreateManyProtocolInputEnvelope
    set?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    disconnect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    delete?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    connect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    update?: LinkUpdateWithWhereUniqueWithoutProtocolInput | LinkUpdateWithWhereUniqueWithoutProtocolInput[]
    updateMany?: LinkUpdateManyWithWhereWithoutProtocolInput | LinkUpdateManyWithWhereWithoutProtocolInput[]
    deleteMany?: LinkScalarWhereInput | LinkScalarWhereInput[]
  }

  export type ProtocolCreateNestedOneWithoutExecutionsInput = {
    create?: XOR<ProtocolCreateWithoutExecutionsInput, ProtocolUncheckedCreateWithoutExecutionsInput>
    connectOrCreate?: ProtocolCreateOrConnectWithoutExecutionsInput
    connect?: ProtocolWhereUniqueInput
  }

  export type ExperimentCreateNestedOneWithoutProtocolExecutionsInput = {
    create?: XOR<ExperimentCreateWithoutProtocolExecutionsInput, ExperimentUncheckedCreateWithoutProtocolExecutionsInput>
    connectOrCreate?: ExperimentCreateOrConnectWithoutProtocolExecutionsInput
    connect?: ExperimentWhereUniqueInput
  }

  export type LinkCreateNestedManyWithoutProtocolExecutionInput = {
    create?: XOR<LinkCreateWithoutProtocolExecutionInput, LinkUncheckedCreateWithoutProtocolExecutionInput> | LinkCreateWithoutProtocolExecutionInput[] | LinkUncheckedCreateWithoutProtocolExecutionInput[]
    connectOrCreate?: LinkCreateOrConnectWithoutProtocolExecutionInput | LinkCreateOrConnectWithoutProtocolExecutionInput[]
    createMany?: LinkCreateManyProtocolExecutionInputEnvelope
    connect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
  }

  export type LinkUncheckedCreateNestedManyWithoutProtocolExecutionInput = {
    create?: XOR<LinkCreateWithoutProtocolExecutionInput, LinkUncheckedCreateWithoutProtocolExecutionInput> | LinkCreateWithoutProtocolExecutionInput[] | LinkUncheckedCreateWithoutProtocolExecutionInput[]
    connectOrCreate?: LinkCreateOrConnectWithoutProtocolExecutionInput | LinkCreateOrConnectWithoutProtocolExecutionInput[]
    createMany?: LinkCreateManyProtocolExecutionInputEnvelope
    connect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
  }

  export type ProtocolUpdateOneRequiredWithoutExecutionsNestedInput = {
    create?: XOR<ProtocolCreateWithoutExecutionsInput, ProtocolUncheckedCreateWithoutExecutionsInput>
    connectOrCreate?: ProtocolCreateOrConnectWithoutExecutionsInput
    upsert?: ProtocolUpsertWithoutExecutionsInput
    connect?: ProtocolWhereUniqueInput
    update?: XOR<XOR<ProtocolUpdateToOneWithWhereWithoutExecutionsInput, ProtocolUpdateWithoutExecutionsInput>, ProtocolUncheckedUpdateWithoutExecutionsInput>
  }

  export type ExperimentUpdateOneWithoutProtocolExecutionsNestedInput = {
    create?: XOR<ExperimentCreateWithoutProtocolExecutionsInput, ExperimentUncheckedCreateWithoutProtocolExecutionsInput>
    connectOrCreate?: ExperimentCreateOrConnectWithoutProtocolExecutionsInput
    upsert?: ExperimentUpsertWithoutProtocolExecutionsInput
    disconnect?: ExperimentWhereInput | boolean
    delete?: ExperimentWhereInput | boolean
    connect?: ExperimentWhereUniqueInput
    update?: XOR<XOR<ExperimentUpdateToOneWithWhereWithoutProtocolExecutionsInput, ExperimentUpdateWithoutProtocolExecutionsInput>, ExperimentUncheckedUpdateWithoutProtocolExecutionsInput>
  }

  export type LinkUpdateManyWithoutProtocolExecutionNestedInput = {
    create?: XOR<LinkCreateWithoutProtocolExecutionInput, LinkUncheckedCreateWithoutProtocolExecutionInput> | LinkCreateWithoutProtocolExecutionInput[] | LinkUncheckedCreateWithoutProtocolExecutionInput[]
    connectOrCreate?: LinkCreateOrConnectWithoutProtocolExecutionInput | LinkCreateOrConnectWithoutProtocolExecutionInput[]
    upsert?: LinkUpsertWithWhereUniqueWithoutProtocolExecutionInput | LinkUpsertWithWhereUniqueWithoutProtocolExecutionInput[]
    createMany?: LinkCreateManyProtocolExecutionInputEnvelope
    set?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    disconnect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    delete?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    connect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    update?: LinkUpdateWithWhereUniqueWithoutProtocolExecutionInput | LinkUpdateWithWhereUniqueWithoutProtocolExecutionInput[]
    updateMany?: LinkUpdateManyWithWhereWithoutProtocolExecutionInput | LinkUpdateManyWithWhereWithoutProtocolExecutionInput[]
    deleteMany?: LinkScalarWhereInput | LinkScalarWhereInput[]
  }

  export type LinkUncheckedUpdateManyWithoutProtocolExecutionNestedInput = {
    create?: XOR<LinkCreateWithoutProtocolExecutionInput, LinkUncheckedCreateWithoutProtocolExecutionInput> | LinkCreateWithoutProtocolExecutionInput[] | LinkUncheckedCreateWithoutProtocolExecutionInput[]
    connectOrCreate?: LinkCreateOrConnectWithoutProtocolExecutionInput | LinkCreateOrConnectWithoutProtocolExecutionInput[]
    upsert?: LinkUpsertWithWhereUniqueWithoutProtocolExecutionInput | LinkUpsertWithWhereUniqueWithoutProtocolExecutionInput[]
    createMany?: LinkCreateManyProtocolExecutionInputEnvelope
    set?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    disconnect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    delete?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    connect?: LinkWhereUniqueInput | LinkWhereUniqueInput[]
    update?: LinkUpdateWithWhereUniqueWithoutProtocolExecutionInput | LinkUpdateWithWhereUniqueWithoutProtocolExecutionInput[]
    updateMany?: LinkUpdateManyWithWhereWithoutProtocolExecutionInput | LinkUpdateManyWithWhereWithoutProtocolExecutionInput[]
    deleteMany?: LinkScalarWhereInput | LinkScalarWhereInput[]
  }

  export type NoteCreateNestedOneWithoutLinksInput = {
    create?: XOR<NoteCreateWithoutLinksInput, NoteUncheckedCreateWithoutLinksInput>
    connectOrCreate?: NoteCreateOrConnectWithoutLinksInput
    connect?: NoteWhereUniqueInput
  }

  export type HighlightCreateNestedOneWithoutLinksInput = {
    create?: XOR<HighlightCreateWithoutLinksInput, HighlightUncheckedCreateWithoutLinksInput>
    connectOrCreate?: HighlightCreateOrConnectWithoutLinksInput
    connect?: HighlightWhereUniqueInput
  }

  export type DatabaseEntryCreateNestedOneWithoutLinksInput = {
    create?: XOR<DatabaseEntryCreateWithoutLinksInput, DatabaseEntryUncheckedCreateWithoutLinksInput>
    connectOrCreate?: DatabaseEntryCreateOrConnectWithoutLinksInput
    connect?: DatabaseEntryWhereUniqueInput
  }

  export type TableCreateNestedOneWithoutLinksInput = {
    create?: XOR<TableCreateWithoutLinksInput, TableUncheckedCreateWithoutLinksInput>
    connectOrCreate?: TableCreateOrConnectWithoutLinksInput
    connect?: TableWhereUniqueInput
  }

  export type ProtocolCreateNestedOneWithoutLinksInput = {
    create?: XOR<ProtocolCreateWithoutLinksInput, ProtocolUncheckedCreateWithoutLinksInput>
    connectOrCreate?: ProtocolCreateOrConnectWithoutLinksInput
    connect?: ProtocolWhereUniqueInput
  }

  export type ProtocolExecutionCreateNestedOneWithoutLinksInput = {
    create?: XOR<ProtocolExecutionCreateWithoutLinksInput, ProtocolExecutionUncheckedCreateWithoutLinksInput>
    connectOrCreate?: ProtocolExecutionCreateOrConnectWithoutLinksInput
    connect?: ProtocolExecutionWhereUniqueInput
  }

  export type NoteUpdateOneWithoutLinksNestedInput = {
    create?: XOR<NoteCreateWithoutLinksInput, NoteUncheckedCreateWithoutLinksInput>
    connectOrCreate?: NoteCreateOrConnectWithoutLinksInput
    upsert?: NoteUpsertWithoutLinksInput
    disconnect?: NoteWhereInput | boolean
    delete?: NoteWhereInput | boolean
    connect?: NoteWhereUniqueInput
    update?: XOR<XOR<NoteUpdateToOneWithWhereWithoutLinksInput, NoteUpdateWithoutLinksInput>, NoteUncheckedUpdateWithoutLinksInput>
  }

  export type HighlightUpdateOneWithoutLinksNestedInput = {
    create?: XOR<HighlightCreateWithoutLinksInput, HighlightUncheckedCreateWithoutLinksInput>
    connectOrCreate?: HighlightCreateOrConnectWithoutLinksInput
    upsert?: HighlightUpsertWithoutLinksInput
    disconnect?: HighlightWhereInput | boolean
    delete?: HighlightWhereInput | boolean
    connect?: HighlightWhereUniqueInput
    update?: XOR<XOR<HighlightUpdateToOneWithWhereWithoutLinksInput, HighlightUpdateWithoutLinksInput>, HighlightUncheckedUpdateWithoutLinksInput>
  }

  export type DatabaseEntryUpdateOneWithoutLinksNestedInput = {
    create?: XOR<DatabaseEntryCreateWithoutLinksInput, DatabaseEntryUncheckedCreateWithoutLinksInput>
    connectOrCreate?: DatabaseEntryCreateOrConnectWithoutLinksInput
    upsert?: DatabaseEntryUpsertWithoutLinksInput
    disconnect?: DatabaseEntryWhereInput | boolean
    delete?: DatabaseEntryWhereInput | boolean
    connect?: DatabaseEntryWhereUniqueInput
    update?: XOR<XOR<DatabaseEntryUpdateToOneWithWhereWithoutLinksInput, DatabaseEntryUpdateWithoutLinksInput>, DatabaseEntryUncheckedUpdateWithoutLinksInput>
  }

  export type TableUpdateOneWithoutLinksNestedInput = {
    create?: XOR<TableCreateWithoutLinksInput, TableUncheckedCreateWithoutLinksInput>
    connectOrCreate?: TableCreateOrConnectWithoutLinksInput
    upsert?: TableUpsertWithoutLinksInput
    disconnect?: TableWhereInput | boolean
    delete?: TableWhereInput | boolean
    connect?: TableWhereUniqueInput
    update?: XOR<XOR<TableUpdateToOneWithWhereWithoutLinksInput, TableUpdateWithoutLinksInput>, TableUncheckedUpdateWithoutLinksInput>
  }

  export type ProtocolUpdateOneWithoutLinksNestedInput = {
    create?: XOR<ProtocolCreateWithoutLinksInput, ProtocolUncheckedCreateWithoutLinksInput>
    connectOrCreate?: ProtocolCreateOrConnectWithoutLinksInput
    upsert?: ProtocolUpsertWithoutLinksInput
    disconnect?: ProtocolWhereInput | boolean
    delete?: ProtocolWhereInput | boolean
    connect?: ProtocolWhereUniqueInput
    update?: XOR<XOR<ProtocolUpdateToOneWithWhereWithoutLinksInput, ProtocolUpdateWithoutLinksInput>, ProtocolUncheckedUpdateWithoutLinksInput>
  }

  export type ProtocolExecutionUpdateOneWithoutLinksNestedInput = {
    create?: XOR<ProtocolExecutionCreateWithoutLinksInput, ProtocolExecutionUncheckedCreateWithoutLinksInput>
    connectOrCreate?: ProtocolExecutionCreateOrConnectWithoutLinksInput
    upsert?: ProtocolExecutionUpsertWithoutLinksInput
    disconnect?: ProtocolExecutionWhereInput | boolean
    delete?: ProtocolExecutionWhereInput | boolean
    connect?: ProtocolExecutionWhereUniqueInput
    update?: XOR<XOR<ProtocolExecutionUpdateToOneWithWhereWithoutLinksInput, ProtocolExecutionUpdateWithoutLinksInput>, ProtocolExecutionUncheckedUpdateWithoutLinksInput>
  }

  export type RecipeIngredientCreateNestedManyWithoutRecipeInput = {
    create?: XOR<RecipeIngredientCreateWithoutRecipeInput, RecipeIngredientUncheckedCreateWithoutRecipeInput> | RecipeIngredientCreateWithoutRecipeInput[] | RecipeIngredientUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipeIngredientCreateOrConnectWithoutRecipeInput | RecipeIngredientCreateOrConnectWithoutRecipeInput[]
    createMany?: RecipeIngredientCreateManyRecipeInputEnvelope
    connect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
  }

  export type RecipeExecutionCreateNestedManyWithoutRecipeInput = {
    create?: XOR<RecipeExecutionCreateWithoutRecipeInput, RecipeExecutionUncheckedCreateWithoutRecipeInput> | RecipeExecutionCreateWithoutRecipeInput[] | RecipeExecutionUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipeExecutionCreateOrConnectWithoutRecipeInput | RecipeExecutionCreateOrConnectWithoutRecipeInput[]
    createMany?: RecipeExecutionCreateManyRecipeInputEnvelope
    connect?: RecipeExecutionWhereUniqueInput | RecipeExecutionWhereUniqueInput[]
  }

  export type RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInput = {
    create?: XOR<RecipeIngredientCreateWithoutRecipeInput, RecipeIngredientUncheckedCreateWithoutRecipeInput> | RecipeIngredientCreateWithoutRecipeInput[] | RecipeIngredientUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipeIngredientCreateOrConnectWithoutRecipeInput | RecipeIngredientCreateOrConnectWithoutRecipeInput[]
    createMany?: RecipeIngredientCreateManyRecipeInputEnvelope
    connect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
  }

  export type RecipeExecutionUncheckedCreateNestedManyWithoutRecipeInput = {
    create?: XOR<RecipeExecutionCreateWithoutRecipeInput, RecipeExecutionUncheckedCreateWithoutRecipeInput> | RecipeExecutionCreateWithoutRecipeInput[] | RecipeExecutionUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipeExecutionCreateOrConnectWithoutRecipeInput | RecipeExecutionCreateOrConnectWithoutRecipeInput[]
    createMany?: RecipeExecutionCreateManyRecipeInputEnvelope
    connect?: RecipeExecutionWhereUniqueInput | RecipeExecutionWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type RecipeIngredientUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<RecipeIngredientCreateWithoutRecipeInput, RecipeIngredientUncheckedCreateWithoutRecipeInput> | RecipeIngredientCreateWithoutRecipeInput[] | RecipeIngredientUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipeIngredientCreateOrConnectWithoutRecipeInput | RecipeIngredientCreateOrConnectWithoutRecipeInput[]
    upsert?: RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInput | RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: RecipeIngredientCreateManyRecipeInputEnvelope
    set?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    disconnect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    delete?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    connect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    update?: RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInput | RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: RecipeIngredientUpdateManyWithWhereWithoutRecipeInput | RecipeIngredientUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: RecipeIngredientScalarWhereInput | RecipeIngredientScalarWhereInput[]
  }

  export type RecipeExecutionUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<RecipeExecutionCreateWithoutRecipeInput, RecipeExecutionUncheckedCreateWithoutRecipeInput> | RecipeExecutionCreateWithoutRecipeInput[] | RecipeExecutionUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipeExecutionCreateOrConnectWithoutRecipeInput | RecipeExecutionCreateOrConnectWithoutRecipeInput[]
    upsert?: RecipeExecutionUpsertWithWhereUniqueWithoutRecipeInput | RecipeExecutionUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: RecipeExecutionCreateManyRecipeInputEnvelope
    set?: RecipeExecutionWhereUniqueInput | RecipeExecutionWhereUniqueInput[]
    disconnect?: RecipeExecutionWhereUniqueInput | RecipeExecutionWhereUniqueInput[]
    delete?: RecipeExecutionWhereUniqueInput | RecipeExecutionWhereUniqueInput[]
    connect?: RecipeExecutionWhereUniqueInput | RecipeExecutionWhereUniqueInput[]
    update?: RecipeExecutionUpdateWithWhereUniqueWithoutRecipeInput | RecipeExecutionUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: RecipeExecutionUpdateManyWithWhereWithoutRecipeInput | RecipeExecutionUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: RecipeExecutionScalarWhereInput | RecipeExecutionScalarWhereInput[]
  }

  export type RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<RecipeIngredientCreateWithoutRecipeInput, RecipeIngredientUncheckedCreateWithoutRecipeInput> | RecipeIngredientCreateWithoutRecipeInput[] | RecipeIngredientUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipeIngredientCreateOrConnectWithoutRecipeInput | RecipeIngredientCreateOrConnectWithoutRecipeInput[]
    upsert?: RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInput | RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: RecipeIngredientCreateManyRecipeInputEnvelope
    set?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    disconnect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    delete?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    connect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    update?: RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInput | RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: RecipeIngredientUpdateManyWithWhereWithoutRecipeInput | RecipeIngredientUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: RecipeIngredientScalarWhereInput | RecipeIngredientScalarWhereInput[]
  }

  export type RecipeExecutionUncheckedUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<RecipeExecutionCreateWithoutRecipeInput, RecipeExecutionUncheckedCreateWithoutRecipeInput> | RecipeExecutionCreateWithoutRecipeInput[] | RecipeExecutionUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipeExecutionCreateOrConnectWithoutRecipeInput | RecipeExecutionCreateOrConnectWithoutRecipeInput[]
    upsert?: RecipeExecutionUpsertWithWhereUniqueWithoutRecipeInput | RecipeExecutionUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: RecipeExecutionCreateManyRecipeInputEnvelope
    set?: RecipeExecutionWhereUniqueInput | RecipeExecutionWhereUniqueInput[]
    disconnect?: RecipeExecutionWhereUniqueInput | RecipeExecutionWhereUniqueInput[]
    delete?: RecipeExecutionWhereUniqueInput | RecipeExecutionWhereUniqueInput[]
    connect?: RecipeExecutionWhereUniqueInput | RecipeExecutionWhereUniqueInput[]
    update?: RecipeExecutionUpdateWithWhereUniqueWithoutRecipeInput | RecipeExecutionUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: RecipeExecutionUpdateManyWithWhereWithoutRecipeInput | RecipeExecutionUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: RecipeExecutionScalarWhereInput | RecipeExecutionScalarWhereInput[]
  }

  export type RecipeCreateNestedOneWithoutIngredientsInput = {
    create?: XOR<RecipeCreateWithoutIngredientsInput, RecipeUncheckedCreateWithoutIngredientsInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutIngredientsInput
    connect?: RecipeWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RecipeUpdateOneRequiredWithoutIngredientsNestedInput = {
    create?: XOR<RecipeCreateWithoutIngredientsInput, RecipeUncheckedCreateWithoutIngredientsInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutIngredientsInput
    upsert?: RecipeUpsertWithoutIngredientsInput
    connect?: RecipeWhereUniqueInput
    update?: XOR<XOR<RecipeUpdateToOneWithWhereWithoutIngredientsInput, RecipeUpdateWithoutIngredientsInput>, RecipeUncheckedUpdateWithoutIngredientsInput>
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type ProjectCreateNestedOneWithoutTasksInput = {
    create?: XOR<ProjectCreateWithoutTasksInput, ProjectUncheckedCreateWithoutTasksInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutTasksInput
    connect?: ProjectWhereUniqueInput
  }

  export type ExperimentCreateNestedOneWithoutTasksInput = {
    create?: XOR<ExperimentCreateWithoutTasksInput, ExperimentUncheckedCreateWithoutTasksInput>
    connectOrCreate?: ExperimentCreateOrConnectWithoutTasksInput
    connect?: ExperimentWhereUniqueInput
  }

  export type ProjectUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<ProjectCreateWithoutTasksInput, ProjectUncheckedCreateWithoutTasksInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutTasksInput
    upsert?: ProjectUpsertWithoutTasksInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutTasksInput, ProjectUpdateWithoutTasksInput>, ProjectUncheckedUpdateWithoutTasksInput>
  }

  export type ExperimentUpdateOneWithoutTasksNestedInput = {
    create?: XOR<ExperimentCreateWithoutTasksInput, ExperimentUncheckedCreateWithoutTasksInput>
    connectOrCreate?: ExperimentCreateOrConnectWithoutTasksInput
    upsert?: ExperimentUpsertWithoutTasksInput
    disconnect?: ExperimentWhereInput | boolean
    delete?: ExperimentWhereInput | boolean
    connect?: ExperimentWhereUniqueInput
    update?: XOR<XOR<ExperimentUpdateToOneWithWhereWithoutTasksInput, ExperimentUpdateWithoutTasksInput>, ExperimentUncheckedUpdateWithoutTasksInput>
  }

  export type RecipeCreateNestedOneWithoutRecipeExecutionsInput = {
    create?: XOR<RecipeCreateWithoutRecipeExecutionsInput, RecipeUncheckedCreateWithoutRecipeExecutionsInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutRecipeExecutionsInput
    connect?: RecipeWhereUniqueInput
  }

  export type ExperimentCreateNestedOneWithoutRecipeExecutionsInput = {
    create?: XOR<ExperimentCreateWithoutRecipeExecutionsInput, ExperimentUncheckedCreateWithoutRecipeExecutionsInput>
    connectOrCreate?: ExperimentCreateOrConnectWithoutRecipeExecutionsInput
    connect?: ExperimentWhereUniqueInput
  }

  export type RecipeUpdateOneRequiredWithoutRecipeExecutionsNestedInput = {
    create?: XOR<RecipeCreateWithoutRecipeExecutionsInput, RecipeUncheckedCreateWithoutRecipeExecutionsInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutRecipeExecutionsInput
    upsert?: RecipeUpsertWithoutRecipeExecutionsInput
    connect?: RecipeWhereUniqueInput
    update?: XOR<XOR<RecipeUpdateToOneWithWhereWithoutRecipeExecutionsInput, RecipeUpdateWithoutRecipeExecutionsInput>, RecipeUncheckedUpdateWithoutRecipeExecutionsInput>
  }

  export type ExperimentUpdateOneWithoutRecipeExecutionsNestedInput = {
    create?: XOR<ExperimentCreateWithoutRecipeExecutionsInput, ExperimentUncheckedCreateWithoutRecipeExecutionsInput>
    connectOrCreate?: ExperimentCreateOrConnectWithoutRecipeExecutionsInput
    upsert?: ExperimentUpsertWithoutRecipeExecutionsInput
    disconnect?: ExperimentWhereInput | boolean
    delete?: ExperimentWhereInput | boolean
    connect?: ExperimentWhereUniqueInput
    update?: XOR<XOR<ExperimentUpdateToOneWithWhereWithoutRecipeExecutionsInput, ExperimentUpdateWithoutRecipeExecutionsInput>, ExperimentUncheckedUpdateWithoutRecipeExecutionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type ExperimentCreateWithoutProjectInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    notes?: NoteCreateNestedManyWithoutExperimentInput
    tables?: TableCreateNestedManyWithoutExperimentInput
    protocolExecutions?: ProtocolExecutionCreateNestedManyWithoutExperimentInput
    tasks?: TaskCreateNestedManyWithoutExperimentInput
    recipeExecutions?: RecipeExecutionCreateNestedManyWithoutExperimentInput
  }

  export type ExperimentUncheckedCreateWithoutProjectInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    notes?: NoteUncheckedCreateNestedManyWithoutExperimentInput
    tables?: TableUncheckedCreateNestedManyWithoutExperimentInput
    protocolExecutions?: ProtocolExecutionUncheckedCreateNestedManyWithoutExperimentInput
    tasks?: TaskUncheckedCreateNestedManyWithoutExperimentInput
    recipeExecutions?: RecipeExecutionUncheckedCreateNestedManyWithoutExperimentInput
  }

  export type ExperimentCreateOrConnectWithoutProjectInput = {
    where: ExperimentWhereUniqueInput
    create: XOR<ExperimentCreateWithoutProjectInput, ExperimentUncheckedCreateWithoutProjectInput>
  }

  export type ExperimentCreateManyProjectInputEnvelope = {
    data: ExperimentCreateManyProjectInput | ExperimentCreateManyProjectInput[]
  }

  export type TaskCreateWithoutProjectInput = {
    id?: string
    title: string
    description?: string | null
    status: string
    priority: string
    deadline?: Date | string | null
    createdAt?: Date | string
    completedAt?: Date | string | null
    autoGenerated?: boolean
    experiment?: ExperimentCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateWithoutProjectInput = {
    id?: string
    title: string
    description?: string | null
    status: string
    priority: string
    deadline?: Date | string | null
    createdAt?: Date | string
    completedAt?: Date | string | null
    autoGenerated?: boolean
    experimentId?: string | null
  }

  export type TaskCreateOrConnectWithoutProjectInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput>
  }

  export type TaskCreateManyProjectInputEnvelope = {
    data: TaskCreateManyProjectInput | TaskCreateManyProjectInput[]
  }

  export type ExperimentUpsertWithWhereUniqueWithoutProjectInput = {
    where: ExperimentWhereUniqueInput
    update: XOR<ExperimentUpdateWithoutProjectInput, ExperimentUncheckedUpdateWithoutProjectInput>
    create: XOR<ExperimentCreateWithoutProjectInput, ExperimentUncheckedCreateWithoutProjectInput>
  }

  export type ExperimentUpdateWithWhereUniqueWithoutProjectInput = {
    where: ExperimentWhereUniqueInput
    data: XOR<ExperimentUpdateWithoutProjectInput, ExperimentUncheckedUpdateWithoutProjectInput>
  }

  export type ExperimentUpdateManyWithWhereWithoutProjectInput = {
    where: ExperimentScalarWhereInput
    data: XOR<ExperimentUpdateManyMutationInput, ExperimentUncheckedUpdateManyWithoutProjectInput>
  }

  export type ExperimentScalarWhereInput = {
    AND?: ExperimentScalarWhereInput | ExperimentScalarWhereInput[]
    OR?: ExperimentScalarWhereInput[]
    NOT?: ExperimentScalarWhereInput | ExperimentScalarWhereInput[]
    id?: StringFilter<"Experiment"> | string
    projectId?: StringFilter<"Experiment"> | string
    name?: StringFilter<"Experiment"> | string
    description?: StringNullableFilter<"Experiment"> | string | null
    createdAt?: DateTimeFilter<"Experiment"> | Date | string
  }

  export type TaskUpsertWithWhereUniqueWithoutProjectInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutProjectInput, TaskUncheckedUpdateWithoutProjectInput>
    create: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutProjectInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutProjectInput, TaskUncheckedUpdateWithoutProjectInput>
  }

  export type TaskUpdateManyWithWhereWithoutProjectInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutProjectInput>
  }

  export type TaskScalarWhereInput = {
    AND?: TaskScalarWhereInput | TaskScalarWhereInput[]
    OR?: TaskScalarWhereInput[]
    NOT?: TaskScalarWhereInput | TaskScalarWhereInput[]
    id?: StringFilter<"Task"> | string
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    status?: StringFilter<"Task"> | string
    priority?: StringFilter<"Task"> | string
    deadline?: DateTimeNullableFilter<"Task"> | Date | string | null
    createdAt?: DateTimeFilter<"Task"> | Date | string
    completedAt?: DateTimeNullableFilter<"Task"> | Date | string | null
    autoGenerated?: BoolFilter<"Task"> | boolean
    projectId?: StringFilter<"Task"> | string
    experimentId?: StringNullableFilter<"Task"> | string | null
  }

  export type ProjectCreateWithoutExperimentsInput = {
    id?: string
    name: string
    description?: string | null
    status?: string
    startDate?: Date | string | null
    lastActivity?: Date | string | null
    createdAt?: Date | string
    tasks?: TaskCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutExperimentsInput = {
    id?: string
    name: string
    description?: string | null
    status?: string
    startDate?: Date | string | null
    lastActivity?: Date | string | null
    createdAt?: Date | string
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutExperimentsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutExperimentsInput, ProjectUncheckedCreateWithoutExperimentsInput>
  }

  export type NoteCreateWithoutExperimentInput = {
    id?: string
    title: string
    content: string
    date?: Date | string | null
    type: string
    createdAt?: Date | string
    links?: LinkCreateNestedManyWithoutNoteInput
  }

  export type NoteUncheckedCreateWithoutExperimentInput = {
    id?: string
    title: string
    content: string
    date?: Date | string | null
    type: string
    createdAt?: Date | string
    links?: LinkUncheckedCreateNestedManyWithoutNoteInput
  }

  export type NoteCreateOrConnectWithoutExperimentInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutExperimentInput, NoteUncheckedCreateWithoutExperimentInput>
  }

  export type NoteCreateManyExperimentInputEnvelope = {
    data: NoteCreateManyExperimentInput | NoteCreateManyExperimentInput[]
  }

  export type TableCreateWithoutExperimentInput = {
    id?: string
    name: string
    description?: string | null
    columns: string
    createdAt?: Date | string
    updatedAt?: Date | string
    rows?: TableRowCreateNestedManyWithoutTableInput
    links?: LinkCreateNestedManyWithoutTableInput
  }

  export type TableUncheckedCreateWithoutExperimentInput = {
    id?: string
    name: string
    description?: string | null
    columns: string
    createdAt?: Date | string
    updatedAt?: Date | string
    rows?: TableRowUncheckedCreateNestedManyWithoutTableInput
    links?: LinkUncheckedCreateNestedManyWithoutTableInput
  }

  export type TableCreateOrConnectWithoutExperimentInput = {
    where: TableWhereUniqueInput
    create: XOR<TableCreateWithoutExperimentInput, TableUncheckedCreateWithoutExperimentInput>
  }

  export type TableCreateManyExperimentInputEnvelope = {
    data: TableCreateManyExperimentInput | TableCreateManyExperimentInput[]
  }

  export type ProtocolExecutionCreateWithoutExperimentInput = {
    id?: string
    status: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    notes?: string | null
    modifications?: string | null
    results?: string | null
    issues?: string | null
    nextSteps?: string | null
    executedBy?: string | null
    completedSteps?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    protocol: ProtocolCreateNestedOneWithoutExecutionsInput
    links?: LinkCreateNestedManyWithoutProtocolExecutionInput
  }

  export type ProtocolExecutionUncheckedCreateWithoutExperimentInput = {
    id?: string
    protocolId: string
    status: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    notes?: string | null
    modifications?: string | null
    results?: string | null
    issues?: string | null
    nextSteps?: string | null
    executedBy?: string | null
    completedSteps?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    links?: LinkUncheckedCreateNestedManyWithoutProtocolExecutionInput
  }

  export type ProtocolExecutionCreateOrConnectWithoutExperimentInput = {
    where: ProtocolExecutionWhereUniqueInput
    create: XOR<ProtocolExecutionCreateWithoutExperimentInput, ProtocolExecutionUncheckedCreateWithoutExperimentInput>
  }

  export type ProtocolExecutionCreateManyExperimentInputEnvelope = {
    data: ProtocolExecutionCreateManyExperimentInput | ProtocolExecutionCreateManyExperimentInput[]
  }

  export type TaskCreateWithoutExperimentInput = {
    id?: string
    title: string
    description?: string | null
    status: string
    priority: string
    deadline?: Date | string | null
    createdAt?: Date | string
    completedAt?: Date | string | null
    autoGenerated?: boolean
    project: ProjectCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateWithoutExperimentInput = {
    id?: string
    title: string
    description?: string | null
    status: string
    priority: string
    deadline?: Date | string | null
    createdAt?: Date | string
    completedAt?: Date | string | null
    autoGenerated?: boolean
    projectId: string
  }

  export type TaskCreateOrConnectWithoutExperimentInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutExperimentInput, TaskUncheckedCreateWithoutExperimentInput>
  }

  export type TaskCreateManyExperimentInputEnvelope = {
    data: TaskCreateManyExperimentInput | TaskCreateManyExperimentInput[]
  }

  export type RecipeExecutionCreateWithoutExperimentInput = {
    id?: string
    status: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    notes?: string | null
    completedSteps?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    recipe: RecipeCreateNestedOneWithoutRecipeExecutionsInput
  }

  export type RecipeExecutionUncheckedCreateWithoutExperimentInput = {
    id?: string
    recipeId: string
    status: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    notes?: string | null
    completedSteps?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecipeExecutionCreateOrConnectWithoutExperimentInput = {
    where: RecipeExecutionWhereUniqueInput
    create: XOR<RecipeExecutionCreateWithoutExperimentInput, RecipeExecutionUncheckedCreateWithoutExperimentInput>
  }

  export type RecipeExecutionCreateManyExperimentInputEnvelope = {
    data: RecipeExecutionCreateManyExperimentInput | RecipeExecutionCreateManyExperimentInput[]
  }

  export type ProjectUpsertWithoutExperimentsInput = {
    update: XOR<ProjectUpdateWithoutExperimentsInput, ProjectUncheckedUpdateWithoutExperimentsInput>
    create: XOR<ProjectCreateWithoutExperimentsInput, ProjectUncheckedCreateWithoutExperimentsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutExperimentsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutExperimentsInput, ProjectUncheckedUpdateWithoutExperimentsInput>
  }

  export type ProjectUpdateWithoutExperimentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutExperimentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type NoteUpsertWithWhereUniqueWithoutExperimentInput = {
    where: NoteWhereUniqueInput
    update: XOR<NoteUpdateWithoutExperimentInput, NoteUncheckedUpdateWithoutExperimentInput>
    create: XOR<NoteCreateWithoutExperimentInput, NoteUncheckedCreateWithoutExperimentInput>
  }

  export type NoteUpdateWithWhereUniqueWithoutExperimentInput = {
    where: NoteWhereUniqueInput
    data: XOR<NoteUpdateWithoutExperimentInput, NoteUncheckedUpdateWithoutExperimentInput>
  }

  export type NoteUpdateManyWithWhereWithoutExperimentInput = {
    where: NoteScalarWhereInput
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyWithoutExperimentInput>
  }

  export type NoteScalarWhereInput = {
    AND?: NoteScalarWhereInput | NoteScalarWhereInput[]
    OR?: NoteScalarWhereInput[]
    NOT?: NoteScalarWhereInput | NoteScalarWhereInput[]
    id?: StringFilter<"Note"> | string
    experimentId?: StringNullableFilter<"Note"> | string | null
    title?: StringFilter<"Note"> | string
    content?: StringFilter<"Note"> | string
    date?: DateTimeNullableFilter<"Note"> | Date | string | null
    type?: StringFilter<"Note"> | string
    createdAt?: DateTimeFilter<"Note"> | Date | string
  }

  export type TableUpsertWithWhereUniqueWithoutExperimentInput = {
    where: TableWhereUniqueInput
    update: XOR<TableUpdateWithoutExperimentInput, TableUncheckedUpdateWithoutExperimentInput>
    create: XOR<TableCreateWithoutExperimentInput, TableUncheckedCreateWithoutExperimentInput>
  }

  export type TableUpdateWithWhereUniqueWithoutExperimentInput = {
    where: TableWhereUniqueInput
    data: XOR<TableUpdateWithoutExperimentInput, TableUncheckedUpdateWithoutExperimentInput>
  }

  export type TableUpdateManyWithWhereWithoutExperimentInput = {
    where: TableScalarWhereInput
    data: XOR<TableUpdateManyMutationInput, TableUncheckedUpdateManyWithoutExperimentInput>
  }

  export type TableScalarWhereInput = {
    AND?: TableScalarWhereInput | TableScalarWhereInput[]
    OR?: TableScalarWhereInput[]
    NOT?: TableScalarWhereInput | TableScalarWhereInput[]
    id?: StringFilter<"Table"> | string
    name?: StringFilter<"Table"> | string
    description?: StringNullableFilter<"Table"> | string | null
    experimentId?: StringNullableFilter<"Table"> | string | null
    columns?: StringFilter<"Table"> | string
    createdAt?: DateTimeFilter<"Table"> | Date | string
    updatedAt?: DateTimeFilter<"Table"> | Date | string
  }

  export type ProtocolExecutionUpsertWithWhereUniqueWithoutExperimentInput = {
    where: ProtocolExecutionWhereUniqueInput
    update: XOR<ProtocolExecutionUpdateWithoutExperimentInput, ProtocolExecutionUncheckedUpdateWithoutExperimentInput>
    create: XOR<ProtocolExecutionCreateWithoutExperimentInput, ProtocolExecutionUncheckedCreateWithoutExperimentInput>
  }

  export type ProtocolExecutionUpdateWithWhereUniqueWithoutExperimentInput = {
    where: ProtocolExecutionWhereUniqueInput
    data: XOR<ProtocolExecutionUpdateWithoutExperimentInput, ProtocolExecutionUncheckedUpdateWithoutExperimentInput>
  }

  export type ProtocolExecutionUpdateManyWithWhereWithoutExperimentInput = {
    where: ProtocolExecutionScalarWhereInput
    data: XOR<ProtocolExecutionUpdateManyMutationInput, ProtocolExecutionUncheckedUpdateManyWithoutExperimentInput>
  }

  export type ProtocolExecutionScalarWhereInput = {
    AND?: ProtocolExecutionScalarWhereInput | ProtocolExecutionScalarWhereInput[]
    OR?: ProtocolExecutionScalarWhereInput[]
    NOT?: ProtocolExecutionScalarWhereInput | ProtocolExecutionScalarWhereInput[]
    id?: StringFilter<"ProtocolExecution"> | string
    protocolId?: StringFilter<"ProtocolExecution"> | string
    experimentId?: StringNullableFilter<"ProtocolExecution"> | string | null
    status?: StringFilter<"ProtocolExecution"> | string
    startDate?: DateTimeNullableFilter<"ProtocolExecution"> | Date | string | null
    endDate?: DateTimeNullableFilter<"ProtocolExecution"> | Date | string | null
    notes?: StringNullableFilter<"ProtocolExecution"> | string | null
    modifications?: StringNullableFilter<"ProtocolExecution"> | string | null
    results?: StringNullableFilter<"ProtocolExecution"> | string | null
    issues?: StringNullableFilter<"ProtocolExecution"> | string | null
    nextSteps?: StringNullableFilter<"ProtocolExecution"> | string | null
    executedBy?: StringNullableFilter<"ProtocolExecution"> | string | null
    completedSteps?: StringNullableFilter<"ProtocolExecution"> | string | null
    createdAt?: DateTimeFilter<"ProtocolExecution"> | Date | string
    updatedAt?: DateTimeFilter<"ProtocolExecution"> | Date | string
  }

  export type TaskUpsertWithWhereUniqueWithoutExperimentInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutExperimentInput, TaskUncheckedUpdateWithoutExperimentInput>
    create: XOR<TaskCreateWithoutExperimentInput, TaskUncheckedCreateWithoutExperimentInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutExperimentInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutExperimentInput, TaskUncheckedUpdateWithoutExperimentInput>
  }

  export type TaskUpdateManyWithWhereWithoutExperimentInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutExperimentInput>
  }

  export type RecipeExecutionUpsertWithWhereUniqueWithoutExperimentInput = {
    where: RecipeExecutionWhereUniqueInput
    update: XOR<RecipeExecutionUpdateWithoutExperimentInput, RecipeExecutionUncheckedUpdateWithoutExperimentInput>
    create: XOR<RecipeExecutionCreateWithoutExperimentInput, RecipeExecutionUncheckedCreateWithoutExperimentInput>
  }

  export type RecipeExecutionUpdateWithWhereUniqueWithoutExperimentInput = {
    where: RecipeExecutionWhereUniqueInput
    data: XOR<RecipeExecutionUpdateWithoutExperimentInput, RecipeExecutionUncheckedUpdateWithoutExperimentInput>
  }

  export type RecipeExecutionUpdateManyWithWhereWithoutExperimentInput = {
    where: RecipeExecutionScalarWhereInput
    data: XOR<RecipeExecutionUpdateManyMutationInput, RecipeExecutionUncheckedUpdateManyWithoutExperimentInput>
  }

  export type RecipeExecutionScalarWhereInput = {
    AND?: RecipeExecutionScalarWhereInput | RecipeExecutionScalarWhereInput[]
    OR?: RecipeExecutionScalarWhereInput[]
    NOT?: RecipeExecutionScalarWhereInput | RecipeExecutionScalarWhereInput[]
    id?: StringFilter<"RecipeExecution"> | string
    recipeId?: StringFilter<"RecipeExecution"> | string
    experimentId?: StringNullableFilter<"RecipeExecution"> | string | null
    status?: StringFilter<"RecipeExecution"> | string
    startDate?: DateTimeNullableFilter<"RecipeExecution"> | Date | string | null
    endDate?: DateTimeNullableFilter<"RecipeExecution"> | Date | string | null
    notes?: StringNullableFilter<"RecipeExecution"> | string | null
    completedSteps?: StringNullableFilter<"RecipeExecution"> | string | null
    createdAt?: DateTimeFilter<"RecipeExecution"> | Date | string
    updatedAt?: DateTimeFilter<"RecipeExecution"> | Date | string
  }

  export type ExperimentCreateWithoutNotesInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    project: ProjectCreateNestedOneWithoutExperimentsInput
    tables?: TableCreateNestedManyWithoutExperimentInput
    protocolExecutions?: ProtocolExecutionCreateNestedManyWithoutExperimentInput
    tasks?: TaskCreateNestedManyWithoutExperimentInput
    recipeExecutions?: RecipeExecutionCreateNestedManyWithoutExperimentInput
  }

  export type ExperimentUncheckedCreateWithoutNotesInput = {
    id?: string
    projectId: string
    name: string
    description?: string | null
    createdAt?: Date | string
    tables?: TableUncheckedCreateNestedManyWithoutExperimentInput
    protocolExecutions?: ProtocolExecutionUncheckedCreateNestedManyWithoutExperimentInput
    tasks?: TaskUncheckedCreateNestedManyWithoutExperimentInput
    recipeExecutions?: RecipeExecutionUncheckedCreateNestedManyWithoutExperimentInput
  }

  export type ExperimentCreateOrConnectWithoutNotesInput = {
    where: ExperimentWhereUniqueInput
    create: XOR<ExperimentCreateWithoutNotesInput, ExperimentUncheckedCreateWithoutNotesInput>
  }

  export type LinkCreateWithoutNoteInput = {
    id?: string
    sourceType: string
    targetType: string
    targetId: string
    createdAt?: Date | string
    highlight?: HighlightCreateNestedOneWithoutLinksInput
    databaseEntry?: DatabaseEntryCreateNestedOneWithoutLinksInput
    table?: TableCreateNestedOneWithoutLinksInput
    protocol?: ProtocolCreateNestedOneWithoutLinksInput
    protocolExecution?: ProtocolExecutionCreateNestedOneWithoutLinksInput
  }

  export type LinkUncheckedCreateWithoutNoteInput = {
    id?: string
    sourceType: string
    targetType: string
    targetId: string
    createdAt?: Date | string
  }

  export type LinkCreateOrConnectWithoutNoteInput = {
    where: LinkWhereUniqueInput
    create: XOR<LinkCreateWithoutNoteInput, LinkUncheckedCreateWithoutNoteInput>
  }

  export type LinkCreateManyNoteInputEnvelope = {
    data: LinkCreateManyNoteInput | LinkCreateManyNoteInput[]
  }

  export type ExperimentUpsertWithoutNotesInput = {
    update: XOR<ExperimentUpdateWithoutNotesInput, ExperimentUncheckedUpdateWithoutNotesInput>
    create: XOR<ExperimentCreateWithoutNotesInput, ExperimentUncheckedCreateWithoutNotesInput>
    where?: ExperimentWhereInput
  }

  export type ExperimentUpdateToOneWithWhereWithoutNotesInput = {
    where?: ExperimentWhereInput
    data: XOR<ExperimentUpdateWithoutNotesInput, ExperimentUncheckedUpdateWithoutNotesInput>
  }

  export type ExperimentUpdateWithoutNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutExperimentsNestedInput
    tables?: TableUpdateManyWithoutExperimentNestedInput
    protocolExecutions?: ProtocolExecutionUpdateManyWithoutExperimentNestedInput
    tasks?: TaskUpdateManyWithoutExperimentNestedInput
    recipeExecutions?: RecipeExecutionUpdateManyWithoutExperimentNestedInput
  }

  export type ExperimentUncheckedUpdateWithoutNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tables?: TableUncheckedUpdateManyWithoutExperimentNestedInput
    protocolExecutions?: ProtocolExecutionUncheckedUpdateManyWithoutExperimentNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutExperimentNestedInput
    recipeExecutions?: RecipeExecutionUncheckedUpdateManyWithoutExperimentNestedInput
  }

  export type LinkUpsertWithWhereUniqueWithoutNoteInput = {
    where: LinkWhereUniqueInput
    update: XOR<LinkUpdateWithoutNoteInput, LinkUncheckedUpdateWithoutNoteInput>
    create: XOR<LinkCreateWithoutNoteInput, LinkUncheckedCreateWithoutNoteInput>
  }

  export type LinkUpdateWithWhereUniqueWithoutNoteInput = {
    where: LinkWhereUniqueInput
    data: XOR<LinkUpdateWithoutNoteInput, LinkUncheckedUpdateWithoutNoteInput>
  }

  export type LinkUpdateManyWithWhereWithoutNoteInput = {
    where: LinkScalarWhereInput
    data: XOR<LinkUpdateManyMutationInput, LinkUncheckedUpdateManyWithoutNoteInput>
  }

  export type LinkScalarWhereInput = {
    AND?: LinkScalarWhereInput | LinkScalarWhereInput[]
    OR?: LinkScalarWhereInput[]
    NOT?: LinkScalarWhereInput | LinkScalarWhereInput[]
    id?: StringFilter<"Link"> | string
    sourceType?: StringFilter<"Link"> | string
    sourceId?: StringFilter<"Link"> | string
    targetType?: StringFilter<"Link"> | string
    targetId?: StringFilter<"Link"> | string
    createdAt?: DateTimeFilter<"Link"> | Date | string
  }

  export type HighlightCreateWithoutPdfInput = {
    id?: string
    page: number
    text: string
    coords?: string | null
    createdAt?: Date | string
    links?: LinkCreateNestedManyWithoutHighlightInput
  }

  export type HighlightUncheckedCreateWithoutPdfInput = {
    id?: string
    page: number
    text: string
    coords?: string | null
    createdAt?: Date | string
    links?: LinkUncheckedCreateNestedManyWithoutHighlightInput
  }

  export type HighlightCreateOrConnectWithoutPdfInput = {
    where: HighlightWhereUniqueInput
    create: XOR<HighlightCreateWithoutPdfInput, HighlightUncheckedCreateWithoutPdfInput>
  }

  export type HighlightCreateManyPdfInputEnvelope = {
    data: HighlightCreateManyPdfInput | HighlightCreateManyPdfInput[]
  }

  export type HighlightUpsertWithWhereUniqueWithoutPdfInput = {
    where: HighlightWhereUniqueInput
    update: XOR<HighlightUpdateWithoutPdfInput, HighlightUncheckedUpdateWithoutPdfInput>
    create: XOR<HighlightCreateWithoutPdfInput, HighlightUncheckedCreateWithoutPdfInput>
  }

  export type HighlightUpdateWithWhereUniqueWithoutPdfInput = {
    where: HighlightWhereUniqueInput
    data: XOR<HighlightUpdateWithoutPdfInput, HighlightUncheckedUpdateWithoutPdfInput>
  }

  export type HighlightUpdateManyWithWhereWithoutPdfInput = {
    where: HighlightScalarWhereInput
    data: XOR<HighlightUpdateManyMutationInput, HighlightUncheckedUpdateManyWithoutPdfInput>
  }

  export type HighlightScalarWhereInput = {
    AND?: HighlightScalarWhereInput | HighlightScalarWhereInput[]
    OR?: HighlightScalarWhereInput[]
    NOT?: HighlightScalarWhereInput | HighlightScalarWhereInput[]
    id?: StringFilter<"Highlight"> | string
    pdfId?: StringFilter<"Highlight"> | string
    page?: IntFilter<"Highlight"> | number
    text?: StringFilter<"Highlight"> | string
    coords?: StringNullableFilter<"Highlight"> | string | null
    createdAt?: DateTimeFilter<"Highlight"> | Date | string
  }

  export type PDFCreateWithoutHighlightsInput = {
    id?: string
    filePath: string
    title: string
    uploadedAt?: Date | string
  }

  export type PDFUncheckedCreateWithoutHighlightsInput = {
    id?: string
    filePath: string
    title: string
    uploadedAt?: Date | string
  }

  export type PDFCreateOrConnectWithoutHighlightsInput = {
    where: PDFWhereUniqueInput
    create: XOR<PDFCreateWithoutHighlightsInput, PDFUncheckedCreateWithoutHighlightsInput>
  }

  export type LinkCreateWithoutHighlightInput = {
    id?: string
    sourceType: string
    targetType: string
    targetId: string
    createdAt?: Date | string
    note?: NoteCreateNestedOneWithoutLinksInput
    databaseEntry?: DatabaseEntryCreateNestedOneWithoutLinksInput
    table?: TableCreateNestedOneWithoutLinksInput
    protocol?: ProtocolCreateNestedOneWithoutLinksInput
    protocolExecution?: ProtocolExecutionCreateNestedOneWithoutLinksInput
  }

  export type LinkUncheckedCreateWithoutHighlightInput = {
    id?: string
    sourceType: string
    targetType: string
    targetId: string
    createdAt?: Date | string
  }

  export type LinkCreateOrConnectWithoutHighlightInput = {
    where: LinkWhereUniqueInput
    create: XOR<LinkCreateWithoutHighlightInput, LinkUncheckedCreateWithoutHighlightInput>
  }

  export type LinkCreateManyHighlightInputEnvelope = {
    data: LinkCreateManyHighlightInput | LinkCreateManyHighlightInput[]
  }

  export type PDFUpsertWithoutHighlightsInput = {
    update: XOR<PDFUpdateWithoutHighlightsInput, PDFUncheckedUpdateWithoutHighlightsInput>
    create: XOR<PDFCreateWithoutHighlightsInput, PDFUncheckedCreateWithoutHighlightsInput>
    where?: PDFWhereInput
  }

  export type PDFUpdateToOneWithWhereWithoutHighlightsInput = {
    where?: PDFWhereInput
    data: XOR<PDFUpdateWithoutHighlightsInput, PDFUncheckedUpdateWithoutHighlightsInput>
  }

  export type PDFUpdateWithoutHighlightsInput = {
    id?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PDFUncheckedUpdateWithoutHighlightsInput = {
    id?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LinkUpsertWithWhereUniqueWithoutHighlightInput = {
    where: LinkWhereUniqueInput
    update: XOR<LinkUpdateWithoutHighlightInput, LinkUncheckedUpdateWithoutHighlightInput>
    create: XOR<LinkCreateWithoutHighlightInput, LinkUncheckedCreateWithoutHighlightInput>
  }

  export type LinkUpdateWithWhereUniqueWithoutHighlightInput = {
    where: LinkWhereUniqueInput
    data: XOR<LinkUpdateWithoutHighlightInput, LinkUncheckedUpdateWithoutHighlightInput>
  }

  export type LinkUpdateManyWithWhereWithoutHighlightInput = {
    where: LinkScalarWhereInput
    data: XOR<LinkUpdateManyMutationInput, LinkUncheckedUpdateManyWithoutHighlightInput>
  }

  export type DatabaseEntryCreateWithoutRelatedLitNotesInput = {
    id?: string
    type: string
    name: string
    description?: string | null
    properties?: string | null
    molecularWeight?: number | null
    concentration?: string | null
    storage?: string | null
    supplier?: string | null
    catalogNumber?: string | null
    purity?: string | null
    sequence?: string | null
    organism?: string | null
    function?: string | null
    protocol?: string | null
    equipment?: string | null
    duration?: string | null
    temperature?: string | null
    pH?: string | null
    createdAt?: Date | string
    metadata?: string | null
    relatedResearch?: string | null
    links?: LinkCreateNestedManyWithoutDatabaseEntryInput
  }

  export type DatabaseEntryUncheckedCreateWithoutRelatedLitNotesInput = {
    id?: string
    type: string
    name: string
    description?: string | null
    properties?: string | null
    molecularWeight?: number | null
    concentration?: string | null
    storage?: string | null
    supplier?: string | null
    catalogNumber?: string | null
    purity?: string | null
    sequence?: string | null
    organism?: string | null
    function?: string | null
    protocol?: string | null
    equipment?: string | null
    duration?: string | null
    temperature?: string | null
    pH?: string | null
    createdAt?: Date | string
    metadata?: string | null
    relatedResearch?: string | null
    links?: LinkUncheckedCreateNestedManyWithoutDatabaseEntryInput
  }

  export type DatabaseEntryCreateOrConnectWithoutRelatedLitNotesInput = {
    where: DatabaseEntryWhereUniqueInput
    create: XOR<DatabaseEntryCreateWithoutRelatedLitNotesInput, DatabaseEntryUncheckedCreateWithoutRelatedLitNotesInput>
  }

  export type DatabaseEntryUpsertWithWhereUniqueWithoutRelatedLitNotesInput = {
    where: DatabaseEntryWhereUniqueInput
    update: XOR<DatabaseEntryUpdateWithoutRelatedLitNotesInput, DatabaseEntryUncheckedUpdateWithoutRelatedLitNotesInput>
    create: XOR<DatabaseEntryCreateWithoutRelatedLitNotesInput, DatabaseEntryUncheckedCreateWithoutRelatedLitNotesInput>
  }

  export type DatabaseEntryUpdateWithWhereUniqueWithoutRelatedLitNotesInput = {
    where: DatabaseEntryWhereUniqueInput
    data: XOR<DatabaseEntryUpdateWithoutRelatedLitNotesInput, DatabaseEntryUncheckedUpdateWithoutRelatedLitNotesInput>
  }

  export type DatabaseEntryUpdateManyWithWhereWithoutRelatedLitNotesInput = {
    where: DatabaseEntryScalarWhereInput
    data: XOR<DatabaseEntryUpdateManyMutationInput, DatabaseEntryUncheckedUpdateManyWithoutRelatedLitNotesInput>
  }

  export type DatabaseEntryScalarWhereInput = {
    AND?: DatabaseEntryScalarWhereInput | DatabaseEntryScalarWhereInput[]
    OR?: DatabaseEntryScalarWhereInput[]
    NOT?: DatabaseEntryScalarWhereInput | DatabaseEntryScalarWhereInput[]
    id?: StringFilter<"DatabaseEntry"> | string
    type?: StringFilter<"DatabaseEntry"> | string
    name?: StringFilter<"DatabaseEntry"> | string
    description?: StringNullableFilter<"DatabaseEntry"> | string | null
    properties?: StringNullableFilter<"DatabaseEntry"> | string | null
    molecularWeight?: FloatNullableFilter<"DatabaseEntry"> | number | null
    concentration?: StringNullableFilter<"DatabaseEntry"> | string | null
    storage?: StringNullableFilter<"DatabaseEntry"> | string | null
    supplier?: StringNullableFilter<"DatabaseEntry"> | string | null
    catalogNumber?: StringNullableFilter<"DatabaseEntry"> | string | null
    purity?: StringNullableFilter<"DatabaseEntry"> | string | null
    sequence?: StringNullableFilter<"DatabaseEntry"> | string | null
    organism?: StringNullableFilter<"DatabaseEntry"> | string | null
    function?: StringNullableFilter<"DatabaseEntry"> | string | null
    protocol?: StringNullableFilter<"DatabaseEntry"> | string | null
    equipment?: StringNullableFilter<"DatabaseEntry"> | string | null
    duration?: StringNullableFilter<"DatabaseEntry"> | string | null
    temperature?: StringNullableFilter<"DatabaseEntry"> | string | null
    pH?: StringNullableFilter<"DatabaseEntry"> | string | null
    createdAt?: DateTimeFilter<"DatabaseEntry"> | Date | string
    metadata?: StringNullableFilter<"DatabaseEntry"> | string | null
    relatedResearch?: StringNullableFilter<"DatabaseEntry"> | string | null
  }

  export type LiteratureNoteCreateWithoutRelatedEntriesInput = {
    id?: string
    title: string
    authors?: string | null
    year?: string | null
    journal?: string | null
    doi?: string | null
    abstract?: string | null
    tags?: string | null
    citation?: string | null
    synonyms?: string | null
    userNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LiteratureNoteUncheckedCreateWithoutRelatedEntriesInput = {
    id?: string
    title: string
    authors?: string | null
    year?: string | null
    journal?: string | null
    doi?: string | null
    abstract?: string | null
    tags?: string | null
    citation?: string | null
    synonyms?: string | null
    userNote?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LiteratureNoteCreateOrConnectWithoutRelatedEntriesInput = {
    where: LiteratureNoteWhereUniqueInput
    create: XOR<LiteratureNoteCreateWithoutRelatedEntriesInput, LiteratureNoteUncheckedCreateWithoutRelatedEntriesInput>
  }

  export type LinkCreateWithoutDatabaseEntryInput = {
    id?: string
    sourceType: string
    targetType: string
    targetId: string
    createdAt?: Date | string
    note?: NoteCreateNestedOneWithoutLinksInput
    highlight?: HighlightCreateNestedOneWithoutLinksInput
    table?: TableCreateNestedOneWithoutLinksInput
    protocol?: ProtocolCreateNestedOneWithoutLinksInput
    protocolExecution?: ProtocolExecutionCreateNestedOneWithoutLinksInput
  }

  export type LinkUncheckedCreateWithoutDatabaseEntryInput = {
    id?: string
    sourceType: string
    targetType: string
    targetId: string
    createdAt?: Date | string
  }

  export type LinkCreateOrConnectWithoutDatabaseEntryInput = {
    where: LinkWhereUniqueInput
    create: XOR<LinkCreateWithoutDatabaseEntryInput, LinkUncheckedCreateWithoutDatabaseEntryInput>
  }

  export type LinkCreateManyDatabaseEntryInputEnvelope = {
    data: LinkCreateManyDatabaseEntryInput | LinkCreateManyDatabaseEntryInput[]
  }

  export type LiteratureNoteUpsertWithWhereUniqueWithoutRelatedEntriesInput = {
    where: LiteratureNoteWhereUniqueInput
    update: XOR<LiteratureNoteUpdateWithoutRelatedEntriesInput, LiteratureNoteUncheckedUpdateWithoutRelatedEntriesInput>
    create: XOR<LiteratureNoteCreateWithoutRelatedEntriesInput, LiteratureNoteUncheckedCreateWithoutRelatedEntriesInput>
  }

  export type LiteratureNoteUpdateWithWhereUniqueWithoutRelatedEntriesInput = {
    where: LiteratureNoteWhereUniqueInput
    data: XOR<LiteratureNoteUpdateWithoutRelatedEntriesInput, LiteratureNoteUncheckedUpdateWithoutRelatedEntriesInput>
  }

  export type LiteratureNoteUpdateManyWithWhereWithoutRelatedEntriesInput = {
    where: LiteratureNoteScalarWhereInput
    data: XOR<LiteratureNoteUpdateManyMutationInput, LiteratureNoteUncheckedUpdateManyWithoutRelatedEntriesInput>
  }

  export type LiteratureNoteScalarWhereInput = {
    AND?: LiteratureNoteScalarWhereInput | LiteratureNoteScalarWhereInput[]
    OR?: LiteratureNoteScalarWhereInput[]
    NOT?: LiteratureNoteScalarWhereInput | LiteratureNoteScalarWhereInput[]
    id?: StringFilter<"LiteratureNote"> | string
    title?: StringFilter<"LiteratureNote"> | string
    authors?: StringNullableFilter<"LiteratureNote"> | string | null
    year?: StringNullableFilter<"LiteratureNote"> | string | null
    journal?: StringNullableFilter<"LiteratureNote"> | string | null
    doi?: StringNullableFilter<"LiteratureNote"> | string | null
    abstract?: StringNullableFilter<"LiteratureNote"> | string | null
    tags?: StringNullableFilter<"LiteratureNote"> | string | null
    citation?: StringNullableFilter<"LiteratureNote"> | string | null
    synonyms?: StringNullableFilter<"LiteratureNote"> | string | null
    userNote?: StringNullableFilter<"LiteratureNote"> | string | null
    createdAt?: DateTimeFilter<"LiteratureNote"> | Date | string
    updatedAt?: DateTimeFilter<"LiteratureNote"> | Date | string
  }

  export type LinkUpsertWithWhereUniqueWithoutDatabaseEntryInput = {
    where: LinkWhereUniqueInput
    update: XOR<LinkUpdateWithoutDatabaseEntryInput, LinkUncheckedUpdateWithoutDatabaseEntryInput>
    create: XOR<LinkCreateWithoutDatabaseEntryInput, LinkUncheckedCreateWithoutDatabaseEntryInput>
  }

  export type LinkUpdateWithWhereUniqueWithoutDatabaseEntryInput = {
    where: LinkWhereUniqueInput
    data: XOR<LinkUpdateWithoutDatabaseEntryInput, LinkUncheckedUpdateWithoutDatabaseEntryInput>
  }

  export type LinkUpdateManyWithWhereWithoutDatabaseEntryInput = {
    where: LinkScalarWhereInput
    data: XOR<LinkUpdateManyMutationInput, LinkUncheckedUpdateManyWithoutDatabaseEntryInput>
  }

  export type ExperimentCreateWithoutTablesInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    project: ProjectCreateNestedOneWithoutExperimentsInput
    notes?: NoteCreateNestedManyWithoutExperimentInput
    protocolExecutions?: ProtocolExecutionCreateNestedManyWithoutExperimentInput
    tasks?: TaskCreateNestedManyWithoutExperimentInput
    recipeExecutions?: RecipeExecutionCreateNestedManyWithoutExperimentInput
  }

  export type ExperimentUncheckedCreateWithoutTablesInput = {
    id?: string
    projectId: string
    name: string
    description?: string | null
    createdAt?: Date | string
    notes?: NoteUncheckedCreateNestedManyWithoutExperimentInput
    protocolExecutions?: ProtocolExecutionUncheckedCreateNestedManyWithoutExperimentInput
    tasks?: TaskUncheckedCreateNestedManyWithoutExperimentInput
    recipeExecutions?: RecipeExecutionUncheckedCreateNestedManyWithoutExperimentInput
  }

  export type ExperimentCreateOrConnectWithoutTablesInput = {
    where: ExperimentWhereUniqueInput
    create: XOR<ExperimentCreateWithoutTablesInput, ExperimentUncheckedCreateWithoutTablesInput>
  }

  export type TableRowCreateWithoutTableInput = {
    id?: string
    data: string
    rowNumber: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TableRowUncheckedCreateWithoutTableInput = {
    id?: string
    data: string
    rowNumber: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TableRowCreateOrConnectWithoutTableInput = {
    where: TableRowWhereUniqueInput
    create: XOR<TableRowCreateWithoutTableInput, TableRowUncheckedCreateWithoutTableInput>
  }

  export type TableRowCreateManyTableInputEnvelope = {
    data: TableRowCreateManyTableInput | TableRowCreateManyTableInput[]
  }

  export type LinkCreateWithoutTableInput = {
    id?: string
    sourceType: string
    targetType: string
    targetId: string
    createdAt?: Date | string
    note?: NoteCreateNestedOneWithoutLinksInput
    highlight?: HighlightCreateNestedOneWithoutLinksInput
    databaseEntry?: DatabaseEntryCreateNestedOneWithoutLinksInput
    protocol?: ProtocolCreateNestedOneWithoutLinksInput
    protocolExecution?: ProtocolExecutionCreateNestedOneWithoutLinksInput
  }

  export type LinkUncheckedCreateWithoutTableInput = {
    id?: string
    sourceType: string
    targetType: string
    targetId: string
    createdAt?: Date | string
  }

  export type LinkCreateOrConnectWithoutTableInput = {
    where: LinkWhereUniqueInput
    create: XOR<LinkCreateWithoutTableInput, LinkUncheckedCreateWithoutTableInput>
  }

  export type LinkCreateManyTableInputEnvelope = {
    data: LinkCreateManyTableInput | LinkCreateManyTableInput[]
  }

  export type ExperimentUpsertWithoutTablesInput = {
    update: XOR<ExperimentUpdateWithoutTablesInput, ExperimentUncheckedUpdateWithoutTablesInput>
    create: XOR<ExperimentCreateWithoutTablesInput, ExperimentUncheckedCreateWithoutTablesInput>
    where?: ExperimentWhereInput
  }

  export type ExperimentUpdateToOneWithWhereWithoutTablesInput = {
    where?: ExperimentWhereInput
    data: XOR<ExperimentUpdateWithoutTablesInput, ExperimentUncheckedUpdateWithoutTablesInput>
  }

  export type ExperimentUpdateWithoutTablesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutExperimentsNestedInput
    notes?: NoteUpdateManyWithoutExperimentNestedInput
    protocolExecutions?: ProtocolExecutionUpdateManyWithoutExperimentNestedInput
    tasks?: TaskUpdateManyWithoutExperimentNestedInput
    recipeExecutions?: RecipeExecutionUpdateManyWithoutExperimentNestedInput
  }

  export type ExperimentUncheckedUpdateWithoutTablesInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NoteUncheckedUpdateManyWithoutExperimentNestedInput
    protocolExecutions?: ProtocolExecutionUncheckedUpdateManyWithoutExperimentNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutExperimentNestedInput
    recipeExecutions?: RecipeExecutionUncheckedUpdateManyWithoutExperimentNestedInput
  }

  export type TableRowUpsertWithWhereUniqueWithoutTableInput = {
    where: TableRowWhereUniqueInput
    update: XOR<TableRowUpdateWithoutTableInput, TableRowUncheckedUpdateWithoutTableInput>
    create: XOR<TableRowCreateWithoutTableInput, TableRowUncheckedCreateWithoutTableInput>
  }

  export type TableRowUpdateWithWhereUniqueWithoutTableInput = {
    where: TableRowWhereUniqueInput
    data: XOR<TableRowUpdateWithoutTableInput, TableRowUncheckedUpdateWithoutTableInput>
  }

  export type TableRowUpdateManyWithWhereWithoutTableInput = {
    where: TableRowScalarWhereInput
    data: XOR<TableRowUpdateManyMutationInput, TableRowUncheckedUpdateManyWithoutTableInput>
  }

  export type TableRowScalarWhereInput = {
    AND?: TableRowScalarWhereInput | TableRowScalarWhereInput[]
    OR?: TableRowScalarWhereInput[]
    NOT?: TableRowScalarWhereInput | TableRowScalarWhereInput[]
    id?: StringFilter<"TableRow"> | string
    tableId?: StringFilter<"TableRow"> | string
    data?: StringFilter<"TableRow"> | string
    rowNumber?: IntFilter<"TableRow"> | number
    createdAt?: DateTimeFilter<"TableRow"> | Date | string
    updatedAt?: DateTimeFilter<"TableRow"> | Date | string
  }

  export type LinkUpsertWithWhereUniqueWithoutTableInput = {
    where: LinkWhereUniqueInput
    update: XOR<LinkUpdateWithoutTableInput, LinkUncheckedUpdateWithoutTableInput>
    create: XOR<LinkCreateWithoutTableInput, LinkUncheckedCreateWithoutTableInput>
  }

  export type LinkUpdateWithWhereUniqueWithoutTableInput = {
    where: LinkWhereUniqueInput
    data: XOR<LinkUpdateWithoutTableInput, LinkUncheckedUpdateWithoutTableInput>
  }

  export type LinkUpdateManyWithWhereWithoutTableInput = {
    where: LinkScalarWhereInput
    data: XOR<LinkUpdateManyMutationInput, LinkUncheckedUpdateManyWithoutTableInput>
  }

  export type TableCreateWithoutRowsInput = {
    id?: string
    name: string
    description?: string | null
    columns: string
    createdAt?: Date | string
    updatedAt?: Date | string
    experiment?: ExperimentCreateNestedOneWithoutTablesInput
    links?: LinkCreateNestedManyWithoutTableInput
  }

  export type TableUncheckedCreateWithoutRowsInput = {
    id?: string
    name: string
    description?: string | null
    experimentId?: string | null
    columns: string
    createdAt?: Date | string
    updatedAt?: Date | string
    links?: LinkUncheckedCreateNestedManyWithoutTableInput
  }

  export type TableCreateOrConnectWithoutRowsInput = {
    where: TableWhereUniqueInput
    create: XOR<TableCreateWithoutRowsInput, TableUncheckedCreateWithoutRowsInput>
  }

  export type TableUpsertWithoutRowsInput = {
    update: XOR<TableUpdateWithoutRowsInput, TableUncheckedUpdateWithoutRowsInput>
    create: XOR<TableCreateWithoutRowsInput, TableUncheckedCreateWithoutRowsInput>
    where?: TableWhereInput
  }

  export type TableUpdateToOneWithWhereWithoutRowsInput = {
    where?: TableWhereInput
    data: XOR<TableUpdateWithoutRowsInput, TableUncheckedUpdateWithoutRowsInput>
  }

  export type TableUpdateWithoutRowsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    columns?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experiment?: ExperimentUpdateOneWithoutTablesNestedInput
    links?: LinkUpdateManyWithoutTableNestedInput
  }

  export type TableUncheckedUpdateWithoutRowsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    columns?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    links?: LinkUncheckedUpdateManyWithoutTableNestedInput
  }

  export type ProtocolExecutionCreateWithoutProtocolInput = {
    id?: string
    status: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    notes?: string | null
    modifications?: string | null
    results?: string | null
    issues?: string | null
    nextSteps?: string | null
    executedBy?: string | null
    completedSteps?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    experiment?: ExperimentCreateNestedOneWithoutProtocolExecutionsInput
    links?: LinkCreateNestedManyWithoutProtocolExecutionInput
  }

  export type ProtocolExecutionUncheckedCreateWithoutProtocolInput = {
    id?: string
    experimentId?: string | null
    status: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    notes?: string | null
    modifications?: string | null
    results?: string | null
    issues?: string | null
    nextSteps?: string | null
    executedBy?: string | null
    completedSteps?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    links?: LinkUncheckedCreateNestedManyWithoutProtocolExecutionInput
  }

  export type ProtocolExecutionCreateOrConnectWithoutProtocolInput = {
    where: ProtocolExecutionWhereUniqueInput
    create: XOR<ProtocolExecutionCreateWithoutProtocolInput, ProtocolExecutionUncheckedCreateWithoutProtocolInput>
  }

  export type ProtocolExecutionCreateManyProtocolInputEnvelope = {
    data: ProtocolExecutionCreateManyProtocolInput | ProtocolExecutionCreateManyProtocolInput[]
  }

  export type LinkCreateWithoutProtocolInput = {
    id?: string
    sourceType: string
    targetType: string
    targetId: string
    createdAt?: Date | string
    note?: NoteCreateNestedOneWithoutLinksInput
    highlight?: HighlightCreateNestedOneWithoutLinksInput
    databaseEntry?: DatabaseEntryCreateNestedOneWithoutLinksInput
    table?: TableCreateNestedOneWithoutLinksInput
    protocolExecution?: ProtocolExecutionCreateNestedOneWithoutLinksInput
  }

  export type LinkUncheckedCreateWithoutProtocolInput = {
    id?: string
    sourceType: string
    targetType: string
    targetId: string
    createdAt?: Date | string
  }

  export type LinkCreateOrConnectWithoutProtocolInput = {
    where: LinkWhereUniqueInput
    create: XOR<LinkCreateWithoutProtocolInput, LinkUncheckedCreateWithoutProtocolInput>
  }

  export type LinkCreateManyProtocolInputEnvelope = {
    data: LinkCreateManyProtocolInput | LinkCreateManyProtocolInput[]
  }

  export type ProtocolExecutionUpsertWithWhereUniqueWithoutProtocolInput = {
    where: ProtocolExecutionWhereUniqueInput
    update: XOR<ProtocolExecutionUpdateWithoutProtocolInput, ProtocolExecutionUncheckedUpdateWithoutProtocolInput>
    create: XOR<ProtocolExecutionCreateWithoutProtocolInput, ProtocolExecutionUncheckedCreateWithoutProtocolInput>
  }

  export type ProtocolExecutionUpdateWithWhereUniqueWithoutProtocolInput = {
    where: ProtocolExecutionWhereUniqueInput
    data: XOR<ProtocolExecutionUpdateWithoutProtocolInput, ProtocolExecutionUncheckedUpdateWithoutProtocolInput>
  }

  export type ProtocolExecutionUpdateManyWithWhereWithoutProtocolInput = {
    where: ProtocolExecutionScalarWhereInput
    data: XOR<ProtocolExecutionUpdateManyMutationInput, ProtocolExecutionUncheckedUpdateManyWithoutProtocolInput>
  }

  export type LinkUpsertWithWhereUniqueWithoutProtocolInput = {
    where: LinkWhereUniqueInput
    update: XOR<LinkUpdateWithoutProtocolInput, LinkUncheckedUpdateWithoutProtocolInput>
    create: XOR<LinkCreateWithoutProtocolInput, LinkUncheckedCreateWithoutProtocolInput>
  }

  export type LinkUpdateWithWhereUniqueWithoutProtocolInput = {
    where: LinkWhereUniqueInput
    data: XOR<LinkUpdateWithoutProtocolInput, LinkUncheckedUpdateWithoutProtocolInput>
  }

  export type LinkUpdateManyWithWhereWithoutProtocolInput = {
    where: LinkScalarWhereInput
    data: XOR<LinkUpdateManyMutationInput, LinkUncheckedUpdateManyWithoutProtocolInput>
  }

  export type ProtocolCreateWithoutExecutionsInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    version?: string
    steps: string
    equipment?: string | null
    reagents?: string | null
    safetyNotes?: string | null
    expectedDuration?: string | null
    difficulty?: string | null
    successRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    links?: LinkCreateNestedManyWithoutProtocolInput
  }

  export type ProtocolUncheckedCreateWithoutExecutionsInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    version?: string
    steps: string
    equipment?: string | null
    reagents?: string | null
    safetyNotes?: string | null
    expectedDuration?: string | null
    difficulty?: string | null
    successRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    links?: LinkUncheckedCreateNestedManyWithoutProtocolInput
  }

  export type ProtocolCreateOrConnectWithoutExecutionsInput = {
    where: ProtocolWhereUniqueInput
    create: XOR<ProtocolCreateWithoutExecutionsInput, ProtocolUncheckedCreateWithoutExecutionsInput>
  }

  export type ExperimentCreateWithoutProtocolExecutionsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    project: ProjectCreateNestedOneWithoutExperimentsInput
    notes?: NoteCreateNestedManyWithoutExperimentInput
    tables?: TableCreateNestedManyWithoutExperimentInput
    tasks?: TaskCreateNestedManyWithoutExperimentInput
    recipeExecutions?: RecipeExecutionCreateNestedManyWithoutExperimentInput
  }

  export type ExperimentUncheckedCreateWithoutProtocolExecutionsInput = {
    id?: string
    projectId: string
    name: string
    description?: string | null
    createdAt?: Date | string
    notes?: NoteUncheckedCreateNestedManyWithoutExperimentInput
    tables?: TableUncheckedCreateNestedManyWithoutExperimentInput
    tasks?: TaskUncheckedCreateNestedManyWithoutExperimentInput
    recipeExecutions?: RecipeExecutionUncheckedCreateNestedManyWithoutExperimentInput
  }

  export type ExperimentCreateOrConnectWithoutProtocolExecutionsInput = {
    where: ExperimentWhereUniqueInput
    create: XOR<ExperimentCreateWithoutProtocolExecutionsInput, ExperimentUncheckedCreateWithoutProtocolExecutionsInput>
  }

  export type LinkCreateWithoutProtocolExecutionInput = {
    id?: string
    sourceType: string
    targetType: string
    targetId: string
    createdAt?: Date | string
    note?: NoteCreateNestedOneWithoutLinksInput
    highlight?: HighlightCreateNestedOneWithoutLinksInput
    databaseEntry?: DatabaseEntryCreateNestedOneWithoutLinksInput
    table?: TableCreateNestedOneWithoutLinksInput
    protocol?: ProtocolCreateNestedOneWithoutLinksInput
  }

  export type LinkUncheckedCreateWithoutProtocolExecutionInput = {
    id?: string
    sourceType: string
    targetType: string
    targetId: string
    createdAt?: Date | string
  }

  export type LinkCreateOrConnectWithoutProtocolExecutionInput = {
    where: LinkWhereUniqueInput
    create: XOR<LinkCreateWithoutProtocolExecutionInput, LinkUncheckedCreateWithoutProtocolExecutionInput>
  }

  export type LinkCreateManyProtocolExecutionInputEnvelope = {
    data: LinkCreateManyProtocolExecutionInput | LinkCreateManyProtocolExecutionInput[]
  }

  export type ProtocolUpsertWithoutExecutionsInput = {
    update: XOR<ProtocolUpdateWithoutExecutionsInput, ProtocolUncheckedUpdateWithoutExecutionsInput>
    create: XOR<ProtocolCreateWithoutExecutionsInput, ProtocolUncheckedCreateWithoutExecutionsInput>
    where?: ProtocolWhereInput
  }

  export type ProtocolUpdateToOneWithWhereWithoutExecutionsInput = {
    where?: ProtocolWhereInput
    data: XOR<ProtocolUpdateWithoutExecutionsInput, ProtocolUncheckedUpdateWithoutExecutionsInput>
  }

  export type ProtocolUpdateWithoutExecutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    equipment?: NullableStringFieldUpdateOperationsInput | string | null
    reagents?: NullableStringFieldUpdateOperationsInput | string | null
    safetyNotes?: NullableStringFieldUpdateOperationsInput | string | null
    expectedDuration?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    successRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    links?: LinkUpdateManyWithoutProtocolNestedInput
  }

  export type ProtocolUncheckedUpdateWithoutExecutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    equipment?: NullableStringFieldUpdateOperationsInput | string | null
    reagents?: NullableStringFieldUpdateOperationsInput | string | null
    safetyNotes?: NullableStringFieldUpdateOperationsInput | string | null
    expectedDuration?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    successRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    links?: LinkUncheckedUpdateManyWithoutProtocolNestedInput
  }

  export type ExperimentUpsertWithoutProtocolExecutionsInput = {
    update: XOR<ExperimentUpdateWithoutProtocolExecutionsInput, ExperimentUncheckedUpdateWithoutProtocolExecutionsInput>
    create: XOR<ExperimentCreateWithoutProtocolExecutionsInput, ExperimentUncheckedCreateWithoutProtocolExecutionsInput>
    where?: ExperimentWhereInput
  }

  export type ExperimentUpdateToOneWithWhereWithoutProtocolExecutionsInput = {
    where?: ExperimentWhereInput
    data: XOR<ExperimentUpdateWithoutProtocolExecutionsInput, ExperimentUncheckedUpdateWithoutProtocolExecutionsInput>
  }

  export type ExperimentUpdateWithoutProtocolExecutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutExperimentsNestedInput
    notes?: NoteUpdateManyWithoutExperimentNestedInput
    tables?: TableUpdateManyWithoutExperimentNestedInput
    tasks?: TaskUpdateManyWithoutExperimentNestedInput
    recipeExecutions?: RecipeExecutionUpdateManyWithoutExperimentNestedInput
  }

  export type ExperimentUncheckedUpdateWithoutProtocolExecutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NoteUncheckedUpdateManyWithoutExperimentNestedInput
    tables?: TableUncheckedUpdateManyWithoutExperimentNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutExperimentNestedInput
    recipeExecutions?: RecipeExecutionUncheckedUpdateManyWithoutExperimentNestedInput
  }

  export type LinkUpsertWithWhereUniqueWithoutProtocolExecutionInput = {
    where: LinkWhereUniqueInput
    update: XOR<LinkUpdateWithoutProtocolExecutionInput, LinkUncheckedUpdateWithoutProtocolExecutionInput>
    create: XOR<LinkCreateWithoutProtocolExecutionInput, LinkUncheckedCreateWithoutProtocolExecutionInput>
  }

  export type LinkUpdateWithWhereUniqueWithoutProtocolExecutionInput = {
    where: LinkWhereUniqueInput
    data: XOR<LinkUpdateWithoutProtocolExecutionInput, LinkUncheckedUpdateWithoutProtocolExecutionInput>
  }

  export type LinkUpdateManyWithWhereWithoutProtocolExecutionInput = {
    where: LinkScalarWhereInput
    data: XOR<LinkUpdateManyMutationInput, LinkUncheckedUpdateManyWithoutProtocolExecutionInput>
  }

  export type NoteCreateWithoutLinksInput = {
    id?: string
    title: string
    content: string
    date?: Date | string | null
    type: string
    createdAt?: Date | string
    experiment?: ExperimentCreateNestedOneWithoutNotesInput
  }

  export type NoteUncheckedCreateWithoutLinksInput = {
    id?: string
    experimentId?: string | null
    title: string
    content: string
    date?: Date | string | null
    type: string
    createdAt?: Date | string
  }

  export type NoteCreateOrConnectWithoutLinksInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutLinksInput, NoteUncheckedCreateWithoutLinksInput>
  }

  export type HighlightCreateWithoutLinksInput = {
    id?: string
    page: number
    text: string
    coords?: string | null
    createdAt?: Date | string
    pdf: PDFCreateNestedOneWithoutHighlightsInput
  }

  export type HighlightUncheckedCreateWithoutLinksInput = {
    id?: string
    pdfId: string
    page: number
    text: string
    coords?: string | null
    createdAt?: Date | string
  }

  export type HighlightCreateOrConnectWithoutLinksInput = {
    where: HighlightWhereUniqueInput
    create: XOR<HighlightCreateWithoutLinksInput, HighlightUncheckedCreateWithoutLinksInput>
  }

  export type DatabaseEntryCreateWithoutLinksInput = {
    id?: string
    type: string
    name: string
    description?: string | null
    properties?: string | null
    molecularWeight?: number | null
    concentration?: string | null
    storage?: string | null
    supplier?: string | null
    catalogNumber?: string | null
    purity?: string | null
    sequence?: string | null
    organism?: string | null
    function?: string | null
    protocol?: string | null
    equipment?: string | null
    duration?: string | null
    temperature?: string | null
    pH?: string | null
    createdAt?: Date | string
    metadata?: string | null
    relatedResearch?: string | null
    relatedLitNotes?: LiteratureNoteCreateNestedManyWithoutRelatedEntriesInput
  }

  export type DatabaseEntryUncheckedCreateWithoutLinksInput = {
    id?: string
    type: string
    name: string
    description?: string | null
    properties?: string | null
    molecularWeight?: number | null
    concentration?: string | null
    storage?: string | null
    supplier?: string | null
    catalogNumber?: string | null
    purity?: string | null
    sequence?: string | null
    organism?: string | null
    function?: string | null
    protocol?: string | null
    equipment?: string | null
    duration?: string | null
    temperature?: string | null
    pH?: string | null
    createdAt?: Date | string
    metadata?: string | null
    relatedResearch?: string | null
    relatedLitNotes?: LiteratureNoteUncheckedCreateNestedManyWithoutRelatedEntriesInput
  }

  export type DatabaseEntryCreateOrConnectWithoutLinksInput = {
    where: DatabaseEntryWhereUniqueInput
    create: XOR<DatabaseEntryCreateWithoutLinksInput, DatabaseEntryUncheckedCreateWithoutLinksInput>
  }

  export type TableCreateWithoutLinksInput = {
    id?: string
    name: string
    description?: string | null
    columns: string
    createdAt?: Date | string
    updatedAt?: Date | string
    experiment?: ExperimentCreateNestedOneWithoutTablesInput
    rows?: TableRowCreateNestedManyWithoutTableInput
  }

  export type TableUncheckedCreateWithoutLinksInput = {
    id?: string
    name: string
    description?: string | null
    experimentId?: string | null
    columns: string
    createdAt?: Date | string
    updatedAt?: Date | string
    rows?: TableRowUncheckedCreateNestedManyWithoutTableInput
  }

  export type TableCreateOrConnectWithoutLinksInput = {
    where: TableWhereUniqueInput
    create: XOR<TableCreateWithoutLinksInput, TableUncheckedCreateWithoutLinksInput>
  }

  export type ProtocolCreateWithoutLinksInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    version?: string
    steps: string
    equipment?: string | null
    reagents?: string | null
    safetyNotes?: string | null
    expectedDuration?: string | null
    difficulty?: string | null
    successRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    executions?: ProtocolExecutionCreateNestedManyWithoutProtocolInput
  }

  export type ProtocolUncheckedCreateWithoutLinksInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    version?: string
    steps: string
    equipment?: string | null
    reagents?: string | null
    safetyNotes?: string | null
    expectedDuration?: string | null
    difficulty?: string | null
    successRate?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    executions?: ProtocolExecutionUncheckedCreateNestedManyWithoutProtocolInput
  }

  export type ProtocolCreateOrConnectWithoutLinksInput = {
    where: ProtocolWhereUniqueInput
    create: XOR<ProtocolCreateWithoutLinksInput, ProtocolUncheckedCreateWithoutLinksInput>
  }

  export type ProtocolExecutionCreateWithoutLinksInput = {
    id?: string
    status: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    notes?: string | null
    modifications?: string | null
    results?: string | null
    issues?: string | null
    nextSteps?: string | null
    executedBy?: string | null
    completedSteps?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    protocol: ProtocolCreateNestedOneWithoutExecutionsInput
    experiment?: ExperimentCreateNestedOneWithoutProtocolExecutionsInput
  }

  export type ProtocolExecutionUncheckedCreateWithoutLinksInput = {
    id?: string
    protocolId: string
    experimentId?: string | null
    status: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    notes?: string | null
    modifications?: string | null
    results?: string | null
    issues?: string | null
    nextSteps?: string | null
    executedBy?: string | null
    completedSteps?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProtocolExecutionCreateOrConnectWithoutLinksInput = {
    where: ProtocolExecutionWhereUniqueInput
    create: XOR<ProtocolExecutionCreateWithoutLinksInput, ProtocolExecutionUncheckedCreateWithoutLinksInput>
  }

  export type NoteUpsertWithoutLinksInput = {
    update: XOR<NoteUpdateWithoutLinksInput, NoteUncheckedUpdateWithoutLinksInput>
    create: XOR<NoteCreateWithoutLinksInput, NoteUncheckedCreateWithoutLinksInput>
    where?: NoteWhereInput
  }

  export type NoteUpdateToOneWithWhereWithoutLinksInput = {
    where?: NoteWhereInput
    data: XOR<NoteUpdateWithoutLinksInput, NoteUncheckedUpdateWithoutLinksInput>
  }

  export type NoteUpdateWithoutLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experiment?: ExperimentUpdateOneWithoutNotesNestedInput
  }

  export type NoteUncheckedUpdateWithoutLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HighlightUpsertWithoutLinksInput = {
    update: XOR<HighlightUpdateWithoutLinksInput, HighlightUncheckedUpdateWithoutLinksInput>
    create: XOR<HighlightCreateWithoutLinksInput, HighlightUncheckedCreateWithoutLinksInput>
    where?: HighlightWhereInput
  }

  export type HighlightUpdateToOneWithWhereWithoutLinksInput = {
    where?: HighlightWhereInput
    data: XOR<HighlightUpdateWithoutLinksInput, HighlightUncheckedUpdateWithoutLinksInput>
  }

  export type HighlightUpdateWithoutLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    page?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    coords?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pdf?: PDFUpdateOneRequiredWithoutHighlightsNestedInput
  }

  export type HighlightUncheckedUpdateWithoutLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    pdfId?: StringFieldUpdateOperationsInput | string
    page?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    coords?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DatabaseEntryUpsertWithoutLinksInput = {
    update: XOR<DatabaseEntryUpdateWithoutLinksInput, DatabaseEntryUncheckedUpdateWithoutLinksInput>
    create: XOR<DatabaseEntryCreateWithoutLinksInput, DatabaseEntryUncheckedCreateWithoutLinksInput>
    where?: DatabaseEntryWhereInput
  }

  export type DatabaseEntryUpdateToOneWithWhereWithoutLinksInput = {
    where?: DatabaseEntryWhereInput
    data: XOR<DatabaseEntryUpdateWithoutLinksInput, DatabaseEntryUncheckedUpdateWithoutLinksInput>
  }

  export type DatabaseEntryUpdateWithoutLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    properties?: NullableStringFieldUpdateOperationsInput | string | null
    molecularWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    storage?: NullableStringFieldUpdateOperationsInput | string | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    catalogNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purity?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: NullableStringFieldUpdateOperationsInput | string | null
    organism?: NullableStringFieldUpdateOperationsInput | string | null
    function?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableStringFieldUpdateOperationsInput | string | null
    equipment?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    pH?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    relatedResearch?: NullableStringFieldUpdateOperationsInput | string | null
    relatedLitNotes?: LiteratureNoteUpdateManyWithoutRelatedEntriesNestedInput
  }

  export type DatabaseEntryUncheckedUpdateWithoutLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    properties?: NullableStringFieldUpdateOperationsInput | string | null
    molecularWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    storage?: NullableStringFieldUpdateOperationsInput | string | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    catalogNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purity?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: NullableStringFieldUpdateOperationsInput | string | null
    organism?: NullableStringFieldUpdateOperationsInput | string | null
    function?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableStringFieldUpdateOperationsInput | string | null
    equipment?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    pH?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    relatedResearch?: NullableStringFieldUpdateOperationsInput | string | null
    relatedLitNotes?: LiteratureNoteUncheckedUpdateManyWithoutRelatedEntriesNestedInput
  }

  export type TableUpsertWithoutLinksInput = {
    update: XOR<TableUpdateWithoutLinksInput, TableUncheckedUpdateWithoutLinksInput>
    create: XOR<TableCreateWithoutLinksInput, TableUncheckedCreateWithoutLinksInput>
    where?: TableWhereInput
  }

  export type TableUpdateToOneWithWhereWithoutLinksInput = {
    where?: TableWhereInput
    data: XOR<TableUpdateWithoutLinksInput, TableUncheckedUpdateWithoutLinksInput>
  }

  export type TableUpdateWithoutLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    columns?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experiment?: ExperimentUpdateOneWithoutTablesNestedInput
    rows?: TableRowUpdateManyWithoutTableNestedInput
  }

  export type TableUncheckedUpdateWithoutLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    columns?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rows?: TableRowUncheckedUpdateManyWithoutTableNestedInput
  }

  export type ProtocolUpsertWithoutLinksInput = {
    update: XOR<ProtocolUpdateWithoutLinksInput, ProtocolUncheckedUpdateWithoutLinksInput>
    create: XOR<ProtocolCreateWithoutLinksInput, ProtocolUncheckedCreateWithoutLinksInput>
    where?: ProtocolWhereInput
  }

  export type ProtocolUpdateToOneWithWhereWithoutLinksInput = {
    where?: ProtocolWhereInput
    data: XOR<ProtocolUpdateWithoutLinksInput, ProtocolUncheckedUpdateWithoutLinksInput>
  }

  export type ProtocolUpdateWithoutLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    equipment?: NullableStringFieldUpdateOperationsInput | string | null
    reagents?: NullableStringFieldUpdateOperationsInput | string | null
    safetyNotes?: NullableStringFieldUpdateOperationsInput | string | null
    expectedDuration?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    successRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    executions?: ProtocolExecutionUpdateManyWithoutProtocolNestedInput
  }

  export type ProtocolUncheckedUpdateWithoutLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    equipment?: NullableStringFieldUpdateOperationsInput | string | null
    reagents?: NullableStringFieldUpdateOperationsInput | string | null
    safetyNotes?: NullableStringFieldUpdateOperationsInput | string | null
    expectedDuration?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    successRate?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    executions?: ProtocolExecutionUncheckedUpdateManyWithoutProtocolNestedInput
  }

  export type ProtocolExecutionUpsertWithoutLinksInput = {
    update: XOR<ProtocolExecutionUpdateWithoutLinksInput, ProtocolExecutionUncheckedUpdateWithoutLinksInput>
    create: XOR<ProtocolExecutionCreateWithoutLinksInput, ProtocolExecutionUncheckedCreateWithoutLinksInput>
    where?: ProtocolExecutionWhereInput
  }

  export type ProtocolExecutionUpdateToOneWithWhereWithoutLinksInput = {
    where?: ProtocolExecutionWhereInput
    data: XOR<ProtocolExecutionUpdateWithoutLinksInput, ProtocolExecutionUncheckedUpdateWithoutLinksInput>
  }

  export type ProtocolExecutionUpdateWithoutLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    modifications?: NullableStringFieldUpdateOperationsInput | string | null
    results?: NullableStringFieldUpdateOperationsInput | string | null
    issues?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: NullableStringFieldUpdateOperationsInput | string | null
    executedBy?: NullableStringFieldUpdateOperationsInput | string | null
    completedSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    protocol?: ProtocolUpdateOneRequiredWithoutExecutionsNestedInput
    experiment?: ExperimentUpdateOneWithoutProtocolExecutionsNestedInput
  }

  export type ProtocolExecutionUncheckedUpdateWithoutLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    protocolId?: StringFieldUpdateOperationsInput | string
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    modifications?: NullableStringFieldUpdateOperationsInput | string | null
    results?: NullableStringFieldUpdateOperationsInput | string | null
    issues?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: NullableStringFieldUpdateOperationsInput | string | null
    executedBy?: NullableStringFieldUpdateOperationsInput | string | null
    completedSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecipeIngredientCreateWithoutRecipeInput = {
    id?: string
    name: string
    amount: number
    unit: string
    concentration?: string | null
    supplier?: string | null
    catalogNumber?: string | null
    notes?: string | null
  }

  export type RecipeIngredientUncheckedCreateWithoutRecipeInput = {
    id?: string
    name: string
    amount: number
    unit: string
    concentration?: string | null
    supplier?: string | null
    catalogNumber?: string | null
    notes?: string | null
  }

  export type RecipeIngredientCreateOrConnectWithoutRecipeInput = {
    where: RecipeIngredientWhereUniqueInput
    create: XOR<RecipeIngredientCreateWithoutRecipeInput, RecipeIngredientUncheckedCreateWithoutRecipeInput>
  }

  export type RecipeIngredientCreateManyRecipeInputEnvelope = {
    data: RecipeIngredientCreateManyRecipeInput | RecipeIngredientCreateManyRecipeInput[]
  }

  export type RecipeExecutionCreateWithoutRecipeInput = {
    id?: string
    status: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    notes?: string | null
    completedSteps?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    experiment?: ExperimentCreateNestedOneWithoutRecipeExecutionsInput
  }

  export type RecipeExecutionUncheckedCreateWithoutRecipeInput = {
    id?: string
    experimentId?: string | null
    status: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    notes?: string | null
    completedSteps?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecipeExecutionCreateOrConnectWithoutRecipeInput = {
    where: RecipeExecutionWhereUniqueInput
    create: XOR<RecipeExecutionCreateWithoutRecipeInput, RecipeExecutionUncheckedCreateWithoutRecipeInput>
  }

  export type RecipeExecutionCreateManyRecipeInputEnvelope = {
    data: RecipeExecutionCreateManyRecipeInput | RecipeExecutionCreateManyRecipeInput[]
  }

  export type RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInput = {
    where: RecipeIngredientWhereUniqueInput
    update: XOR<RecipeIngredientUpdateWithoutRecipeInput, RecipeIngredientUncheckedUpdateWithoutRecipeInput>
    create: XOR<RecipeIngredientCreateWithoutRecipeInput, RecipeIngredientUncheckedCreateWithoutRecipeInput>
  }

  export type RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInput = {
    where: RecipeIngredientWhereUniqueInput
    data: XOR<RecipeIngredientUpdateWithoutRecipeInput, RecipeIngredientUncheckedUpdateWithoutRecipeInput>
  }

  export type RecipeIngredientUpdateManyWithWhereWithoutRecipeInput = {
    where: RecipeIngredientScalarWhereInput
    data: XOR<RecipeIngredientUpdateManyMutationInput, RecipeIngredientUncheckedUpdateManyWithoutRecipeInput>
  }

  export type RecipeIngredientScalarWhereInput = {
    AND?: RecipeIngredientScalarWhereInput | RecipeIngredientScalarWhereInput[]
    OR?: RecipeIngredientScalarWhereInput[]
    NOT?: RecipeIngredientScalarWhereInput | RecipeIngredientScalarWhereInput[]
    id?: StringFilter<"RecipeIngredient"> | string
    recipeId?: StringFilter<"RecipeIngredient"> | string
    name?: StringFilter<"RecipeIngredient"> | string
    amount?: FloatFilter<"RecipeIngredient"> | number
    unit?: StringFilter<"RecipeIngredient"> | string
    concentration?: StringNullableFilter<"RecipeIngredient"> | string | null
    supplier?: StringNullableFilter<"RecipeIngredient"> | string | null
    catalogNumber?: StringNullableFilter<"RecipeIngredient"> | string | null
    notes?: StringNullableFilter<"RecipeIngredient"> | string | null
  }

  export type RecipeExecutionUpsertWithWhereUniqueWithoutRecipeInput = {
    where: RecipeExecutionWhereUniqueInput
    update: XOR<RecipeExecutionUpdateWithoutRecipeInput, RecipeExecutionUncheckedUpdateWithoutRecipeInput>
    create: XOR<RecipeExecutionCreateWithoutRecipeInput, RecipeExecutionUncheckedCreateWithoutRecipeInput>
  }

  export type RecipeExecutionUpdateWithWhereUniqueWithoutRecipeInput = {
    where: RecipeExecutionWhereUniqueInput
    data: XOR<RecipeExecutionUpdateWithoutRecipeInput, RecipeExecutionUncheckedUpdateWithoutRecipeInput>
  }

  export type RecipeExecutionUpdateManyWithWhereWithoutRecipeInput = {
    where: RecipeExecutionScalarWhereInput
    data: XOR<RecipeExecutionUpdateManyMutationInput, RecipeExecutionUncheckedUpdateManyWithoutRecipeInput>
  }

  export type RecipeCreateWithoutIngredientsInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    type: string
    steps?: string | null
    instructions?: string | null
    notes?: string | null
    pH?: number | null
    osmolarity?: string | null
    storage?: string | null
    shelfLife?: string | null
    source?: string | null
    version?: string
    isPublic?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    recipeExecutions?: RecipeExecutionCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUncheckedCreateWithoutIngredientsInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    type: string
    steps?: string | null
    instructions?: string | null
    notes?: string | null
    pH?: number | null
    osmolarity?: string | null
    storage?: string | null
    shelfLife?: string | null
    source?: string | null
    version?: string
    isPublic?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    recipeExecutions?: RecipeExecutionUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type RecipeCreateOrConnectWithoutIngredientsInput = {
    where: RecipeWhereUniqueInput
    create: XOR<RecipeCreateWithoutIngredientsInput, RecipeUncheckedCreateWithoutIngredientsInput>
  }

  export type RecipeUpsertWithoutIngredientsInput = {
    update: XOR<RecipeUpdateWithoutIngredientsInput, RecipeUncheckedUpdateWithoutIngredientsInput>
    create: XOR<RecipeCreateWithoutIngredientsInput, RecipeUncheckedCreateWithoutIngredientsInput>
    where?: RecipeWhereInput
  }

  export type RecipeUpdateToOneWithWhereWithoutIngredientsInput = {
    where?: RecipeWhereInput
    data: XOR<RecipeUpdateWithoutIngredientsInput, RecipeUncheckedUpdateWithoutIngredientsInput>
  }

  export type RecipeUpdateWithoutIngredientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    steps?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    pH?: NullableFloatFieldUpdateOperationsInput | number | null
    osmolarity?: NullableStringFieldUpdateOperationsInput | string | null
    storage?: NullableStringFieldUpdateOperationsInput | string | null
    shelfLife?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    version?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recipeExecutions?: RecipeExecutionUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateWithoutIngredientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    steps?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    pH?: NullableFloatFieldUpdateOperationsInput | number | null
    osmolarity?: NullableStringFieldUpdateOperationsInput | string | null
    storage?: NullableStringFieldUpdateOperationsInput | string | null
    shelfLife?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    version?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recipeExecutions?: RecipeExecutionUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type ProjectCreateWithoutTasksInput = {
    id?: string
    name: string
    description?: string | null
    status?: string
    startDate?: Date | string | null
    lastActivity?: Date | string | null
    createdAt?: Date | string
    experiments?: ExperimentCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutTasksInput = {
    id?: string
    name: string
    description?: string | null
    status?: string
    startDate?: Date | string | null
    lastActivity?: Date | string | null
    createdAt?: Date | string
    experiments?: ExperimentUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutTasksInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutTasksInput, ProjectUncheckedCreateWithoutTasksInput>
  }

  export type ExperimentCreateWithoutTasksInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    project: ProjectCreateNestedOneWithoutExperimentsInput
    notes?: NoteCreateNestedManyWithoutExperimentInput
    tables?: TableCreateNestedManyWithoutExperimentInput
    protocolExecutions?: ProtocolExecutionCreateNestedManyWithoutExperimentInput
    recipeExecutions?: RecipeExecutionCreateNestedManyWithoutExperimentInput
  }

  export type ExperimentUncheckedCreateWithoutTasksInput = {
    id?: string
    projectId: string
    name: string
    description?: string | null
    createdAt?: Date | string
    notes?: NoteUncheckedCreateNestedManyWithoutExperimentInput
    tables?: TableUncheckedCreateNestedManyWithoutExperimentInput
    protocolExecutions?: ProtocolExecutionUncheckedCreateNestedManyWithoutExperimentInput
    recipeExecutions?: RecipeExecutionUncheckedCreateNestedManyWithoutExperimentInput
  }

  export type ExperimentCreateOrConnectWithoutTasksInput = {
    where: ExperimentWhereUniqueInput
    create: XOR<ExperimentCreateWithoutTasksInput, ExperimentUncheckedCreateWithoutTasksInput>
  }

  export type ProjectUpsertWithoutTasksInput = {
    update: XOR<ProjectUpdateWithoutTasksInput, ProjectUncheckedUpdateWithoutTasksInput>
    create: XOR<ProjectCreateWithoutTasksInput, ProjectUncheckedCreateWithoutTasksInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutTasksInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutTasksInput, ProjectUncheckedUpdateWithoutTasksInput>
  }

  export type ProjectUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experiments?: ExperimentUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experiments?: ExperimentUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ExperimentUpsertWithoutTasksInput = {
    update: XOR<ExperimentUpdateWithoutTasksInput, ExperimentUncheckedUpdateWithoutTasksInput>
    create: XOR<ExperimentCreateWithoutTasksInput, ExperimentUncheckedCreateWithoutTasksInput>
    where?: ExperimentWhereInput
  }

  export type ExperimentUpdateToOneWithWhereWithoutTasksInput = {
    where?: ExperimentWhereInput
    data: XOR<ExperimentUpdateWithoutTasksInput, ExperimentUncheckedUpdateWithoutTasksInput>
  }

  export type ExperimentUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutExperimentsNestedInput
    notes?: NoteUpdateManyWithoutExperimentNestedInput
    tables?: TableUpdateManyWithoutExperimentNestedInput
    protocolExecutions?: ProtocolExecutionUpdateManyWithoutExperimentNestedInput
    recipeExecutions?: RecipeExecutionUpdateManyWithoutExperimentNestedInput
  }

  export type ExperimentUncheckedUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NoteUncheckedUpdateManyWithoutExperimentNestedInput
    tables?: TableUncheckedUpdateManyWithoutExperimentNestedInput
    protocolExecutions?: ProtocolExecutionUncheckedUpdateManyWithoutExperimentNestedInput
    recipeExecutions?: RecipeExecutionUncheckedUpdateManyWithoutExperimentNestedInput
  }

  export type RecipeCreateWithoutRecipeExecutionsInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    type: string
    steps?: string | null
    instructions?: string | null
    notes?: string | null
    pH?: number | null
    osmolarity?: string | null
    storage?: string | null
    shelfLife?: string | null
    source?: string | null
    version?: string
    isPublic?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ingredients?: RecipeIngredientCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUncheckedCreateWithoutRecipeExecutionsInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    type: string
    steps?: string | null
    instructions?: string | null
    notes?: string | null
    pH?: number | null
    osmolarity?: string | null
    storage?: string | null
    shelfLife?: string | null
    source?: string | null
    version?: string
    isPublic?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ingredients?: RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type RecipeCreateOrConnectWithoutRecipeExecutionsInput = {
    where: RecipeWhereUniqueInput
    create: XOR<RecipeCreateWithoutRecipeExecutionsInput, RecipeUncheckedCreateWithoutRecipeExecutionsInput>
  }

  export type ExperimentCreateWithoutRecipeExecutionsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    project: ProjectCreateNestedOneWithoutExperimentsInput
    notes?: NoteCreateNestedManyWithoutExperimentInput
    tables?: TableCreateNestedManyWithoutExperimentInput
    protocolExecutions?: ProtocolExecutionCreateNestedManyWithoutExperimentInput
    tasks?: TaskCreateNestedManyWithoutExperimentInput
  }

  export type ExperimentUncheckedCreateWithoutRecipeExecutionsInput = {
    id?: string
    projectId: string
    name: string
    description?: string | null
    createdAt?: Date | string
    notes?: NoteUncheckedCreateNestedManyWithoutExperimentInput
    tables?: TableUncheckedCreateNestedManyWithoutExperimentInput
    protocolExecutions?: ProtocolExecutionUncheckedCreateNestedManyWithoutExperimentInput
    tasks?: TaskUncheckedCreateNestedManyWithoutExperimentInput
  }

  export type ExperimentCreateOrConnectWithoutRecipeExecutionsInput = {
    where: ExperimentWhereUniqueInput
    create: XOR<ExperimentCreateWithoutRecipeExecutionsInput, ExperimentUncheckedCreateWithoutRecipeExecutionsInput>
  }

  export type RecipeUpsertWithoutRecipeExecutionsInput = {
    update: XOR<RecipeUpdateWithoutRecipeExecutionsInput, RecipeUncheckedUpdateWithoutRecipeExecutionsInput>
    create: XOR<RecipeCreateWithoutRecipeExecutionsInput, RecipeUncheckedCreateWithoutRecipeExecutionsInput>
    where?: RecipeWhereInput
  }

  export type RecipeUpdateToOneWithWhereWithoutRecipeExecutionsInput = {
    where?: RecipeWhereInput
    data: XOR<RecipeUpdateWithoutRecipeExecutionsInput, RecipeUncheckedUpdateWithoutRecipeExecutionsInput>
  }

  export type RecipeUpdateWithoutRecipeExecutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    steps?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    pH?: NullableFloatFieldUpdateOperationsInput | number | null
    osmolarity?: NullableStringFieldUpdateOperationsInput | string | null
    storage?: NullableStringFieldUpdateOperationsInput | string | null
    shelfLife?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    version?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ingredients?: RecipeIngredientUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateWithoutRecipeExecutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    steps?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    pH?: NullableFloatFieldUpdateOperationsInput | number | null
    osmolarity?: NullableStringFieldUpdateOperationsInput | string | null
    storage?: NullableStringFieldUpdateOperationsInput | string | null
    shelfLife?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    version?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ingredients?: RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type ExperimentUpsertWithoutRecipeExecutionsInput = {
    update: XOR<ExperimentUpdateWithoutRecipeExecutionsInput, ExperimentUncheckedUpdateWithoutRecipeExecutionsInput>
    create: XOR<ExperimentCreateWithoutRecipeExecutionsInput, ExperimentUncheckedCreateWithoutRecipeExecutionsInput>
    where?: ExperimentWhereInput
  }

  export type ExperimentUpdateToOneWithWhereWithoutRecipeExecutionsInput = {
    where?: ExperimentWhereInput
    data: XOR<ExperimentUpdateWithoutRecipeExecutionsInput, ExperimentUncheckedUpdateWithoutRecipeExecutionsInput>
  }

  export type ExperimentUpdateWithoutRecipeExecutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutExperimentsNestedInput
    notes?: NoteUpdateManyWithoutExperimentNestedInput
    tables?: TableUpdateManyWithoutExperimentNestedInput
    protocolExecutions?: ProtocolExecutionUpdateManyWithoutExperimentNestedInput
    tasks?: TaskUpdateManyWithoutExperimentNestedInput
  }

  export type ExperimentUncheckedUpdateWithoutRecipeExecutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NoteUncheckedUpdateManyWithoutExperimentNestedInput
    tables?: TableUncheckedUpdateManyWithoutExperimentNestedInput
    protocolExecutions?: ProtocolExecutionUncheckedUpdateManyWithoutExperimentNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutExperimentNestedInput
  }

  export type ExperimentCreateManyProjectInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
  }

  export type TaskCreateManyProjectInput = {
    id?: string
    title: string
    description?: string | null
    status: string
    priority: string
    deadline?: Date | string | null
    createdAt?: Date | string
    completedAt?: Date | string | null
    autoGenerated?: boolean
    experimentId?: string | null
  }

  export type ExperimentUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NoteUpdateManyWithoutExperimentNestedInput
    tables?: TableUpdateManyWithoutExperimentNestedInput
    protocolExecutions?: ProtocolExecutionUpdateManyWithoutExperimentNestedInput
    tasks?: TaskUpdateManyWithoutExperimentNestedInput
    recipeExecutions?: RecipeExecutionUpdateManyWithoutExperimentNestedInput
  }

  export type ExperimentUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NoteUncheckedUpdateManyWithoutExperimentNestedInput
    tables?: TableUncheckedUpdateManyWithoutExperimentNestedInput
    protocolExecutions?: ProtocolExecutionUncheckedUpdateManyWithoutExperimentNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutExperimentNestedInput
    recipeExecutions?: RecipeExecutionUncheckedUpdateManyWithoutExperimentNestedInput
  }

  export type ExperimentUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoGenerated?: BoolFieldUpdateOperationsInput | boolean
    experiment?: ExperimentUpdateOneWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoGenerated?: BoolFieldUpdateOperationsInput | boolean
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TaskUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoGenerated?: BoolFieldUpdateOperationsInput | boolean
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NoteCreateManyExperimentInput = {
    id?: string
    title: string
    content: string
    date?: Date | string | null
    type: string
    createdAt?: Date | string
  }

  export type TableCreateManyExperimentInput = {
    id?: string
    name: string
    description?: string | null
    columns: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProtocolExecutionCreateManyExperimentInput = {
    id?: string
    protocolId: string
    status: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    notes?: string | null
    modifications?: string | null
    results?: string | null
    issues?: string | null
    nextSteps?: string | null
    executedBy?: string | null
    completedSteps?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskCreateManyExperimentInput = {
    id?: string
    title: string
    description?: string | null
    status: string
    priority: string
    deadline?: Date | string | null
    createdAt?: Date | string
    completedAt?: Date | string | null
    autoGenerated?: boolean
    projectId: string
  }

  export type RecipeExecutionCreateManyExperimentInput = {
    id?: string
    recipeId: string
    status: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    notes?: string | null
    completedSteps?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NoteUpdateWithoutExperimentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    links?: LinkUpdateManyWithoutNoteNestedInput
  }

  export type NoteUncheckedUpdateWithoutExperimentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    links?: LinkUncheckedUpdateManyWithoutNoteNestedInput
  }

  export type NoteUncheckedUpdateManyWithoutExperimentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TableUpdateWithoutExperimentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    columns?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rows?: TableRowUpdateManyWithoutTableNestedInput
    links?: LinkUpdateManyWithoutTableNestedInput
  }

  export type TableUncheckedUpdateWithoutExperimentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    columns?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rows?: TableRowUncheckedUpdateManyWithoutTableNestedInput
    links?: LinkUncheckedUpdateManyWithoutTableNestedInput
  }

  export type TableUncheckedUpdateManyWithoutExperimentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    columns?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProtocolExecutionUpdateWithoutExperimentInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    modifications?: NullableStringFieldUpdateOperationsInput | string | null
    results?: NullableStringFieldUpdateOperationsInput | string | null
    issues?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: NullableStringFieldUpdateOperationsInput | string | null
    executedBy?: NullableStringFieldUpdateOperationsInput | string | null
    completedSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    protocol?: ProtocolUpdateOneRequiredWithoutExecutionsNestedInput
    links?: LinkUpdateManyWithoutProtocolExecutionNestedInput
  }

  export type ProtocolExecutionUncheckedUpdateWithoutExperimentInput = {
    id?: StringFieldUpdateOperationsInput | string
    protocolId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    modifications?: NullableStringFieldUpdateOperationsInput | string | null
    results?: NullableStringFieldUpdateOperationsInput | string | null
    issues?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: NullableStringFieldUpdateOperationsInput | string | null
    executedBy?: NullableStringFieldUpdateOperationsInput | string | null
    completedSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    links?: LinkUncheckedUpdateManyWithoutProtocolExecutionNestedInput
  }

  export type ProtocolExecutionUncheckedUpdateManyWithoutExperimentInput = {
    id?: StringFieldUpdateOperationsInput | string
    protocolId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    modifications?: NullableStringFieldUpdateOperationsInput | string | null
    results?: NullableStringFieldUpdateOperationsInput | string | null
    issues?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: NullableStringFieldUpdateOperationsInput | string | null
    executedBy?: NullableStringFieldUpdateOperationsInput | string | null
    completedSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUpdateWithoutExperimentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoGenerated?: BoolFieldUpdateOperationsInput | boolean
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateWithoutExperimentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoGenerated?: BoolFieldUpdateOperationsInput | boolean
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type TaskUncheckedUpdateManyWithoutExperimentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    deadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    autoGenerated?: BoolFieldUpdateOperationsInput | boolean
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type RecipeExecutionUpdateWithoutExperimentInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    completedSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recipe?: RecipeUpdateOneRequiredWithoutRecipeExecutionsNestedInput
  }

  export type RecipeExecutionUncheckedUpdateWithoutExperimentInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    completedSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecipeExecutionUncheckedUpdateManyWithoutExperimentInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    completedSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LinkCreateManyNoteInput = {
    id?: string
    sourceType: string
    targetType: string
    targetId: string
    createdAt?: Date | string
  }

  export type LinkUpdateWithoutNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    highlight?: HighlightUpdateOneWithoutLinksNestedInput
    databaseEntry?: DatabaseEntryUpdateOneWithoutLinksNestedInput
    table?: TableUpdateOneWithoutLinksNestedInput
    protocol?: ProtocolUpdateOneWithoutLinksNestedInput
    protocolExecution?: ProtocolExecutionUpdateOneWithoutLinksNestedInput
  }

  export type LinkUncheckedUpdateWithoutNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LinkUncheckedUpdateManyWithoutNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HighlightCreateManyPdfInput = {
    id?: string
    page: number
    text: string
    coords?: string | null
    createdAt?: Date | string
  }

  export type HighlightUpdateWithoutPdfInput = {
    id?: StringFieldUpdateOperationsInput | string
    page?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    coords?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    links?: LinkUpdateManyWithoutHighlightNestedInput
  }

  export type HighlightUncheckedUpdateWithoutPdfInput = {
    id?: StringFieldUpdateOperationsInput | string
    page?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    coords?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    links?: LinkUncheckedUpdateManyWithoutHighlightNestedInput
  }

  export type HighlightUncheckedUpdateManyWithoutPdfInput = {
    id?: StringFieldUpdateOperationsInput | string
    page?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    coords?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LinkCreateManyHighlightInput = {
    id?: string
    sourceType: string
    targetType: string
    targetId: string
    createdAt?: Date | string
  }

  export type LinkUpdateWithoutHighlightInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NoteUpdateOneWithoutLinksNestedInput
    databaseEntry?: DatabaseEntryUpdateOneWithoutLinksNestedInput
    table?: TableUpdateOneWithoutLinksNestedInput
    protocol?: ProtocolUpdateOneWithoutLinksNestedInput
    protocolExecution?: ProtocolExecutionUpdateOneWithoutLinksNestedInput
  }

  export type LinkUncheckedUpdateWithoutHighlightInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LinkUncheckedUpdateManyWithoutHighlightInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DatabaseEntryUpdateWithoutRelatedLitNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    properties?: NullableStringFieldUpdateOperationsInput | string | null
    molecularWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    storage?: NullableStringFieldUpdateOperationsInput | string | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    catalogNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purity?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: NullableStringFieldUpdateOperationsInput | string | null
    organism?: NullableStringFieldUpdateOperationsInput | string | null
    function?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableStringFieldUpdateOperationsInput | string | null
    equipment?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    pH?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    relatedResearch?: NullableStringFieldUpdateOperationsInput | string | null
    links?: LinkUpdateManyWithoutDatabaseEntryNestedInput
  }

  export type DatabaseEntryUncheckedUpdateWithoutRelatedLitNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    properties?: NullableStringFieldUpdateOperationsInput | string | null
    molecularWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    storage?: NullableStringFieldUpdateOperationsInput | string | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    catalogNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purity?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: NullableStringFieldUpdateOperationsInput | string | null
    organism?: NullableStringFieldUpdateOperationsInput | string | null
    function?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableStringFieldUpdateOperationsInput | string | null
    equipment?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    pH?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    relatedResearch?: NullableStringFieldUpdateOperationsInput | string | null
    links?: LinkUncheckedUpdateManyWithoutDatabaseEntryNestedInput
  }

  export type DatabaseEntryUncheckedUpdateManyWithoutRelatedLitNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    properties?: NullableStringFieldUpdateOperationsInput | string | null
    molecularWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    storage?: NullableStringFieldUpdateOperationsInput | string | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    catalogNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purity?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: NullableStringFieldUpdateOperationsInput | string | null
    organism?: NullableStringFieldUpdateOperationsInput | string | null
    function?: NullableStringFieldUpdateOperationsInput | string | null
    protocol?: NullableStringFieldUpdateOperationsInput | string | null
    equipment?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    pH?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    relatedResearch?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LinkCreateManyDatabaseEntryInput = {
    id?: string
    sourceType: string
    targetType: string
    targetId: string
    createdAt?: Date | string
  }

  export type LiteratureNoteUpdateWithoutRelatedEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    authors?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    journal?: NullableStringFieldUpdateOperationsInput | string | null
    doi?: NullableStringFieldUpdateOperationsInput | string | null
    abstract?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    citation?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: NullableStringFieldUpdateOperationsInput | string | null
    userNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LiteratureNoteUncheckedUpdateWithoutRelatedEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    authors?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    journal?: NullableStringFieldUpdateOperationsInput | string | null
    doi?: NullableStringFieldUpdateOperationsInput | string | null
    abstract?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    citation?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: NullableStringFieldUpdateOperationsInput | string | null
    userNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LiteratureNoteUncheckedUpdateManyWithoutRelatedEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    authors?: NullableStringFieldUpdateOperationsInput | string | null
    year?: NullableStringFieldUpdateOperationsInput | string | null
    journal?: NullableStringFieldUpdateOperationsInput | string | null
    doi?: NullableStringFieldUpdateOperationsInput | string | null
    abstract?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    citation?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: NullableStringFieldUpdateOperationsInput | string | null
    userNote?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LinkUpdateWithoutDatabaseEntryInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NoteUpdateOneWithoutLinksNestedInput
    highlight?: HighlightUpdateOneWithoutLinksNestedInput
    table?: TableUpdateOneWithoutLinksNestedInput
    protocol?: ProtocolUpdateOneWithoutLinksNestedInput
    protocolExecution?: ProtocolExecutionUpdateOneWithoutLinksNestedInput
  }

  export type LinkUncheckedUpdateWithoutDatabaseEntryInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LinkUncheckedUpdateManyWithoutDatabaseEntryInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TableRowCreateManyTableInput = {
    id?: string
    data: string
    rowNumber: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LinkCreateManyTableInput = {
    id?: string
    sourceType: string
    targetType: string
    targetId: string
    createdAt?: Date | string
  }

  export type TableRowUpdateWithoutTableInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    rowNumber?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TableRowUncheckedUpdateWithoutTableInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    rowNumber?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TableRowUncheckedUpdateManyWithoutTableInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    rowNumber?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LinkUpdateWithoutTableInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NoteUpdateOneWithoutLinksNestedInput
    highlight?: HighlightUpdateOneWithoutLinksNestedInput
    databaseEntry?: DatabaseEntryUpdateOneWithoutLinksNestedInput
    protocol?: ProtocolUpdateOneWithoutLinksNestedInput
    protocolExecution?: ProtocolExecutionUpdateOneWithoutLinksNestedInput
  }

  export type LinkUncheckedUpdateWithoutTableInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LinkUncheckedUpdateManyWithoutTableInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProtocolExecutionCreateManyProtocolInput = {
    id?: string
    experimentId?: string | null
    status: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    notes?: string | null
    modifications?: string | null
    results?: string | null
    issues?: string | null
    nextSteps?: string | null
    executedBy?: string | null
    completedSteps?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LinkCreateManyProtocolInput = {
    id?: string
    sourceType: string
    targetType: string
    targetId: string
    createdAt?: Date | string
  }

  export type ProtocolExecutionUpdateWithoutProtocolInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    modifications?: NullableStringFieldUpdateOperationsInput | string | null
    results?: NullableStringFieldUpdateOperationsInput | string | null
    issues?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: NullableStringFieldUpdateOperationsInput | string | null
    executedBy?: NullableStringFieldUpdateOperationsInput | string | null
    completedSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experiment?: ExperimentUpdateOneWithoutProtocolExecutionsNestedInput
    links?: LinkUpdateManyWithoutProtocolExecutionNestedInput
  }

  export type ProtocolExecutionUncheckedUpdateWithoutProtocolInput = {
    id?: StringFieldUpdateOperationsInput | string
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    modifications?: NullableStringFieldUpdateOperationsInput | string | null
    results?: NullableStringFieldUpdateOperationsInput | string | null
    issues?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: NullableStringFieldUpdateOperationsInput | string | null
    executedBy?: NullableStringFieldUpdateOperationsInput | string | null
    completedSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    links?: LinkUncheckedUpdateManyWithoutProtocolExecutionNestedInput
  }

  export type ProtocolExecutionUncheckedUpdateManyWithoutProtocolInput = {
    id?: StringFieldUpdateOperationsInput | string
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    modifications?: NullableStringFieldUpdateOperationsInput | string | null
    results?: NullableStringFieldUpdateOperationsInput | string | null
    issues?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: NullableStringFieldUpdateOperationsInput | string | null
    executedBy?: NullableStringFieldUpdateOperationsInput | string | null
    completedSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LinkUpdateWithoutProtocolInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NoteUpdateOneWithoutLinksNestedInput
    highlight?: HighlightUpdateOneWithoutLinksNestedInput
    databaseEntry?: DatabaseEntryUpdateOneWithoutLinksNestedInput
    table?: TableUpdateOneWithoutLinksNestedInput
    protocolExecution?: ProtocolExecutionUpdateOneWithoutLinksNestedInput
  }

  export type LinkUncheckedUpdateWithoutProtocolInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LinkUncheckedUpdateManyWithoutProtocolInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LinkCreateManyProtocolExecutionInput = {
    id?: string
    sourceType: string
    targetType: string
    targetId: string
    createdAt?: Date | string
  }

  export type LinkUpdateWithoutProtocolExecutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NoteUpdateOneWithoutLinksNestedInput
    highlight?: HighlightUpdateOneWithoutLinksNestedInput
    databaseEntry?: DatabaseEntryUpdateOneWithoutLinksNestedInput
    table?: TableUpdateOneWithoutLinksNestedInput
    protocol?: ProtocolUpdateOneWithoutLinksNestedInput
  }

  export type LinkUncheckedUpdateWithoutProtocolExecutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LinkUncheckedUpdateManyWithoutProtocolExecutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    targetType?: StringFieldUpdateOperationsInput | string
    targetId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecipeIngredientCreateManyRecipeInput = {
    id?: string
    name: string
    amount: number
    unit: string
    concentration?: string | null
    supplier?: string | null
    catalogNumber?: string | null
    notes?: string | null
  }

  export type RecipeExecutionCreateManyRecipeInput = {
    id?: string
    experimentId?: string | null
    status: string
    startDate?: Date | string | null
    endDate?: Date | string | null
    notes?: string | null
    completedSteps?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecipeIngredientUpdateWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    catalogNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecipeIngredientUncheckedUpdateWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    catalogNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecipeIngredientUncheckedUpdateManyWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    supplier?: NullableStringFieldUpdateOperationsInput | string | null
    catalogNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecipeExecutionUpdateWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    completedSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    experiment?: ExperimentUpdateOneWithoutRecipeExecutionsNestedInput
  }

  export type RecipeExecutionUncheckedUpdateWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    completedSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecipeExecutionUncheckedUpdateManyWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    experimentId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    completedSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ProjectCountOutputTypeDefaultArgs instead
     */
    export type ProjectCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExperimentCountOutputTypeDefaultArgs instead
     */
    export type ExperimentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExperimentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NoteCountOutputTypeDefaultArgs instead
     */
    export type NoteCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NoteCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PDFCountOutputTypeDefaultArgs instead
     */
    export type PDFCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PDFCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HighlightCountOutputTypeDefaultArgs instead
     */
    export type HighlightCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HighlightCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LiteratureNoteCountOutputTypeDefaultArgs instead
     */
    export type LiteratureNoteCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LiteratureNoteCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DatabaseEntryCountOutputTypeDefaultArgs instead
     */
    export type DatabaseEntryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DatabaseEntryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TableCountOutputTypeDefaultArgs instead
     */
    export type TableCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TableCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProtocolCountOutputTypeDefaultArgs instead
     */
    export type ProtocolCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProtocolCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProtocolExecutionCountOutputTypeDefaultArgs instead
     */
    export type ProtocolExecutionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProtocolExecutionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RecipeCountOutputTypeDefaultArgs instead
     */
    export type RecipeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RecipeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectDefaultArgs instead
     */
    export type ProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExperimentDefaultArgs instead
     */
    export type ExperimentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExperimentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NoteDefaultArgs instead
     */
    export type NoteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NoteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DailyNoteDefaultArgs instead
     */
    export type DailyNoteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DailyNoteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PDFDefaultArgs instead
     */
    export type PDFArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PDFDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HighlightDefaultArgs instead
     */
    export type HighlightArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HighlightDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LiteratureNoteDefaultArgs instead
     */
    export type LiteratureNoteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LiteratureNoteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DatabaseEntryDefaultArgs instead
     */
    export type DatabaseEntryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DatabaseEntryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TableDefaultArgs instead
     */
    export type TableArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TableDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TableRowDefaultArgs instead
     */
    export type TableRowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TableRowDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProtocolDefaultArgs instead
     */
    export type ProtocolArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProtocolDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProtocolExecutionDefaultArgs instead
     */
    export type ProtocolExecutionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProtocolExecutionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LinkDefaultArgs instead
     */
    export type LinkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LinkDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RecipeDefaultArgs instead
     */
    export type RecipeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RecipeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RecipeIngredientDefaultArgs instead
     */
    export type RecipeIngredientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RecipeIngredientDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CalendarEventDefaultArgs instead
     */
    export type CalendarEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CalendarEventDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TaskDefaultArgs instead
     */
    export type TaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TaskDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RecipeExecutionDefaultArgs instead
     */
    export type RecipeExecutionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RecipeExecutionDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}