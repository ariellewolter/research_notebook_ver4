
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  status: 'status',
  startDate: 'startDate',
  lastActivity: 'lastActivity',
  createdAt: 'createdAt'
};

exports.Prisma.ExperimentScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.NoteScalarFieldEnum = {
  id: 'id',
  experimentId: 'experimentId',
  title: 'title',
  content: 'content',
  date: 'date',
  type: 'type',
  createdAt: 'createdAt'
};

exports.Prisma.DailyNoteScalarFieldEnum = {
  id: 'id',
  date: 'date',
  content: 'content',
  createdAt: 'createdAt'
};

exports.Prisma.PDFScalarFieldEnum = {
  id: 'id',
  filePath: 'filePath',
  title: 'title',
  uploadedAt: 'uploadedAt'
};

exports.Prisma.HighlightScalarFieldEnum = {
  id: 'id',
  pdfId: 'pdfId',
  page: 'page',
  text: 'text',
  coords: 'coords',
  createdAt: 'createdAt'
};

exports.Prisma.LiteratureNoteScalarFieldEnum = {
  id: 'id',
  title: 'title',
  authors: 'authors',
  year: 'year',
  journal: 'journal',
  doi: 'doi',
  abstract: 'abstract',
  tags: 'tags',
  citation: 'citation',
  synonyms: 'synonyms',
  userNote: 'userNote',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DatabaseEntryScalarFieldEnum = {
  id: 'id',
  type: 'type',
  name: 'name',
  description: 'description',
  properties: 'properties',
  molecularWeight: 'molecularWeight',
  concentration: 'concentration',
  storage: 'storage',
  supplier: 'supplier',
  catalogNumber: 'catalogNumber',
  purity: 'purity',
  sequence: 'sequence',
  organism: 'organism',
  function: 'function',
  protocol: 'protocol',
  equipment: 'equipment',
  duration: 'duration',
  temperature: 'temperature',
  pH: 'pH',
  createdAt: 'createdAt',
  metadata: 'metadata',
  relatedResearch: 'relatedResearch'
};

exports.Prisma.TableScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  experimentId: 'experimentId',
  columns: 'columns',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TableRowScalarFieldEnum = {
  id: 'id',
  tableId: 'tableId',
  data: 'data',
  rowNumber: 'rowNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProtocolScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  version: 'version',
  steps: 'steps',
  equipment: 'equipment',
  reagents: 'reagents',
  safetyNotes: 'safetyNotes',
  expectedDuration: 'expectedDuration',
  difficulty: 'difficulty',
  successRate: 'successRate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProtocolExecutionScalarFieldEnum = {
  id: 'id',
  protocolId: 'protocolId',
  experimentId: 'experimentId',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  notes: 'notes',
  modifications: 'modifications',
  results: 'results',
  issues: 'issues',
  nextSteps: 'nextSteps',
  executedBy: 'executedBy',
  completedSteps: 'completedSteps',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LinkScalarFieldEnum = {
  id: 'id',
  sourceType: 'sourceType',
  sourceId: 'sourceId',
  targetType: 'targetType',
  targetId: 'targetId',
  createdAt: 'createdAt'
};

exports.Prisma.RecipeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  type: 'type',
  steps: 'steps',
  instructions: 'instructions',
  notes: 'notes',
  pH: 'pH',
  osmolarity: 'osmolarity',
  storage: 'storage',
  shelfLife: 'shelfLife',
  source: 'source',
  version: 'version',
  isPublic: 'isPublic',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RecipeIngredientScalarFieldEnum = {
  id: 'id',
  recipeId: 'recipeId',
  name: 'name',
  amount: 'amount',
  unit: 'unit',
  concentration: 'concentration',
  supplier: 'supplier',
  catalogNumber: 'catalogNumber',
  notes: 'notes'
};

exports.Prisma.CalendarEventScalarFieldEnum = {
  id: 'id',
  type: 'type',
  title: 'title',
  description: 'description',
  start: 'start',
  end: 'end',
  allDay: 'allDay',
  relatedId: 'relatedId',
  createdAt: 'createdAt',
  metadata: 'metadata'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  status: 'status',
  priority: 'priority',
  deadline: 'deadline',
  createdAt: 'createdAt',
  completedAt: 'completedAt',
  autoGenerated: 'autoGenerated',
  projectId: 'projectId',
  experimentId: 'experimentId'
};

exports.Prisma.RecipeExecutionScalarFieldEnum = {
  id: 'id',
  recipeId: 'recipeId',
  experimentId: 'experimentId',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  notes: 'notes',
  completedSteps: 'completedSteps',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Project: 'Project',
  Experiment: 'Experiment',
  Note: 'Note',
  DailyNote: 'DailyNote',
  PDF: 'PDF',
  Highlight: 'Highlight',
  LiteratureNote: 'LiteratureNote',
  DatabaseEntry: 'DatabaseEntry',
  Table: 'Table',
  TableRow: 'TableRow',
  Protocol: 'Protocol',
  ProtocolExecution: 'ProtocolExecution',
  Link: 'Link',
  Recipe: 'Recipe',
  RecipeIngredient: 'RecipeIngredient',
  CalendarEvent: 'CalendarEvent',
  Task: 'Task',
  RecipeExecution: 'RecipeExecution'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
