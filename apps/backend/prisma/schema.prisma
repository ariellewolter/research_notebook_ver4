generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                  String             @id @default(uuid())
  username            String             @unique
  email               String             @unique
  password            String
  createdAt           DateTime           @default(now())
  googleClientId      String?
  googleClientSecret  String?
  googleTokens        String?
  outlookClientId     String?
  outlookClientSecret String?
  outlookTokens       String?
  customReports       CustomReport[]
  projects            Project[]
  reportExecutions    ReportExecution[]
  reportTemplates     ReportTemplate[]
  savedSearches       SavedSearch[]
  scheduledReports    ScheduledReport[]
  searchHistory       SearchHistory[]
  variableCategories  VariableCategory[]
}

model SavedSearch {
  id          String   @id @default(uuid())
  name        String
  description String?
  searchQuery String
  userId      String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model SearchHistory {
  id        String   @id @default(uuid())
  userId    String
  query     String
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Project {
  id           String       @id @default(uuid())
  name         String
  description  String?
  status       String       @default("active")
  startDate    DateTime?
  lastActivity DateTime?
  createdAt    DateTime     @default(now())
  userId       String
  experiments  Experiment[]
  user         User         @relation(fields: [userId], references: [id])
  tasks        Task[]
}

model Experiment {
  id                 String               @id @default(uuid())
  projectId          String
  name               String
  description        String?
  createdAt          DateTime             @default(now())
  project            Project              @relation(fields: [projectId], references: [id])
  variables          ExperimentVariable[]
  notes              Note[]
  protocolExecutions ProtocolExecution[]
  recipeExecutions   RecipeExecution[]
  tables             Table[]
  tasks              Task[]
}

model Note {
  id           String      @id @default(uuid())
  experimentId String?
  title        String
  content      String
  date         DateTime?
  type         String
  createdAt    DateTime    @default(now())
  // Cloud sync fields
  cloudSynced  Boolean     @default(false)
  cloudPath    String?
  cloudService String?     // 'dropbox', 'google', 'onedrive', 'icloud'
  lastSynced   DateTime?
  syncStatus   String?     // 'pending', 'synced', 'error', 'conflict'
  links        Link[]      @relation("NoteLinks")
  experiment   Experiment? @relation(fields: [experimentId], references: [id])
  tasks        Task[]

  @@index([type])
  @@index([date])
  @@index([createdAt])
  @@index([experimentId])
  @@index([cloudSynced])
  @@index([cloudService])
}

model DailyNote {
  id        String   @id @default(uuid())
  date      DateTime @unique
  content   String
  createdAt DateTime @default(now())
}

model PDF {
  id         String      @id @default(uuid())
  filePath   String
  title      String
  uploadedAt DateTime    @default(now())
  highlights Highlight[]
}

model Highlight {
  id        String   @id @default(uuid())
  pdfId     String
  page      Int
  text      String
  coords    String?
  createdAt DateTime @default(now())
  pdf       PDF      @relation(fields: [pdfId], references: [id])
  links     Link[]   @relation("NoteLinks")
}

model LiteratureNote {
  id             String          @id @default(uuid())
  title          String
  authors        String?
  year           String?
  journal        String?
  doi            String?
  abstract       String?
  tags           String?
  citation       String?
  synonyms       String?
  userNote       String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  relatedEntries DatabaseEntry[] @relation("EntryLitNotes")
}

model DatabaseEntry {
  id              String           @id @default(uuid())
  type            String
  name            String
  description     String?
  properties      String?
  createdAt       DateTime         @default(now())
  catalogNumber   String?
  concentration   String?
  duration        String?
  equipment       String?
  function        String?
  molecularWeight Float?
  organism        String?
  pH              String?
  protocol        String?
  purity          String?
  sequence        String?
  storage         String?
  supplier        String?
  temperature     String?
  metadata        String?
  relatedResearch String?
  links           Link[]           @relation("NoteLinks")
  relatedLitNotes LiteratureNote[] @relation("EntryLitNotes")
}

model Table {
  id           String      @id @default(uuid())
  name         String
  description  String?
  experimentId String?
  columns      String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  links        Link[]      @relation("NoteLinks")
  experiment   Experiment? @relation(fields: [experimentId], references: [id])
  rows         TableRow[]
}

model TableRow {
  id        String   @id @default(uuid())
  tableId   String
  data      String
  rowNumber Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  table     Table    @relation(fields: [tableId], references: [id])
}

model Protocol {
  id               String              @id @default(uuid())
  name             String
  description      String?
  category         String
  version          String              @default("1.0")
  steps            String
  equipment        String?
  reagents         String?
  safetyNotes      String?
  expectedDuration String?
  difficulty       String?
  successRate      Float?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  links            Link[]              @relation("NoteLinks")
  executions       ProtocolExecution[]
  tasks            Task[]

  @@index([category])
  @@index([updatedAt])
  @@index([createdAt])
}

model ProtocolExecution {
  id             String      @id @default(uuid())
  protocolId     String
  experimentId   String?
  status         String
  startDate      DateTime?
  endDate        DateTime?
  notes          String?
  modifications  String?
  results        String?
  issues         String?
  nextSteps      String?
  executedBy     String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  completedSteps String?
  links          Link[]      @relation("NoteLinks")
  experiment     Experiment? @relation(fields: [experimentId], references: [id])
  protocol       Protocol    @relation(fields: [protocolId], references: [id])
}

model Link {
  id         String            @id @default(uuid())
  sourceType String
  sourceId   String
  targetType String
  targetId   String
  createdAt  DateTime          @default(now())
  recipeExecution   RecipeExecution   @relation("NoteLinks", fields: [sourceId], references: [id])
  protocolExecution ProtocolExecution @relation("NoteLinks", fields: [sourceId], references: [id])
  protocol          Protocol          @relation("NoteLinks", fields: [sourceId], references: [id])
  table             Table             @relation("NoteLinks", fields: [sourceId], references: [id])
  databaseEntry     DatabaseEntry     @relation("NoteLinks", fields: [sourceId], references: [id])
  highlight         Highlight         @relation("NoteLinks", fields: [sourceId], references: [id])
  note              Note              @relation("NoteLinks", fields: [sourceId], references: [id])
}

model Recipe {
  id               String             @id @default(cuid())
  name             String
  description      String?
  category         String
  type             String
  instructions     String?
  notes            String?
  pH               Float?
  osmolarity       String?
  storage          String?
  shelfLife        String?
  source           String?
  version          String             @default("1.0")
  isPublic         Boolean            @default(false)
  createdBy        String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  steps            String?
  recipeExecutions RecipeExecution[]
  ingredients      RecipeIngredient[]

  @@map("recipes")
}

model RecipeIngredient {
  id            String  @id @default(cuid())
  recipeId      String
  name          String
  amount        Float
  unit          String
  concentration String?
  supplier      String?
  catalogNumber String?
  notes         String?
  recipe        Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@map("recipe_ingredients")
}

model CalendarEvent {
  id          String    @id @default(uuid())
  type        String
  title       String
  description String?
  start       DateTime
  end         DateTime?
  allDay      Boolean?  @default(false)
  relatedId   String?
  createdAt   DateTime  @default(now())
  metadata    String?
}

model Task {
  id               String             @id @default(uuid())
  title            String
  description      String?
  status           String
  priority         String
  deadline         DateTime?
  createdAt        DateTime           @default(now())
  completedAt      DateTime?
  autoGenerated    Boolean            @default(false)
  isRecurring      Boolean            @default(false)
  recurringPattern String?
  estimatedHours   Float?
  actualHours      Float?
  dependsOnId      String?
  workflowId       String?
  workflowOrder    Int?
  workflowType     String?
  templateId       String?
  projectId        String?
  experimentId     String?
  protocolId       String?
  noteId           String?
  tags             String?
  metadata         String?
  note             Note?              @relation(fields: [noteId], references: [id])
  protocol         Protocol?          @relation(fields: [protocolId], references: [id])
  experiment       Experiment?        @relation(fields: [experimentId], references: [id])
  project          Project?           @relation(fields: [projectId], references: [id])
  template         TaskTemplate?      @relation(fields: [templateId], references: [id])
  workflow         TaskWorkflow?      @relation(fields: [workflowId], references: [id])
  dependsOn        Task?              @relation("TaskDependencies", fields: [dependsOnId], references: [id])
  dependentTasks   Task[]             @relation("TaskDependencies")
  attachments      TaskAttachment[]
  comments         TaskComment[]
  dependents       TaskDependency[]   @relation("TaskDependenciesTo")
  dependencies     TaskDependency[]   @relation("TaskDependenciesFrom")
  notifications    TaskNotification[]
  timeEntries      TaskTimeEntry[]

  @@index([status])
  @@index([priority])
  @@index([deadline])
  @@index([createdAt])
  @@index([projectId])
  @@index([experimentId])
}

model TaskDependency {
  id             String   @id @default(uuid())
  fromTaskId     String
  toTaskId       String
  dependencyType String   @default("blocks")
  createdAt      DateTime @default(now())
  toTask         Task     @relation("TaskDependenciesTo", fields: [toTaskId], references: [id], onDelete: Cascade)
  fromTask       Task     @relation("TaskDependenciesFrom", fields: [fromTaskId], references: [id], onDelete: Cascade)

  @@unique([fromTaskId, toTaskId])
}

model TaskWorkflow {
  id          String                  @id @default(uuid())
  name        String
  description String?
  type        String
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  metadata    String?
  tasks       Task[]
  executions  TaskWorkflowExecution[]
}

model TaskWorkflowExecution {
  id          String       @id @default(uuid())
  workflowId  String
  status      String
  startTime   DateTime     @default(now())
  endTime     DateTime?
  currentNode String?
  progress    Float        @default(0)
  logs        String?
  metadata    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  workflow    TaskWorkflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
}

model TaskTimeEntry {
  id          String    @id @default(uuid())
  taskId      String
  startTime   DateTime
  endTime     DateTime?
  description String?
  createdAt   DateTime  @default(now())
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model TaskComment {
  id        String   @id @default(uuid())
  taskId    String
  content   String
  author    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model TaskAttachment {
  id         String   @id @default(uuid())
  taskId     String
  fileName   String
  filePath   String
  fileSize   Int
  mimeType   String
  uploadedAt DateTime @default(now())
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model TaskTemplate {
  id               String   @id @default(uuid())
  name             String
  description      String?
  title            String
  defaultPriority  String   @default("medium")
  defaultStatus    String   @default("todo")
  estimatedHours   Float?
  isRecurring      Boolean  @default(false)
  recurringPattern String?
  tags             String?
  category         String?
  variables        String?
  usageCount       Int      @default(0)
  isPublic         Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  tasks            Task[]
}

model TaskNotification {
  id             String    @id @default(uuid())
  taskId         String
  type           String
  message        String
  scheduledFor   DateTime
  sentAt         DateTime?
  isRead         Boolean   @default(false)
  deliveryMethod String    @default("in_app")
  priority       String    @default("normal")
  metadata       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  task           Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model SyncNotification {
  id             String    @id @default(uuid())
  service        String    // 'cloud', 'zotero', etc.
  type           String    // 'warning', 'critical', 'error'
  message        String
  scheduledFor   DateTime
  sentAt         DateTime?
  isRead         Boolean   @default(false)
  deliveryMethod String    @default("in_app")
  priority       String    @default("normal")
  metadata       String?   // JSON string with additional data
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([service])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
}

model RecipeExecution {
  id             String      @id @default(uuid())
  recipeId       String
  experimentId   String?
  status         String
  startDate      DateTime?
  endDate        DateTime?
  notes          String?
  modifications  String?
  results        String?
  issues         String?
  nextSteps      String?
  executedBy     String?
  completedSteps String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  links          Link[]      @relation("NoteLinks")
  experiment     Experiment? @relation(fields: [experimentId], references: [id])
  recipe         Recipe      @relation(fields: [recipeId], references: [id])
}

model VariableCategory {
  id          String               @id @default(uuid())
  name        String
  description String?
  color       String?
  icon        String?
  unit        String?
  dataType    String
  options     String?
  minValue    Float?
  maxValue    Float?
  isRequired  Boolean              @default(false)
  isGlobal    Boolean              @default(false)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  userId      String
  variables   ExperimentVariable[]
  user        User                 @relation(fields: [userId], references: [id])
}

model ExperimentVariable {
  id           String           @id @default(uuid())
  experimentId String
  categoryId   String
  name         String
  description  String?
  unit         String?
  dataType     String
  isRequired   Boolean          @default(false)
  order        Int              @default(0)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  category     VariableCategory @relation(fields: [categoryId], references: [id])
  experiment   Experiment       @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  values       VariableValue[]
}

model VariableValue {
  id         String             @id @default(uuid())
  variableId String
  value      String
  timestamp  DateTime           @default(now())
  notes      String?
  metadata   String?
  createdBy  String?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  variable   ExperimentVariable @relation(fields: [variableId], references: [id], onDelete: Cascade)
}

model ReportTemplate {
  id          String         @id @default(uuid())
  name        String
  description String?
  category    String
  dataSources String
  layout      String
  filters     String?
  isPublic    Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  userId      String
  reports     CustomReport[]
  user        User           @relation(fields: [userId], references: [id])
}

model CustomReport {
  id               String            @id @default(uuid())
  name             String
  description      String?
  templateId       String?
  dataSources      String
  layout           String
  filters          String?
  schedule         String?
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userId           String
  user             User              @relation(fields: [userId], references: [id])
  template         ReportTemplate?   @relation(fields: [templateId], references: [id])
  executions       ReportExecution[]
  scheduledReports ScheduledReport[]
}

model ReportExecution {
  id          String       @id @default(uuid())
  reportId    String
  filters     String
  format      String
  status      String
  data        String?
  error       String?
  startedAt   DateTime     @default(now())
  completedAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  report      CustomReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model ScheduledReport {
  id        String       @id @default(uuid())
  reportId  String
  schedule  String
  lastRun   DateTime?
  nextRun   DateTime?
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  report    CustomReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
}
