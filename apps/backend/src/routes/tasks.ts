import { Router } from 'express';
import { PrismaClient } from '@prisma/client';
import { z } from 'zod';

const router = Router();
const prisma = new PrismaClient();

const createTaskSchema = z.object({
    title: z.string().min(1),
    description: z.string().optional(),
    status: z.enum(['todo', 'in_progress', 'done', 'overdue']).default('todo'),
    priority: z.enum(['high', 'medium', 'low']).default('medium'),
    deadline: z.string().datetime().optional().nullable(),
    autoGenerated: z.boolean().optional().default(false),
    projectId: z.string(),
    experimentId: z.string().optional().nullable(),
});

const updateTaskSchema = z.object({
    title: z.string().min(1).optional(),
    description: z.string().optional(),
    status: z.enum(['todo', 'in_progress', 'done', 'overdue']).optional(),
    priority: z.enum(['high', 'medium', 'low']).optional(),
    deadline: z.string().datetime().optional().nullable(),
    completedAt: z.string().datetime().optional().nullable(),
    autoGenerated: z.boolean().optional(),
    experimentId: z.string().optional().nullable(),
});

// Get all tasks
router.get('/', async (req, res) => {
    const tasks = await prisma.task.findMany({ orderBy: { createdAt: 'desc' } });
    res.json(tasks);
});

// Get tasks by project
router.get('/project/:projectId', async (req, res) => {
    const { projectId } = req.params;
    const tasks = await prisma.task.findMany({ where: { projectId }, orderBy: { createdAt: 'desc' } });
    res.json(tasks);
});

// Get tasks by experiment
router.get('/experiment/:experimentId', async (req, res) => {
    const { experimentId } = req.params;
    const tasks = await prisma.task.findMany({ where: { experimentId }, orderBy: { createdAt: 'desc' } });
    res.json(tasks);
});

// Get overdue tasks
router.get('/overdue', async (req, res) => {
    const now = new Date();
    const tasks = await prisma.task.findMany({
        where: {
            deadline: { lt: now },
            status: { not: 'done' },
        },
        orderBy: { deadline: 'asc' },
    });
    res.json(tasks);
});

// Create a task
router.post('/', async (req, res) => {
    try {
        const validated = createTaskSchema.parse(req.body);
        const task = await prisma.task.create({ data: validated });
        res.status(201).json(task);
    } catch (error) {
        if (error instanceof z.ZodError) {
            return res.status(400).json({ error: 'Validation error', details: error.errors });
        }
        res.status(500).json({ error: 'Failed to create task' });
    }
});

// Update a task
router.put('/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const validated = updateTaskSchema.parse(req.body);
        const task = await prisma.task.update({ where: { id }, data: validated });
        res.json(task);
    } catch (error) {
        if (error instanceof z.ZodError) {
            return res.status(400).json({ error: 'Validation error', details: error.errors });
        }
        res.status(500).json({ error: 'Failed to update task' });
    }
});

// Delete a task
router.delete('/:id', async (req, res) => {
    try {
        const { id } = req.params;
        await prisma.task.delete({ where: { id } });
        res.json({ success: true });
    } catch (error) {
        res.status(500).json({ error: 'Failed to delete task' });
    }
});

export default router; 